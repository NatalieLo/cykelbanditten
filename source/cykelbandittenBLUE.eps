%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cykelbandittenBLUE.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: POLO
%%CreationDate: 19/03/11
%%BoundingBox: 0 0 480 650
%%HiResBoundingBox: 0 0 479.7398 649.0840
%%CropBox: 0 0 479.7398 649.0840
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 96 128 8%%BeginData: 22414 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45151414141514141415141414151414141514141415141414151414%141514141415141414151414141514141415141414151414141514141415%141414151414141514141415141414151414141514141415141414151414%1415141414151461FF0E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E1436FFFD5E1461FF0E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E1436FF14141514%141415141414151414141514141415141414151414141514141415141414%151414141514141415141414151414141514141415141414151414141514%141415141414151414141514141415141414151414141514141415141414%61FF0E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E1436FFFD5E145BFF0E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E362E140D360E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E1436FF1514141415141414151414%141514141415141414151414141514141415141414151414141514141415%14141415141414152F521427351414151414141514141415141414151414%141514141415141414151414141514141415141414151461FF0E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E53285327140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E1436%FFFD1C14362E2727585836FD0E142727F859FD291461FF0E140E140E140E%140E140E140E140E140E140E140E140E140E140E36F8F8F827515227360E%140E140E140E140E140E140EF8F8272F140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E1436FF14%141514141415141414151414141514141415141414151414141528522727%277CF87C2714141514141415141414151436F827F8591415141414151414%141514141415141414151414141514141415141414151414141514141415%14141461FF0E140E140E140E140E140E140E140E140E140E140E140E140E%2F2246224C7BFEA4A57B272F140E140E140E140E140E142FF8F8272F140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E1436FFFD181453464646479FFEC6FEC6FE9F5AFD0B14%837C5127FD2A145BFF0E140E140E140E140E140E140E140E140E140E140E%140E14224622464CFEA4FEA4FEA4FE7B140E140E140E140E140E14A4FEA4%590E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E1436FF151414141514141415141414151414%14151414141514140D4D464746CCFEFEC6FEFEFEC6CC1414141514141415%141436A6FEFE591514141415141414151414141514141415141414151414%1415141414151414141514141415141414151461FF0E140E140E140E140E%140E140E140E140E140E140E140E3022462276A4FEC6FEA4FEC6FEA45A0E%140E140E140E140E52F827517D0E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E1436FFFD1814%4D46477CFEC6CCC6FEC6CCA4C735FD081459F827F82736FD2A1461FF0E14%0E140E140E140E140E140E140E140E140E140E140E142F46225251A527A5%51A5275227530E140E140E140E53F827F8F828140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E1436FF141415141414151414141514141415141414151414141514140D%4DF8272727F8272727F8272E15141414151459F827F827F8361414141514%141415141414151414141514141415141414151414141514141415141414%151414141514141461FF0E140E140E140E140E140E140E140E140E140E14%0E140E140E140E4C277D534C2727A85227530E140E140E53F8F8F827F852%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E1436FFFD1B14464746464647464646474C%1414143528F827F827F827FD2D145BFF0E140E140E140E140E140E140E14%0E140E140E140E140E140E140E4C224622462246224622530E362827F8F8%F827F8F82E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E1436FF1514141415141414%15141414151414141514141415141414153683524D4647464D4647464D2F%52F827F827F827F8272E1514141415141414151414141514141415141414%151414141514141415141414151414141514141415141414151461FF0E14%0E140E140E140E140E140E140E140E140E140E140E147C27F8F822462246%224622464627F8F8F827F8F8F82727140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E1436FFFD17148352F827F852464746464647464CF827F827F827F82727%36FD2F1461FF0E140E140E140E140E140E140E140E140E140E140E1435FE%F8F8F827F84C22462246224628F8F827F8F8F82727140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E1436FF141415141414151414141514141415141414%15141414ACFE27F827F827274D4647464D4628F827F827F8275214141514%141415141414151414141514141415141414151414141514141415141414%1514141415141414151414141514141461FF0E140E140E140E140E140E14%0E140E140E140E140E59A4FE27F8F827F8F8F84C2246224CF8F8F827F8F8%F8522F140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E1436FFFD1514A5FEC6%7CF827F827F827274D464C2727F827F827F827F82727532FFD2E145BFF0E%140E140E140E140E140E140E140E140E140E1459FEA4FEA427F8F8F827F8%F8274627F8F827519F7BA57B27F827F8F800522F140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E1436FF1514141415141414151414141514141415141414CCFEFEC6FE%A527F827F827F8272827F82727FEC6FEFEFEC652F827F827F82727533614%141514141415141414151414141514141415141414151414141514141415%14141415141414151461FF0E140E140E140E140E140E140E140E140E140E%59A4FEC6FEA4FEA452F827F8F8F827F8F8F827A4FEA4FEC6FE5127F8F8F8%27F8F8F82727532F140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E1436FFFD1314A5FEC6FEC6FEC6FEC6A4%4A762727F827F827F852A5FEC6FE7B27F827F827F827F827F827F8A59F83%FD231461FF0E140E140E140E140E140E140E140E140E140DFEA4FEA4FEA4%FEA4FEA4F8F8FE269F2E27F8F8F82727512727F8F8F827F8F8F827F8F8F8%27A4FE7C352F140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E1436FF141415141414151414141514141415141414A7%FEFEC6FEFEFEC6FEFEFEF827FE4BC66014142F592E27F827F827F827F827%F827F827F82751FEC652F827275914141415141414151414141514141415%14141415141414151414141514141461FF0E140E140E140E140E140E140E%140E140E14A5FEC6FEA4FEC6FEA4FE9EF8F8FE20FE0E140E140E140E142F%532E282727F8F8F827F8F8F87CC6C6F8527D7DF8360E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E1436FFFD111436FEC6FE%C6FEC6FEC6FEC6FEC6FEC627A5FD1014362F5A2F362F5A59277BA752272E%FD1E145BFF0E140E140E140E140E140E140E140E140E5FA4FEA4FEA4FEA4%FEA4FEA4FEA4FEF8A60E140E140E140E140E140E140E140E140E140E140E%140E142FA5275228360E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E1436FF151414141514143685361414151414141583FE%C6FEFEFEC6FEFEFEC6FEFEFEC627A6141415141414151414141514141415%14141415141414151414C6605A8514151414141514141415141414151414%14151414141514141415141414151461FF0E140E140E1414FFFFFF14140E%140E140EA6C6FEA4FEC6FEA4FEC6FEA4FEC6FEF8A60E140E140E140E140E%140E140E140E140E140E140E140E140EFE355BA9140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E1436FFFD061461FF61FF%85FD0614A5FEC6FEC6FEC6FEC6FEC6FEC6FEC627A5FD181460C65A36AFFD%1F1461FF0E140E140E140EFF5A36A8360E140E140EA6A4FEA4FEA4FEA4FE%A4FEA4FEA4FEF8A50E140E140E140E140E140E140E140E140E140E140E14%0E1435FE355A84140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E1436FF1414151414141536FF5AAF841414151414A5FEFE%FEC6FEFEFEC6FEFEFEC6FEFE27A415141414151414141514141415141414%151414141514141415821414AF1414141514141415141414151414141514%141415141414151414141514141461FF0E140E140E140E145AFF14FF1414%0E140EA6A4FEC6FEA4FEC6FEA4FEC6FEA4FE26262F140E140E140E140E14%0E140E140E140E140E140E140E140E360E14A8140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E1436FFFD0914AF858485FD%0414A5FEC6FEC69E267BC6FEC6FEC6FE7A27260506FD1A14AFFD1F145BFF%0E140E140E140E140E61A95AA8F8F80D0E83A4FEA451A4F8F84BA4FEA4FE%50F826FD04F80D0E140E140E140E140E140E140E140E140E140E140E140E%14A8140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E1436FF15141414151414141514FF53A14BF8F83636FEC6FE2626F8F8%51FEC6C6262726FD06F8270C151414141514141415141414151414141514%14141514FF14151414141514141415141414151414141514141415141414%15141414151461FF0E140E140E140E140E1484A8F8FFF8F8F814A4FEA451%FD04F82651F827FD0BF80D0E140E140E140E140E140E140E140E140E140E%14FF140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E1436FFFD0A1436FF277D52F8F80083C6FEC6FE7A51F8F8F84BFD0DF8%270DFD04143636FD0C14FFFD1F1461FF0E140E140E140E140E140E85A827%A8F8F8F805A5A4FE7427F826F820FD10F8053684FFFFFFA8600E140E140E%140E140E14FF140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E1436FF141415141414151414141514FF27A14BF8F8F82727%F827507B26FD14F82E141436FFFF37141514141415141414FF1414141514%141415141414151414141514141415141414151414141514141461FF0E14%0E140E140E140E140E1484A8F8FFFD04F8267B2627FD17F800061436FFA9%140E140E140E140E14FF140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E1436FFFD0C1436FF277D52FD20F805145AFF84FD%0814FFFD1F145BFF0E140E140E140E140E140E140E85A827A8FD22F81484%FF36140E5F7C130E61FF140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E1436FF1514141415141414151414141514FF27A8%4BFD21F80537AFFF1415FE7B2761FFA91415141414151414141514141415%141414151414141514141415141414151461FF0E140E140E140E140E140E%140E1484A827FFFD22F80E36AFAF0EA69E51A9AF14140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E1436FFFD0E1437FF27%A87D21272127F827FD1BF80D1461FFAF36FFFFAFFD211461FF0E140E140E%140E140E140E140E140EA9A960A84D28462246224621280000FD16F80514%0E5AA9FFFFFF5A140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E1436FF14141514141415141414151414141536FF5A%FF841414360E30294D4C47464D2127F82FFD11F82714151414363785FF36%151414141514141415141414151414141514141415141414151414141514%141461FF0E140E140E140E140E140E140E140E1484FF5AFF14140E140E14%0E140E30294D28280D27FD11F8140E140E140E36AF520E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E1436FFFD101437%FF85A985FD0E1406FD11F80CFD061459F82FFD1F145BFF0E140E140E140E%140E140E140E140E140EA9A87E4D0E0E140E140E140E140E140E140E0DFD%11F8280D300D300D300D4D22140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E1436FF151414141514141415141414151414%141536A22F4D4647464D4647464D4647464D4647464D4647464D464722FD%09F82147464D4647464D4647291514141415141414151414141514141415%1414141514141415141414151461FF0E140E140E140E140E140E140E140E%140E14294C4C46A8AFFFFFA9A984610E300D2F2928FD05F827F827FD09F8%27224622462246224622460E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E1436FFFD121485A9FF46A2FD08FFA277284D2827%2127F827F8272828FD09F8360D300DFD0414474630FD1D1461FF0E140E14%0E140E140E140E140E140E140E2F52FF7D4D2228060C052E27527DFFFFA9%3605FD07F80D0EFD09F80E140E140E14294C224622140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E1436FF1414151414141514%1414151414141514141427274C4D4D282E0528052E0C2F2752A8FF27FD06%F827141400FD08F81514140D534647464D462753A9141414151414141514%14141514141415141414151414141514141461FF0E140E140E140E140E14%0E140E140E140E140E1428282146FD07F827050527FD08F8140E28FD08F8%0D3028462246224D29367DFFFF5B0E140E140E140E140E140E140E140E14%0E140E140E140E140E1436FFFD12142FF8F8F8214627FD11F82E14140DFD%08F8284647464D2936141452FFAFFFA9FD1A145BFF0E140E140E140E140E%140E140E140E140E27FD05F84C22A651A67B7526FD0BF80D140E14FD09F8%46280E0E140E140E2727FFA9FF52280C140E140E140E140E140E140E140E%140E140E140E140E1436FF1514141415141414151414141514141427F8F8%F82751774C4D2F2F0C2814277B51F8F8F8270527F8F8051414151427FD08%F80D151414141514147DFFFF2727FFF8F8F82E1414141514141415141414%1514141415141414151461FF0E140E140E140E140E140E140E140E05F8F8%F8277C2F0646284D0D0C052E0614057BF8F8F8270D050514294D224600FD%08F80D0E140E140E1414FFFFA8F8F87D7DF8F8F8270D140E140E140E140E%140E140E140E140E140E1436FFFD0E142EF8F8F85159270D28294D465305%2E0514060D057BF8F8F82E2F4D464746464628FD07F82EFD0714618427F8%F82652FF7D7B51F8270DFD121461FF0E140E140E140E140E140E140E14F8%F8F82627050C05052F224D2200050D0E27050D0D7BF82222462246224622%4D06F8F82626757B140E140E140E140E143627F8F8050D0C7EA8362E51F8%F80C140E140E140E140E140E140E140E140E1436FF141415141414151414%1415141405F8F826272F142E0527054D534D4C7D5A2EF8142F534647464D%4647464D53A9FFFFC7FEC6FEFEFE527D76837D8336141415F8F8F8350E27%05A9AF1405A6F8F80D1514141415141414151414141514141461FF0E140E%140E140E140E140E140EF8F8F8262F05280E140505A8CA224D527D284D22%46224622462246290E5AFD04FFCDC6FEA4FEC6767BA0C6FEA4CC0E140E27%F8F80C140D05F8AF84050EA5F8050E140E140E140E140E140E140E140E14%36FFFD0C142FF8F8F87C052805270D36FF51FFA946714646464746464647%4C27F82F14FD05FFC7FEC6FEC6FEC6FEC6FEC6FEC660141405F8F8271414%062727FF270D359FF82EFD0F145BFF0E140E140E140E140E140E1405F8F8%2027270606F8057EFFA8A1F8462246224622462253587BF8F80536FFFFA8%2727CEA4FEA4FEA4FEA4FEA4FEA4C635140E0CF8F8F8140E14F80DF8F806%145827F8140E140E140E140E140E140E140E1436FF151414141514141415%14141427F8F826600D2FF82705527DFF2728464D4647465353A5505151F8%F82736FFFFFFF827A0FEFEFEC6FEFEFEC6CD8283141514141427F8F82715%1427F828F82805367AF806151414141514141415141414151461FF0E140E%140E140E140E140E14F8F8F84B052E0C140E14A952FF27F821214C77CB50%4B272E0551F8F8F814A9FFFFFFA876A4FEC6FE052E0E140E140E140E140E%1405F8F8260527F8F8F827F805F87BF8050E140E140E140E140E140E140E%1436FFFD0C1427F8F8262E0DFD0414AFFFFF27F8F8F87D7DA827F82E0D14%A5F8F8271461FD04FFCFCE2627F8F8F8FD0B14F8F8F827052EF8280527F8%0D2751F8FD0E1461FF0E140E140E140E140E140E1400F8F8272D0C0005F8%05F8FF52FF5252A1FF5227F800F805F827F8F8F8140E60A8FFFFA905F8F8%F8000D0E140E140E140E140E140E27F8F8F8580E27F8F80528F82726F80E%140E140E140E140E140E140E1436FF14141514141415141414151428F8F8%F851052F0D2EF82FA9A8A87D7D7D52A805270C2F0C2E26F8F827F827FD05%F8270C1514141415141414151414141514141427F8F8F87C2714F828052E%5127F8141415141414151414141514141461FF0E140E140E140E140E140E%1406F8F8F850360D27050D0E2E2776FFFFA8AF0627F805000D8226F8F806%140E140E140E140E140E140E140E140E140E140E140E140E140E27F8F8F8%4B5127052751A4F8000E140E140E140E140E140E140E1436FFFD0D14F8F8%F8277B28062E0D2705270561F828051405270514277BF8F8F8FD1B140D27%F8F8F827267B5051F8F800FD0E145BFF0E140E140E140E140E140E140E27%F8F8F8752E060C050D050C270E05F80C05140027F8C7F8F8F8050E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E28FD09F80D%0E140E140E140E140E140E140E1436FF151414141514141415141414150E%FD04F87B2E2814270515051406270D2E0C2F277B26F8F8F80D1514141415%14141415141414151414141514141415141414151414141514130527FD05%F82F14151414141514141415141414151461FF0E140E140E140E140E140E%140E1405FD04F8A4812E06060E270E2806270E052EA550F8F8F805140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E0D052806140E140E140E140E140E140E140E140E1436FFFD0F1405FD04%F87B7AA727140514052F0C2EA57B26F8F8F800FD381461FF0E140E140E14%0E140E140E140E140E1400FD04F82674C6A45181517BFE5051FD04F80014%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E1436FF1414%15141414151414141514141415141405FD06F827267B5151FD06F8051414%151414141514141415141414151414141514141415141414151414141514%141415141414151414141514141415141414151414141514141461FF0E14%0E140E140E140E140E140E140E140E140605FD0EF806140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E1436FFFD14142E05FD0A%F82EFD3D145BFF0E140E140E140E140E140E140E140E140E140E140E140E%0C05270505050D0D140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E1436FF1514141415141414151414141514141415%141414151414141514141415141414151414141514141415141414151414%141514141415141414151414141514141415141414151414141514141415%141414151414141514141415141414151461FF0E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E1436FFFD5E1461FF%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E1436FF141415141414151414141514141415141414151414141514%14141514141415141414151414143760855A151414141514141415141414%151414141514141415148536151414141514141415141414151414141514%1414151414141514141461FF0E140E140E140E140E140E360E140E140E14%0E140E140E1484360E140E140E365A1414360E140EA9A95A0E140E140E5B%36140E140E140E140E140E3614140E61848536140E140E140E140E140E14%0E140E140E140E140E140E140E140E1436FFFD0B1484FF5AFD0814AF36AF%3614143785FFA9A936A936FD0414FFFF61FD041484851414A961141414AF%8414A961141414AFA9361414361436FD0F143637FD05145BFF0E140E140E%140E140E140EA936A9AF850EA95A140E5AA81484140E140E60FF140E14A8%5A0E140E14A836A9850E140EAF84140EA984140E1484FF5A8536140E1436%360E140EAF0EFF0E1414360E140E140EA90E140E140E8536140E140E1436%FF1514141415141414151414FF15143784FF36FF3615A96114FF141436AF%60AF141514AF3615141414FF1436A9FF3614FFFF1414A9FF141414AF5AAF%AF611414148584148485FFAFFFAFA961AFFF5A141415FF6114151414A961%141414151461FF0E140E140E140E140E1414A90E140E140E145AA936AF0E%14FF145AFF5A5BA9140E14A95A0E140E36A885A9FF846136A9A8360E85A8%850E14A85B0EA9AF610E145A850E5A36AF36FF36360E14A8A9A9140EFFAF%140E140EA936140E140E1436FFFD0A146185FD0714A9FF361414FF84FF36%145A85141414AF361414AFFFFF5A5B1414148585A936148485A91414AF14%1484A9A9A914855A141414A914FF14141436AFFD0414FF85A9141414A961%FD051461FF0E140E140E140E140E145A850E140E140E140E85FF140E5AFF%850EAFA8FFA8AFA836845A0E140EA9A9851414148584A9A8A95A8536AF36%14AF140E605A147EAF845A0E140EA90EFF0E140E605A140E140EFF0EAF5A%140EAF0E140E140E1436FF14141514141415141414AF5A14141514141415%AF611485FFFF14155A6185855A6114AF5A14141584855AFF856184FF85A9%A98585855AA914FF14155A851437AFAF36151436A915FF14141584851415%1414FF1536FF1415A914141514141461FF0E140E140E140E140E14A8360E%140EA95A145AAF0E1436FFA9140E140EA936140E14A8140E140EAF36140E%85AF85A81414AF0E858414A914A9140E5BA914A861845A0E1436A90EFF0E%140EAF84855A140EFF0E1484A90EAF0E140E140E1436FFFD0A14FF141414%FF841414FF361414145AFF5A141414AFFD0414AFFD0414A936148584FF85%FF1414AF14848514AF84AF141436AFA98514A936141461A914FF141414A9%8536611414FF141414A961FFFD06145BFF0E140E140E140E140E5AA81436%FF5A140E61A8140E140E847EAF84140EFF148484FFA8140E140EFF84FF84%5A0E5A84140EAF365A5A145AFF84140E14A8850E14845A0E1436AF0EFF0E%140EFF0E140E140EAF0E140E36A9FF0E140E140E1436FF15141414151414%14155A855AFF5A141415AF6114151414848514FF8437FFFF846114AF1415%36FFAF851414141560851415848514371414FF851436A9FF141414AF5A14%1461A914FF151414FF1514141415A91414151485FF15141414151461FF0E%140E140E140E140E85A9AF14140E145AA90E140E140E8536140E8584360E%140E14A9855A8584850E140E140EA95A140E6184140E140E855A145A85FF%140E14A85B0E1436AF0EFF0E1414A90E6184FF0EAF0E140E140E850E140E%140E1436FFFD0914A9AFFD0514A936FD0514856114141485FD0514858461%366136FD05148437141436A9FD09148514141485361414618414FF141461%FFFF84611414A9FD0C1461FF0E140E140E140E140E600E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E14145A0E14%0E140E600E140E140E140E140E140E1436FF141415141414151414141514%141415141414151414141514141415141414151414141514141415141414%151414141514141415141414151414141514141415141414151414141514%1414151414141514141415141414151414141514141461FF0E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E1436FF%FD5E145BFF0E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E1436FF15141414151414141514141415141414151414%141514141415141414151414141514141415141414151414141514141415%141414151414141514141415141414151414141514141415141414151414%14151414141514141415141414151461FF0E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E1436FFFD5E1461FF0E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E1436FF1414151414141514141415141414151414141514141415141414%151414141514141415141414151414141514141415141414151414141514%141415141414151414141514141415141414151414141514141415141414%151414141514141461FF0E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E140E140E140E140E140E140E140E140E14%0E140E140E140E140E140E140E1436FFFD5E145BFF0E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E140E140E140E%140E140E140E140E140E140E140E140E140E140E140E140E1436FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">CMJN de base</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2011-03-10T16:20:58+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2011-03-10T16:20:58+01:00</xmp:ModifyDate>
         <xmp:CreateDate>2011-03-10T16:20:58+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>192</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AIs9BfKXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXon5E/8prJ/zBS/8TjzUdtf3P8AnD9Lv/Z3&#xA;/GD/AFT94ed5t3QOxV2KuxV2KuxV2KuxV2KuxV2KuxVaXQOELDmwLKlRUhSASB4DkPvyByREuG92&#xA;0YZGBnXpBq12SBB5MDEjm7CxdirsVdirsVdirsVdirsVeifkT/ymsn/MFL/xOPNR21/c/wCcP0u/&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:FD77B1C2E1A7DD119337CA188273AC79</stRef:instanceID>
            <stRef:documentID>uuid:FC77B1C2E1A7DD119337CA188273AC79</stRef:documentID>
            <stRef:originalDocumentID>uuid:FC77B1C2E1A7DD119337CA188273AC79</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068119457A8BA9332C69C</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F77F1174072068119457A8BA9332C69C</xmpMM:DocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068119457A8BA9332C69C</stEvt:instanceID>
                  <stEvt:when>2011-03-10T16:20:58+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:FC77B1C2E1A7DD119337CA188273AC79</xmpMM:OriginalDocumentID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>29.699996</stDim:w>
            <stDim:h>41.999986</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par défaut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Blanc</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Noir</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Rouge CMJN</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Jaune CMJN</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Vert CMJN</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Cyan CMJN</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Bleu CMJN</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Magenta CMJN</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=15 M=100 J=90 N=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>14.999998</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=90 J=85 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>90.000000</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=80 J=95 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>80.000000</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=50 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=35 J=85 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>35.000004</xmpG:magenta>
                           <xmpG:yellow>85.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=5 M=0 J=90 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>5.000001</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=20 M=0 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>19.999998</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=0 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 J=100 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=10 J=100 N=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=90 M=30 J=95 N=30</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>90.000000</xmpG:cyan>
                           <xmpG:magenta>30.000002</xmpG:magenta>
                           <xmpG:yellow>95.000000</xmpG:yellow>
                           <xmpG:black>30.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=0 J=75 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=80 M=10 J=45 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>80.000000</xmpG:cyan>
                           <xmpG:magenta>10.000002</xmpG:magenta>
                           <xmpG:yellow>45.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=70 M=15 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>70.000000</xmpG:cyan>
                           <xmpG:magenta>14.999998</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=85 M=50 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>85.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=95 J=5 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>5.000001</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=100 J=25 N=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>25.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=75 M=100 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>75.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 J=0 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=100 J=35 N=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>35.000004</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=10 M=100 J=50 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>10.000002</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=95 J=20 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>95.000000</xmpG:magenta>
                           <xmpG:yellow>19.999998</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=25 J=40 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>25.000000</xmpG:magenta>
                           <xmpG:yellow>39.999996</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=45 J=50 N=5</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>45.000000</xmpG:magenta>
                           <xmpG:yellow>50.000000</xmpG:yellow>
                           <xmpG:black>5.000001</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=50 J=60 N=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>60.000004</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=55 M=60 J=65 N=40</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>55.000000</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>39.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=25 M=40 J=65 N=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>25.000000</xmpG:cyan>
                           <xmpG:magenta>39.999996</xmpG:magenta>
                           <xmpG:yellow>65.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 J=75 N=10</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>30.000002</xmpG:cyan>
                           <xmpG:magenta>50.000000</xmpG:magenta>
                           <xmpG:yellow>75.000000</xmpG:yellow>
                           <xmpG:black>10.000002</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=35 M=60 J=80 N=25</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>35.000004</xmpG:cyan>
                           <xmpG:magenta>60.000004</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>25.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=65 J=90 N=35</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>65.000000</xmpG:magenta>
                           <xmpG:yellow>90.000000</xmpG:yellow>
                           <xmpG:black>35.000004</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 J=100 N=50</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>39.999996</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>100.000000</xmpG:yellow>
                           <xmpG:black>50.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=70 J=80 N=70</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>50.000000</xmpG:cyan>
                           <xmpG:magenta>70.000000</xmpG:magenta>
                           <xmpG:yellow>80.000000</xmpG:yellow>
                           <xmpG:black>70.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=100</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>255</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=90</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>229</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=80</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>203</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=70</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>178</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=60</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>152</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=50</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>127</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=40</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>101</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=30</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>76</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=20</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>50</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=10</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>25</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>N=5</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>12</xmpG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -649.084 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 649.084 li
479.74 649.084 li
479.74 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 649.084 mo
479.74 649.084 li
479.74 0 li
0 0 li
0 649.084 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.746094 .226563 0 0 cmyk
f
268.529 44.4893 mo
268.529 44.4893 268.134 45.3076 267.781 46.0298 cv
267.783 46.0298 267.783 46.0298 267.783 46.0298 cv
267.763 46.0703 267.742 46.1128 267.72 46.1538 cv
267.564 46.4746 267.419 46.7651 267.332 46.9399 cv
267.039 47.5195 265.744 50.6812 265.089 51.7974 cv
265.089 51.7983 265.089 51.7998 265.087 51.8008 cv
264.179 53.5244 262.929 54.9077 262.078 56.7827 cv
263.462 57.2935 264.744 57.7886 264.9 57.835 cv
264.996 57.8652 265.037 58.1807 265.044 58.6069 cv
265.21 59.0015 265.169 59.9536 264.97 60.4541 cv
264.945 60.7925 264.921 61.0615 264.908 61.1943 cv
264.916 61.1968 264.925 61.1982 264.933 61.2002 cv
265.027 61.9233 264.55 62.457 264.328 63.106 cv
264.291 63.2334 264.322 63.3867 264.373 63.6143 cv
264.414 63.6074 264.451 63.6118 264.476 63.6436 cv
264.826 64.0654 265.017 64.8872 265.552 65.2207 cv
265.867 66.0967 265.681 67.5405 264.935 68.1318 cv
264.867 68.1333 264.81 68.1372 264.753 68.1416 cv
264.792 68.2856 264.839 68.3921 264.9 68.4375 cv
264.9 68.4375 264.501 70.6509 263.433 71.3291 cv
263.433 71.3306 263.431 71.3315 263.429 71.3325 cv
263.111 71.7378 262.775 72.1162 262.392 72.4209 cv
262.208 72.4702 262.068 72.585 261.933 72.708 cv
261.73 72.938 261.542 73.166 261.367 73.3828 cv
261.369 73.3867 261.369 73.3906 261.369 73.394 cv
261.173 73.6157 260.996 73.8452 260.818 74.0742 cv
260.787 74.1118 260.751 74.1567 260.726 74.1909 cv
260.724 74.1929 260.72 74.1958 260.716 74.1978 cv
260.542 74.4238 260.369 74.6499 260.177 74.8672 cv
259.32 75.8403 258.335 76.5269 258.029 78.3311 cv
256.755 77.8857 255.863 77.4277 254.527 76.9585 cv
253.933 76.752 253.341 76.4478 252.759 76.2695 cv
252.099 76.0669 251.177 75.9053 250.572 75.8042 cv
249.162 75.5688 248.085 75.7231 246.884 75.5845 cv
247.269 74.2549 247.529 73.0117 247.757 71.6299 cv
248.13 69.3813 247.884 67.1963 248.234 65.1128 cv
248.292 64.7568 248.361 64.3184 248.505 63.98 cv
248.531 63.9185 248.564 63.8589 248.601 63.7998 cv
248.623 63.2983 248.732 62.8032 248.91 62.3608 cv
248.949 62.2681 248.966 62.1992 248.994 62.1221 cv
248.982 62.1362 248.966 62.1479 248.953 62.1621 cv
248.947 62.0288 248.871 61.9409 248.837 61.8242 cv
249.246 60.4756 249.066 58.4683 249.554 56.833 cv
249.806 55.9917 250.214 55.2944 250.539 54.564 cv
250.57 54.5645 250.605 54.5708 250.638 54.5728 cv
250.638 54.4609 250.63 54.3452 250.615 54.2324 cv
250.57 54.1948 250.535 54.1489 250.513 54.0884 cv
250.539 54.0913 250.566 54.0952 250.591 54.0986 cv
250.552 53.8794 250.501 53.709 250.501 53.709 cv
250.402 53.3032 250.726 52.959 250.839 52.5581 cv
250.929 52.2368 250.923 51.8052 250.992 51.3989 cv
251.111 50.6772 251.236 50.0093 251.349 49.3599 cv
251.386 49.0669 251.447 48.5215 251.533 47.9111 cv
251.515 47.8721 251.505 47.8281 251.509 47.7769 cv
251.525 47.7803 251.539 47.7803 251.552 47.7822 cv
251.574 47.6387 251.595 47.4941 251.621 47.3481 cv
251.607 47.3379 251.589 47.3315 251.576 47.3203 cv
251.677 46.9897 251.753 46.6343 251.822 46.2681 cv
251.835 46.2021 251.849 46.1318 251.861 46.0581 cv
252.076 44.8369 252.179 43.4941 252.47 42.3677 cv
252.474 42.3662 252.478 42.3652 252.48 42.3643 cv
252.615 41.5361 252.708 40.9243 252.708 40.9243 cv
252.708 40.9243 252.708 40.9229 252.708 40.9219 cv
252.792 40.1665 252.892 39.3374 253.052 38.6016 cv
253.121 38.291 253.171 37.8809 253.292 37.6182 cv
253.585 36.9883 254.974 36.6763 255.794 37.209 cv
255.828 37.272 256.146 37.4604 256.242 37.6172 cv
256.378 37.8423 256.478 38.2607 256.505 38.583 cv
256.648 40.1909 256.378 41.9258 256.16 43.7476 cv
256.066 44.5493 256.066 45.4395 256.027 46.2915 cv
255.921 48.6162 256.349 50.6934 256.316 52.9067 cv
256.31 53.1216 256.246 53.3687 256.273 53.5557 cv
256.359 54.2007 257.281 54.4292 257.839 54.7363 cv
258.498 55.0981 259.066 55.4878 259.583 55.9043 cv
259.82 55.9795 260.074 56.0659 260.347 56.1606 cv
260.271 56.0864 260.197 56.0122 260.123 55.9438 cv
259.695 55.543 259.177 55.2075 258.685 54.8853 cv
258.441 54.7251 258.125 54.6353 257.953 54.3525 cv
258.611 53.6685 259.099 52.7705 259.63 51.9175 cv
259.894 51.4956 260.185 51.0894 260.457 50.6831 cv
260.634 50.4185 260.783 50.1338 260.958 49.8755 cv
261 49.8115 li
261 49.8115 261.39 49.1069 261.58 48.7817 cv
261.583 48.7739 261.597 48.7529 261.607 48.7402 cv
262.097 47.897 262.656 47.0518 263.181 46.2754 cv
263.39 45.9692 263.671 45.7222 263.865 45.417 cv
264.898 43.8125 265.677 41.7104 266.841 40.2788 cv
267.25 39.7759 267.312 39.5967 267.896 39.5938 cv
269.429 39.5854 270.369 40.6084 270.005 41.7671 cv
269.691 42.7632 269.015 43.6704 268.529 44.4893 cv
cp
0 0 0 1 cmyk
ef
85.9492 529.294 mo
59.0254 516.825 li
46.8691 585.604 li
83.123 556.12 li
81.1523 553.696 li
51.4053 577.89 li
61.3955 521.364 li
84.6367 532.128 li
85.9492 529.294 li
cp
0 0 0 0 cmyk
f
88.334 524.431 mo
103.115 547.298 li
105.739 545.603 li
90.958 522.735 li
f
114.377 518.388 mo
82.6289 580.616 li
85.4121 582.036 li
117.159 519.808 li
f
124.188 514.272 mo
119.127 582.118 li
122.242 582.351 li
127.303 514.505 li
f
147.428 527.669 mo
113.117 551.526 li
144.55 579.843 li
146.641 577.521 li
118.135 551.843 li
149.211 530.233 li
147.428 527.669 li
cp
f
153.631 520.724 mo
146.699 573.931 li
173.155 565.755 li
172.232 562.769 li
150.426 569.509 li
156.729 521.128 li
153.631 520.724 li
cp
f
168.043 544.938 mo
137.295 544.583 li
137.259 547.708 li
168.006 548.063 li
f
147.654 523.673 mo
167.773 518.431 li
166.987 515.407 li
146.867 520.649 li
f
175.023 516.632 mo
173.825 579.743 li
201.171 578.61 li
201.041 575.489 li
177.012 576.485 li
178.148 516.692 li
175.023 516.632 li
cp
f
206.406 508.991 mo
198.018 570.849 li
201.113 571.269 li
209.502 509.411 li
f
197.291 512.29 mo
224.158 532.354 li
193.143 539.901 li
227.227 557.634 li
191.654 570.507 li
192.717 573.446 li
234.984 558.147 li
201.965 540.97 li
231.343 533.819 li
199.159 509.786 li
197.291 512.29 li
cp
f
233.033 581.587 mo
243.197 524.692 li
253.699 581.595 li
256.771 581.028 li
244.707 515.667 li
241.634 515.677 li
229.958 581.036 li
233.033 581.587 li
cp
f
227.604 549.483 mo
259.128 549.483 li
259.128 546.358 li
227.604 546.358 li
f
265.748 568.106 mo
264.181 528.081 li
282.576 577.241 li
285.593 576.829 li
290.654 518.929 li
287.541 518.657 li
283.082 569.683 li
263.705 517.89 li
260.681 518.499 li
262.628 568.229 li
265.748 568.106 li
cp
f
301.175 516.411 mo
305.458 580.351 li
308.576 580.142 li
304.292 516.202 li
f
285.484 522.198 mo
322.541 548.503 li
296.935 575.257 li
299.193 577.417 li
327.298 548.05 li
287.291 519.649 li
285.484 522.198 li
cp
f
328.146 527.063 mo
326.482 581.202 li
329.605 581.298 li
331.267 527.159 li
f
340.55 533.513 mo
375.386 532.29 li
375.277 529.167 li
340.439 530.392 li
f
350.544 522.134 mo
349.205 582.872 li
352.328 582.94 li
353.669 522.202 li
f
361.263 522.169 mo
361.263 582.091 li
364.388 582.091 li
364.388 522.169 li
f
386.064 531.552 mo
379.132 584.761 li
405.587 576.583 li
404.666 573.597 li
382.859 580.339 li
389.162 531.956 li
386.064 531.552 li
cp
f
400.488 555.767 mo
382.972 555.411 li
382.91 558.536 li
400.423 558.892 li
f
379.23 529.386 mo
398.31 537.224 li
399.496 534.335 li
380.416 526.495 li
f
415.583 585.499 mo
414.558 532.665 li
444.679 577.472 li
447.138 520.813 li
444.017 520.677 li
441.97 567.843 li
411.23 522.114 li
412.46 585.562 li
415.583 585.499 li
cp
f
323.98 516.231 mo
322.419 516.231 li
322.419 519.97 325.449 522.997 329.187 522.999 cv
332.925 522.997 335.955 519.97 335.955 516.231 cv
335.955 512.491 332.925 509.464 329.187 509.462 cv
325.449 509.464 322.419 512.491 322.419 516.231 cv
323.98 516.231 li
325.542 516.231 li
325.542 515.22 325.949 514.319 326.609 513.653 cv
327.275 512.993 328.175 512.587 329.187 512.587 cv
330.199 512.587 331.099 512.993 331.765 513.653 cv
332.425 514.317 332.83 515.22 332.832 516.231 cv
332.83 517.241 332.425 518.144 331.765 518.808 cv
331.099 519.47 330.199 519.874 329.187 519.874 cv
328.175 519.874 327.275 519.47 326.609 518.808 cv
325.949 518.144 325.542 517.241 325.542 516.231 cv
323.98 516.231 li
cp
f
387.929 432.884 mo
378.714 440.378 360.875 434.522 348.08 419.798 cv
335.287 405.077 332.386 387.065 341.599 379.569 cv
350.812 372.073 368.654 377.931 381.447 392.653 cv
394.24 407.376 397.142 425.386 387.929 432.884 cv
cp
383.949 388.249 mo
367.298 369.089 343.525 361.907 330.857 372.216 cv
318.189 382.524 321.416 406.415 338.068 425.573 cv
354.718 444.735 378.488 451.915 391.158 441.608 cv
403.828 431.298 400.601 407.409 383.949 388.249 cv
cp
.058594 0 .882813 0 cmyk
f
392.939 437.456 mo
382.82 445.964 363.226 439.313 349.177 422.606 cv
335.128 405.896 331.941 385.454 342.058 376.944 cv
352.177 368.437 371.771 375.087 385.82 391.796 cv
399.871 408.507 403.056 428.946 392.939 437.456 cv
cp
388.568 386.796 mo
370.281 365.05 344.175 356.899 330.263 368.599 cv
316.349 380.298 319.894 407.413 338.181 429.161 cv
356.468 450.907 382.572 459.056 396.484 447.358 cv
410.398 435.657 406.853 408.546 388.568 386.796 cv
cp
.855469 .847656 .785156 1 cmyk
f
212.84 405.907 mo
212.84 416.669 221.565 425.394 232.328 425.394 cv
243.091 425.394 251.814 416.669 251.814 405.907 cv
251.814 395.144 243.091 386.419 232.328 386.419 cv
221.565 386.419 212.84 395.144 212.84 405.907 cv
cp
0 0 0 0 cmyk
f
136.489 72.0903 mo
136.489 83.3755 146.921 92.5259 159.788 92.5259 cv
172.655 92.5259 183.087 83.3755 183.087 72.0903 cv
183.087 60.8042 172.655 51.6548 159.788 51.6548 cv
146.921 51.6548 136.489 60.8042 136.489 72.0903 cv
cp
0 0 0 1 cmyk
f
120.61 85.8872 mo
120.61 97.1724 131.042 106.323 143.909 106.323 cv
156.776 106.323 167.208 97.1724 167.208 85.8872 cv
167.208 74.6011 156.776 65.4517 143.909 65.4517 cv
131.042 65.4517 120.61 74.6011 120.61 85.8872 cv
cp
.742188 .988281 .019531 .00390601 cmyk
f
112.812 411.927 mo
112.812 425.819 124.075 437.083 137.969 437.083 cv
151.863 437.083 163.127 425.819 163.127 411.927 cv
163.127 398.032 151.863 386.769 137.969 386.769 cv
124.075 386.769 112.812 398.032 112.812 411.927 cv
cp
0 0 0 0 cmyk
f
135.658 463.55 mo
105.66 463.55 81.3428 440.993 81.3428 413.169 cv
81.3428 385.343 105.66 362.788 135.658 362.788 cv
165.657 362.788 189.974 385.343 189.974 413.169 cv
189.974 440.993 165.657 463.55 135.658 463.55 cv
cp
134.485 352.87 mo
97.1729 352.87 66.9258 380.368 66.9258 414.286 cv
66.9258 448.206 97.1729 475.706 134.485 475.706 cv
171.798 475.706 202.044 448.206 202.044 414.286 cv
202.044 380.368 171.798 352.87 134.485 352.87 cv
cp
.058594 0 .882813 0 cmyk
f
122.524 431.946 mo
118.035 461.71 li
118.808 461.827 li
123.296 432.062 li
.855469 .847656 .785156 1 cmyk
f
127.718 434.36 mo
127.243 464.597 li
128.024 464.608 li
128.498 434.372 li
f
127.352 434.36 mo
108.218 456.565 li
108.81 457.075 li
127.944 434.87 li
f
122.785 432.366 mo
99.1162 450.681 li
99.6211 451.284 li
123.291 432.97 li
f
114.411 422.61 mo
90.3174 439.146 li
90.7588 439.79 li
114.854 423.253 li
f
139.528 436.933 mo
137.166 465.517 li
137.944 465.581 li
140.308 436.997 li
f
146.687 464.599 mo
146.459 437.546 li
164.001 457.718 li
164.591 457.206 li
145.659 435.438 li
145.905 464.606 li
146.687 464.599 li
cp
f
100.73 374.481 mo
118.34 393.017 li
93.7998 380.19 li
93.4385 380.882 li
120.06 394.796 li
120.524 394.181 li
101.296 373.944 li
100.73 374.481 li
cp
f
109.68 368.921 mo
119.854 394.593 li
120.604 394.3 li
110.43 368.628 li
f
84.5254 395.042 mo
113.312 407.089 li
113.708 406.427 li
89.292 386.583 li
88.7998 387.188 li
111.111 405.323 li
84.8262 394.321 li
84.5254 395.042 li
cp
f
81.3721 413.104 mo
113.532 407.204 li
113.497 406.431 li
81.3369 403.481 li
81.2646 404.259 li
110.595 406.948 li
81.2305 412.337 li
81.3721 413.104 li
cp
f
115.073 422.687 mo
83.0479 427.329 li
83.1602 428.103 li
115.186 423.46 li
f
81.6631 421.312 mo
114.065 423.659 li
94.4795 445.919 li
95.0654 446.435 li
115.691 422.995 li
81.7197 420.532 li
81.6631 421.312 li
cp
f
137.233 436.95 mo
155.423 463.407 li
156.067 462.964 li
137.878 436.507 li
f
135.665 470.39 mo
103.964 470.39 78.2646 445.405 78.2646 414.583 cv
78.2646 383.761 103.964 358.776 135.665 358.776 cv
167.37 358.776 193.068 383.761 193.068 414.583 cv
193.068 445.405 167.37 470.39 135.665 470.39 cv
cp
134.426 347.792 mo
94.9951 347.792 63.0283 378.249 63.0283 415.823 cv
63.0283 453.396 94.9951 483.854 134.426 483.854 cv
173.857 483.854 205.823 453.396 205.823 415.823 cv
205.823 378.249 173.857 347.792 134.426 347.792 cv
cp
f
123.974 128.815 mo
123.974 128.815 55.2324 220.586 106.61 270.903 cv
106.61 270.903 138.501 267.713 173.226 234.406 cv
173.226 234.406 163.304 194.366 179.249 167.792 cv
179.249 167.792 166.139 108.264 123.974 128.815 cv
cp
.058594 0 .882813 0 cmyk
f
214.022 147.811 mo
249.3 126.722 261.166 85.7593 261.166 85.7593 cv
246.181 81.0591 li
230.824 108.588 205.224 121.362 185.259 127.287 cv
188.098 121.665 189.76 114.872 189.76 107.553 cv
189.76 88.1802 178.126 72.4751 163.776 72.4751 cv
149.425 72.4751 137.791 88.1802 137.791 107.553 cv
137.791 114.573 139.324 121.104 141.954 126.588 cv
108.854 123.155 121.857 168.995 145.587 171.334 cv
145.587 171.334 229.918 198.264 287.32 192.594 cv
293.697 175.233 li
293.697 175.233 254.048 161.073 214.022 147.811 cv
cp
0 0 0 1 cmyk
f
145.41 110.212 mo
144.854 110.209 146.77 108.942 147.357 108.659 cv
148.173 108.266 148.902 107.995 149.8 108.125 cv
151.087 108.315 153.093 109.77 153.36 111.067 cv
152.05 110.825 150.485 110.94 149.071 110.783 cv
147.861 110.649 146.272 110.077 145.233 110.567 cv
.855469 .847656 .785156 1 cmyk
f
171.454 110.745 mo
170.897 110.741 172.813 109.473 173.4 109.19 cv
174.217 108.797 174.946 108.526 175.843 108.657 cv
177.13 108.846 179.137 110.301 179.404 111.598 cv
178.093 111.356 176.529 111.471 175.115 111.315 cv
173.905 111.18 172.316 110.608 171.276 111.098 cv
f
329.484 344.956 mo
332.32 350.272 li
327.003 352.753 li
322.398 346.376 li
329.484 344.956 li
cp
f
118.481 408.56 mo
118.112 410.687 117.509 414.12 119.327 415.624 cv
119.875 414.495 119.274 412.554 119.407 411.216 cv
119.46 410.681 120.087 409.517 119.593 409.044 cv
119.029 408.505 118.446 408.792 118.127 409.446 cv
f
125.922 396.513 mo
123.927 397.274 122.336 399.269 122.052 401.269 cv
123.199 401.233 124.287 399.655 125.169 398.948 cv
125.552 398.642 126.508 398.247 126.639 397.761 cv
126.883 396.858 126.312 396.151 125.568 396.513 cv
f
136.389 392.56 mo
134.258 392.413 131.978 393.558 130.881 395.255 cv
131.937 395.704 133.586 394.729 134.685 394.456 cv
135.159 394.339 136.193 394.382 136.517 393.995 cv
137.116 393.278 136.894 392.396 136.067 392.413 cv
f
122.379 423.087 mo
120.018 424.335 126.833 430.034 127.179 428.233 cv
127.272 427.749 124.658 425.907 124.278 425.44 cv
123.784 424.833 122.6 421.739 121.847 423.442 cv
f
133.248 430.38 mo
132.309 432.882 141.188 432.63 140.255 431.054 cv
140.004 430.628 136.825 430.981 136.231 430.884 cv
135.458 430.757 132.521 429.226 133.087 430.999 cv
f
144.81 429.737 mo
145.409 432.343 152.67 427.224 151.021 426.425 cv
150.575 426.208 148.122 428.261 147.573 428.507 cv
146.859 428.829 143.565 429.177 145.017 430.343 cv
f
153.972 423.29 mo
156.169 424.812 158.091 416.138 156.333 416.659 cv
155.858 416.798 155.427 419.968 155.187 420.519 cv
154.876 421.237 152.675 423.714 154.532 423.597 cv
f
150.181 396.017 mo
152.2 394.267 144.275 390.249 144.345 392.081 cv
144.361 392.575 147.324 393.782 147.799 394.151 cv
148.418 394.63 150.269 397.378 150.618 395.55 cv
f
128.226 412.015 mo
128.226 417.837 132.944 422.556 138.767 422.556 cv
144.588 422.556 149.308 417.837 149.308 412.015 cv
149.308 406.192 144.588 401.474 138.767 401.474 cv
132.944 401.474 128.226 406.192 128.226 412.015 cv
cp
f
149.779 191.521 mo
150.17 189.795 150.271 187.422 150.389 185.779 cv
150.389 185.69 li
152.054 185.008 154.556 186.967 154.552 188.702 cv
154.548 191.238 151.947 191.979 149.779 191.521 cv
cp
150.478 178.161 mo
150.565 177.895 li
151.971 178.127 154.179 179.421 154.287 181.084 cv
154.441 183.495 151.853 183.202 150.313 183.285 cv
150.175 182.325 150.803 178.43 150.478 178.161 cv
cp
153.147 184.922 mo
159.479 184.971 155.063 174.636 149.062 176.655 cv
149.532 176.182 li
148.644 176.197 146.924 175.25 146.274 175.994 cv
145.199 177.223 147.179 178.163 148.08 178.106 cv
148.3 182.465 147.918 186.876 147.845 191.028 cv
147.416 190.823 146.741 190.931 146.286 190.627 cv
145.966 191.25 145.966 191.983 146.261 192.682 cv
148.767 193.432 153.635 194.136 155.374 191.957 cv
157.113 189.775 156.712 184.688 153.147 184.922 cv
cp
f
212.84 158.702 mo
207.799 156.537 199.933 156.073 195.59 160.106 cv
190.499 164.834 191.185 169.922 197.204 173.655 cv
202.496 176.936 209.424 178.967 215.614 178.071 cv
219.274 177.543 224.887 175.37 225.372 171.233 cv
226.137 164.725 217.524 159.424 212.367 158.465 cv
.058594 0 .882813 0 cmyk
f
135.916 362.366 mo
138.573 386.993 li
139.331 387.077 li
147.481 363.515 li
146.743 363.259 li
139.163 385.175 li
136.692 362.282 li
135.916 362.366 li
cp
.855469 .847656 .785156 1 cmyk
f
143.704 387.435 mo
156.13 366.052 li
155.472 365.671 li
143.047 387.052 li
f
162.307 416.36 mo
189.777 407.009 li
189.777 407.009 189.406 403.479 189.034 402.421 cv
162.679 411.243 li
162.679 411.243 162.679 414.419 162.307 416.36 cv
cp
.058594 0 .882813 0 cmyk
f
164.833 370.651 mo
153.85 392.267 li
154.444 392.745 li
173.578 377.153 li
173.086 376.548 li
155.383 390.974 li
165.53 371.005 li
164.835 370.651 li
164.833 370.651 li
cp
.855469 .847656 .785156 1 cmyk
f
171.094 451.921 mo
156.598 432.144 li
176.978 445.911 li
177.442 445.272 li
155.152 430.214 li
154.588 430.759 li
170.43 452.372 li
171.094 451.921 li
171.094 451.921 li
cp
f
175.063 447.839 mo
160.065 427.677 li
182.553 438.501 li
182.892 437.798 li
158.974 426.284 li
158.491 426.868 li
174.436 448.306 li
175.063 447.839 li
cp
f
188.688 425.556 mo
164.155 417.599 li
190.386 414.444 li
190.293 413.669 li
162.301 417.036 li
162.228 417.794 li
188.448 426.298 li
188.688 425.556 li
cp
f
162.746 416.728 mo
189.409 407.337 li
189.141 406.603 li
162.477 415.993 li
f
354.099 410.985 mo
354.099 414.767 li
354.099 414.767 357.88 415.71 359.533 414.647 cv
361.185 413.583 362.13 410.868 362.13 410.868 cv
369.216 406.497 li
369.216 406.497 371.226 407.915 372.525 407.325 cv
373.824 406.735 376.541 399.649 376.541 399.649 cv
371.697 398.938 li
371.697 398.938 367.564 399.886 367.328 402.128 cv
367.091 404.372 359.414 408.39 359.414 408.39 cv
359.414 408.39 356.699 407.325 355.634 407.798 cv
354.572 408.271 354.099 410.985 354.099 410.985 cv
cp
f
386.332 433.343 mo
358.751 413.968 li
357.361 414.563 li
366.263 434.53 li
366.976 434.214 li
358.396 414.97 li
358.66 414.856 li
385.882 433.981 li
386.332 433.343 li
cp
f
371.632 406.669 mo
392.091 430.706 li
392.765 430.167 li
372.306 406.132 li
f
373.828 404.138 mo
394.289 419.263 li
394.792 418.595 li
374.33 403.47 li
f
368.958 402.036 mo
338.367 382.075 li
337.941 382.731 li
368.531 402.69 li
f
347.937 376.134 mo
357.148 408.142 li
357.914 408.056 li
359.685 376.993 li
358.906 376.948 li
357.265 405.722 li
348.687 375.919 li
347.937 376.134 li
cp
f
372.677 399.251 mo
370.787 381.534 li
370.011 381.618 li
371.9 399.335 li
f
360.001 413.13 mo
360.111 412.798 li
359.9 413.077 li
359.914 413.085 359.923 413.101 360.001 413.13 cv
360.111 412.798 li
359.9 413.077 li
359.9 413.079 li
359.949 413.13 360.083 413.282 360.267 413.503 cv
361.662 415.173 366.132 420.87 370.246 426.142 cv
372.302 428.776 374.271 431.308 375.726 433.181 cv
376.453 434.116 377.052 434.888 377.47 435.425 cv
377.886 435.962 378.121 436.265 378.121 436.265 cv
378.74 435.786 li
378.738 435.786 374.25 429.999 369.716 424.196 cv
367.451 421.294 365.173 418.39 363.439 416.2 cv
362.572 415.106 361.841 414.192 361.314 413.546 cv
361.05 413.222 360.839 412.966 360.683 412.784 cv
360.607 412.694 360.542 412.624 360.492 412.569 cv
360.417 412.493 li
360.371 412.454 li
360.347 412.438 360.33 412.419 360.246 412.388 cv
360.001 413.13 li
cp
f
361.38 410.899 mo
394.771 425.058 li
395.123 424.313 li
361.732 410.157 li
f
355.396 412.247 mo
341.152 410.599 li
341.062 411.374 li
355.306 413.022 li
f
355.128 413.54 mo
347.333 420.979 li
347.873 421.544 li
355.669 414.104 li
f
360.154 413.62 mo
393.841 411.493 li
393.785 410.714 li
360.097 412.841 li
f
372.4 406.31 mo
385.544 437.106 li
386.332 436.79 li
373.187 405.993 li
f
370.601 405.835 mo
374.144 436.071 li
374.919 435.979 li
371.376 405.745 li
f
318.984 383.265 mo
318.986 383.278 318.988 383.286 318.988 383.286 cv
318.986 383.28 318.986 383.271 318.984 383.265 cv
cp
0 0 0 0 cmyk
f
371.296 397.753 mo
359.248 385.351 343.304 358.423 340.115 352.399 cv
336.925 346.376 335.507 346.729 334.445 347.083 cv
333.382 347.437 319.917 358.423 319.917 358.423 cv
320.98 362.673 324.523 363.028 324.523 363.028 cv
325.941 361.61 333.736 355.587 335.507 354.878 cv
336.187 354.606 337.39 356.269 339.033 359.075 cv
336.156 358.601 332.619 358.552 329.617 360.138 cv
323.363 363.442 317.345 374.528 318.984 383.265 cv
318.929 382.812 318.281 375.692 332.689 374.548 cv
332.689 374.548 333.886 364.829 340.478 361.618 cv
342.982 366.12 346.228 372.282 350.035 378.263 cv
357.476 389.956 370.941 403.067 370.941 403.067 cv
373.775 402.714 371.296 397.753 371.296 397.753 cv
cp
f
318.785 279.411 mo
319.441 268.891 317.05 210.512 316.701 202.119 cv
316.894 201.999 317.08 201.864 317.248 201.694 cv
316.775 201.221 li
318.968 199.536 316.708 193.715 314.703 191.708 cv
312.269 189.274 308.037 188.702 304.728 188.702 cv
302.736 188.702 300.853 188.582 299.769 190.369 cv
298.726 192.084 299.388 193.686 300.949 194.608 cv
303.904 196.35 307.761 196.133 310.857 197.679 cv
313.195 198.846 313.673 200.183 313.503 202.581 cv
313.621 202.676 313.73 202.766 313.843 202.86 cv
314.056 210.198 315.869 274.36 314.533 278.702 cv
313.115 283.307 309.216 291.104 299.65 292.875 cv
297.169 288.624 294.689 294.647 294.689 294.647 cv
295.669 296.254 li
295.222 297.242 292.906 301.941 289.728 300.67 cv
286.185 299.253 280.515 290.041 278.037 286.851 cv
275.556 283.663 259.255 261.34 259.255 261.34 cv
259.255 261.34 253.232 254.608 231.266 262.047 cv
231.266 262.047 229.493 266.3 233.391 265.237 cv
237.289 264.174 250.398 259.213 255.003 266.3 cv
259.611 273.387 281.224 299.607 281.224 299.607 cv
281.224 299.607 286.894 306.694 291.855 305.277 cv
295.175 304.329 298.013 303.223 299.531 302.594 cv
308.933 318.029 li
313.894 314.485 li
313.894 314.485 307.791 305.479 303.449 298.851 cv
303.597 298.875 303.744 298.9 303.902 298.9 cv
303.902 298.9 318.076 290.75 318.785 279.411 cv
cp
f
293.863 281.064 mo
291.515 281.815 289.832 282.707 289.611 285.553 cv
289.455 287.597 290.021 290.713 291.212 292.461 cv
293 295.083 293.945 293.683 296.462 293.165 cv
297.894 292.867 301.683 295.295 300.689 293.206 cv
301.037 293.621 301.494 293.715 301.833 294.02 cv
301.832 293.75 302.099 293.338 302.066 292.905 cv
301.978 292.823 301.972 292.828 302.05 292.917 cv
302.423 293.127 303.003 293.166 303.277 293.311 cv
303.306 293.04 303.267 292.761 303.294 292.49 cv
303.621 292.563 303.824 292.649 304.216 292.597 cv
304.845 291.16 303.402 290.242 302.662 289.037 cv
301.722 287.508 301.947 286.299 301.365 284.666 cv
300.31 281.713 296.294 280.168 293.39 281.064 cv
.058594 0 .882813 0 cmyk
f
297.169 285.788 mo
294.548 285.028 295.224 287.725 295.316 289.527 cv
298.251 291.11 298.207 287.167 297.406 285.788 cv
.855469 .847656 .785156 1 cmyk
f
300.005 284.134 mo
299.673 284.292 299.349 284.617 299.095 284.903 cv
299.556 286.032 300.177 287.435 301.623 287.169 cv
302.058 285.713 300.886 284.775 300.005 283.898 cv
f
300.005 289.095 mo
299.982 289.503 300.22 290.293 300.517 290.944 cv
300.583 290.93 301.072 290.937 301.152 290.948 cv
301.267 290.237 301.089 289.489 300.666 288.89 cv
300.292 288.733 300.316 289.015 300.005 289.095 cv
f
301.304 288.328 mo
301.238 288.376 301.257 288.451 301.138 288.456 cv
301.021 289.083 301.519 289.798 302.072 289.989 cv
302.535 289.593 301.787 288.558 301.363 288.387 cv
f
320.626 326.533 mo
313.894 314.485 li
308.933 318.029 li
308.933 318.029 312.123 319.09 313.185 321.216 cv
314.248 323.343 314.248 323.343 314.248 323.343 cv
109.384 325.462 li
108.859 324.805 108.058 324.255 107.332 323.666 cv
105.858 324.641 103.974 326.253 102.229 326.542 cv
102.614 327.706 103.405 328.789 103.948 329.938 cv
103.948 330.199 li
105.59 330.386 107.939 329.943 109.113 328.852 cv
109.211 329.025 109.311 329.199 109.445 329.367 cv
312.832 330.429 li
312.851 330.48 li
156.926 335.036 li
156.926 335.036 157.013 335.06 157.154 335.104 cv
156.534 335.137 155.971 335.25 155.519 335.457 cv
156.525 336.13 160.079 337.839 162.312 338.146 cv
162.435 338.286 162.551 338.429 162.659 338.579 cv
314.261 334.004 li
316.375 339.288 li
238.068 371.886 li
238.068 371.886 229.563 369.052 215.745 373.659 cv
201.927 378.263 143.815 398.462 143.815 398.462 cv
139.563 404.485 li
139.563 404.485 132.831 404.13 133.186 408.737 cv
133.54 413.343 138.854 412.989 138.854 412.989 cv
148.776 414.761 li
205.47 392.437 li
322.398 348.854 li
322.398 348.854 328.421 347.083 329.484 344.956 cv
320.626 326.533 li
cp
.742188 .988281 .019531 .00390601 cmyk
f
326.783 360.917 mo
326.724 360.841 327.142 361.938 327.33 362.218 cv
326.23 363.571 324.916 365.274 323.716 366.351 cv
322.382 363.911 318.265 361.583 319.798 358.356 cv
321.513 357.741 324.505 358.978 326.001 360.136 cv
.855469 .847656 .785156 1 cmyk
f
340.824 382.87 mo
340.554 382.87 340.314 382.917 340.097 382.999 cv
339.867 382.372 339.548 381.853 339.082 381.522 cv
337.845 382.804 336.179 387.358 336.212 389.089 cv
336.251 391.075 338.369 393.212 339.617 395.079 cv
339.705 395.427 339.761 395.626 339.761 395.626 cv
342.24 400.587 355.351 412.636 355.351 412.636 cv
356.414 408.382 li
346.492 399.88 340.824 382.87 340.824 382.87 cv
cp
.746094 .226563 0 0 cmyk
f
186.146 89.2056 mo
187.366 90.7642 186.904 95.063 186.345 96.9429 cv
184.948 95.3872 183.698 94.0034 182.632 92.2134 cv
181.505 94.6548 180.093 96.8228 178.58 98.9487 cv
177.651 96.9351 176.632 95.2144 175.407 93.3833 cv
173.034 96.02 171.22 99.8911 167.827 101.491 cv
167.192 99.2612 165.773 94.7817 163.937 93.3267 cv
162.817 96.0337 161.003 99.1987 158.616 100.944 cv
157.044 99.021 155.664 95.7212 154.474 93.521 cv
152.083 95.7134 150.233 98.7231 147.878 100.948 cv
146.428 99.4185 146.208 96.7788 144.792 95.2788 cv
144.418 97.0796 142.7 98.688 141.474 99.9243 cv
141.175 98.0903 140.005 96.4351 139.884 94.6626 cv
139.806 93.5024 140.384 91.8833 140.85 90.5728 cv
141.834 87.8032 142.896 85.23 144.12 82.5103 cv
146.616 76.9653 150.97 70.8774 155.853 67.0083 cv
155.812 68.2974 155.265 69.5542 155.093 70.7847 cv
156.698 68.4185 159.712 67.1353 161.9 65.4556 cv
162.021 66.7065 161.513 67.8306 161.575 69.0757 cv
163.407 68.2954 165.138 66.8188 166.787 65.7935 cv
166.813 66.9224 165.817 68.6118 167.208 69.1099 cv
168.395 69.5347 172.2 66.9751 173.616 66.5835 cv
173.753 68.0249 172.921 69.9595 172.7 71.4136 cv
174.258 71.0728 176.181 70.5317 177.677 69.8521 cv
177.101 70.8931 176.585 71.9614 176.609 73.187 cv
178.051 72.7153 179.59 72.1099 181.05 71.8647 cv
180.175 73.1274 179.706 75.1333 179.928 76.6802 cv
181.235 76.5142 182.732 76.0591 183.958 75.5591 cv
183.733 76.9692 183.104 78.3188 183.052 79.8091 cv
184.311 79.4946 185.716 78.8608 187.048 78.8442 cv
186.629 80.0181 185.72 80.9897 185.242 82.1489 cv
185.533 82.0903 185.946 82.2173 186.268 82.1636 cv
184.731 85.1411 187.757 87.9731 188.444 90.6157 cv
188.763 91.8345 189.389 98.2983 186.536 96.6255 cv
.058594 0 .882813 0 cmyk
f
146.609 110.877 mo
146.609 113.412 148.663 115.465 151.197 115.465 cv
153.731 115.465 155.786 113.412 155.786 110.877 cv
155.786 108.344 153.731 106.29 151.197 106.29 cv
148.663 106.29 146.609 108.344 146.609 110.877 cv
cp
0 0 0 0 cmyk
f
171.015 111.268 mo
171.015 113.802 173.069 115.856 175.603 115.856 cv
178.136 115.856 180.19 113.802 180.19 111.268 cv
180.19 108.735 178.136 106.68 175.603 106.68 cv
173.069 106.68 171.015 108.735 171.015 111.268 cv
cp
f
137.911 109.562 mo
140.425 111.321 144.147 111.008 147.412 111.043 cv
156.945 111.143 166.31 111.631 175.796 112.055 cv
181.094 112.293 186.011 109.931 191.102 111.623 cv
191.472 116.536 188.331 119.825 186.894 124.388 cv
184.783 131.081 185.325 138.286 182.525 144.991 cv
180.708 149.344 178.641 152.786 176.122 155.84 cv
174.049 158.352 172.15 162.606 169.46 164.305 cv
163.834 153.251 153.244 145.944 146.825 135.09 cv
142.162 127.205 138.234 118.155 136.847 109.562 cv
.742188 .988281 .019531 .00390601 cmyk
f
167.325 297.123 mo
167.325 297.123 174.058 304.917 172.641 311.295 cv
172.641 311.295 102.129 292.87 82.2861 298.893 cv
58.5459 253.893 li
58.5459 253.893 59.6084 231.926 76.2627 241.493 cv
76.2627 241.493 96.1045 268.422 106.38 272.673 cv
116.655 276.926 162.368 286.881 168.567 296.609 cv
.855469 .847656 .785156 1 cmyk
f
227.251 405.907 mo
227.251 408.71 229.524 410.983 232.327 410.983 cv
235.131 410.983 237.404 408.71 237.404 405.907 cv
237.404 403.103 235.131 400.831 232.327 400.831 cv
229.524 400.831 227.251 403.103 227.251 405.907 cv
cp
f
256.839 415.829 mo
257.677 412.354 258.466 407.983 257.958 405.317 cv
255.359 406.261 li
255.359 406.261 255.25 411.915 253.482 416.806 cv
252.082 417.235 250.978 417.603 250.38 417.796 cv
249.599 418.577 li
249.46 419.968 249.757 421.093 250.355 421.999 cv
250.142 422.198 249.923 422.39 249.691 422.56 cv
244.257 426.577 241.423 428.229 216.62 426.577 cv
196.041 425.204 169.303 423.183 160.785 422.534 cv
160.485 423.181 159.969 424.233 159.366 425.185 cv
165.23 425.585 238.616 430.603 239.297 430.829 cv
239.905 431.03 247.843 429.483 253.06 424.097 cv
258.894 426.479 270.171 423.444 272.16 418.491 cv
274.81 411.878 264.32 413.786 256.839 415.829 cv
cp
f
252.722 417.796 mo
245.902 414.626 239.39 411.425 232.467 408.337 cv
232.645 407.782 233.19 407.021 233.676 406.63 cv
240.679 410.704 248.447 413.181 255.796 416.712 cv
255.064 418.03 254.347 417.726 253.113 417.407 cv
f
302.486 390.12 mo
297.009 388.161 290.552 388.349 284.769 388.071 cv
280.837 387.884 277.404 387.175 273.429 387.364 cv
271.732 387.444 270.158 387.843 268.595 388.366 cv
267.916 387.265 265.541 383.134 265.201 378.765 cv
265.218 376.927 li
264.736 377.081 li
263.072 374.147 257.57 375.919 257.57 375.919 cv
257.57 375.919 251.033 380.962 250.99 381.522 cv
240.228 384.997 li
239.967 397.231 li
240.503 397.112 li
240.564 400.925 240.993 404.509 241.531 408.294 cv
241.865 410.632 241.118 415.905 243.207 417.587 cv
245.625 419.536 251.185 417.042 253.941 416.694 cv
256.957 416.313 259.849 415.661 262.748 414.948 cv
262.82 413.55 262.732 412.05 262.98 410.716 cv
267.017 413.661 277.103 410.692 281.572 410.032 cv
289.451 408.866 299.376 406.919 306.029 402.323 cv
310.669 399.118 307.318 391.847 302.486 390.12 cv
cp
.058594 0 .882813 0 cmyk
f
269.773 386.819 mo
269.298 387.995 267.673 392.915 270.007 393.181 cv
270.472 391.929 270.527 390.544 270.787 389.263 cv
271.046 387.978 271.355 385.952 269.382 387.21 cv
.742188 .988281 .019531 .00390601 cmyk
f
272.636 386.819 mo
272.164 387.995 270.537 392.915 272.871 393.181 cv
273.335 391.929 273.39 390.544 273.65 389.263 cv
273.91 387.978 274.218 385.952 272.246 387.21 cv
f
275.761 386.819 mo
275.287 387.995 273.662 392.915 275.996 393.181 cv
276.46 391.929 276.515 390.544 276.773 389.263 cv
277.035 387.978 277.343 385.952 275.371 387.21 cv
f
278.755 386.819 mo
278.281 387.995 276.656 392.915 278.99 393.181 cv
279.455 391.929 279.509 390.544 279.767 389.263 cv
280.029 387.978 280.337 385.952 278.365 387.21 cv
f
282.138 387.21 mo
281.666 388.386 280.039 393.306 282.373 393.571 cv
282.837 392.319 282.892 390.935 283.152 389.653 cv
283.414 388.368 283.72 386.341 281.748 387.601 cv
f
161.761 51.9087 mo
161.761 51.9087 161.783 51.9731 161.823 52.104 cv
162.105 53.0122 163.247 56.9692 163.245 61.1177 cv
163.247 63.4888 162.871 65.9146 161.79 67.8657 cv
162.474 68.2446 li
163.647 66.1167 164.025 63.5679 164.026 61.1177 cv
164.024 56.2183 162.508 51.6831 162.502 51.6616 cv
161.761 51.9087 li
cp
.058594 0 .882813 0 cmyk
f
166.962 53.2603 mo
167.063 53.3325 li
167.573 53.6997 169.919 55.4517 172.122 58.0337 cv
174.329 60.6157 176.371 64.019 176.366 67.6597 cv
176.366 69.0054 176.092 70.3872 175.444 71.7964 cv
176.153 72.1235 li
176.849 70.6138 177.147 69.1118 177.147 67.6597 cv
177.141 63.4565 174.682 59.7114 172.261 57.0063 cv
169.836 54.3013 167.423 52.6294 167.407 52.6187 cv
166.962 53.2603 li
cp
f
290.679 191.772 mo
295.326 198.289 301.972 203.161 310.273 201.446 cv
313.763 200.723 316.658 196.137 311.414 196.68 cv
308.001 197.034 303.781 197.5 301.013 194.902 cv
295.525 189.743 312.455 183.95 315.187 191.352 cv
316.109 193.852 314.023 193.488 313.535 195.257 cv
313.187 196.51 314.132 196.572 314.3 197.258 cv
314.466 197.94 314.216 199.002 314.537 199.817 cv
315.271 201.674 317.134 201.172 318.796 200.755 cv
321.13 200.168 321.468 199.967 321.625 197.442 cv
321.718 195.92 322.378 192.815 320.722 192.44 cv
321.49 188.442 318.751 187.487 315.949 185.217 cv
312.966 182.799 309.958 182.7 306.269 182.331 cv
303.466 182.049 297.57 180.891 294.978 182.375 cv
292.462 183.817 290.855 189.359 290.916 192.008 cv
290.916 192.087 290.916 192.167 290.916 192.245 cv
0 0 0 1 cmyk
f
303.365 192.702 mo
303.355 192.996 303.343 193.292 303.33 193.588 cv
303.316 193.549 303.298 193.524 303.283 193.488 cv
303.31 193.226 303.337 192.963 303.365 192.702 cv
cp
304.292 192.039 mo
303.888 191.961 303.539 191.766 303.146 191.767 cv
303.382 192.24 li
303.382 192.247 303.38 192.254 303.38 192.26 cv
303.009 192.117 302.699 191.879 302.322 191.821 cv
302.48 192.325 li
302.453 192.459 302.423 192.598 302.396 192.735 cv
302.078 193.372 li
302.16 193.292 302.23 193.249 302.304 193.195 cv
301.136 199.014 299.492 205.319 299.406 211.209 cv
299.355 214.659 299.064 219.26 298.099 222.449 cv
298.441 222.584 298.83 222.629 299.195 222.627 cv
300.433 216.876 301.275 211.122 301.97 205.387 cv
302.037 207.636 302.062 209.862 301.847 211.979 cv
301.269 217.719 301.488 223.657 301.353 229.424 cv
301.558 229.364 301.792 229.292 302.044 229.241 cv
303.625 223.583 303.378 216.75 303.285 210.571 cv
303.318 210.838 303.337 211.11 303.376 211.374 cv
303.88 214.786 304.332 219.374 303.89 222.676 cv
304.25 222.755 304.642 222.737 305 222.676 cv
305.529 212.305 304.859 202.115 304.292 192.039 cv
cp
.058594 0 .882813 0 cmyk
f
243.031 83.4458 mo
246.291 84.356 249.763 84.6753 253.037 86.1206 cv
255.49 87.2036 258.078 89.4507 260.763 89.7407 cv
260.669 84.856 263.197 79.4888 258.539 76.731 cv
255.345 74.8403 249.869 72.0366 246.408 72.9272 cv
245.583 76.2944 243.849 79.6196 243.664 83.103 cv
f
313.234 312.481 mo
311.83 313.298 309.121 314.829 308.261 316.261 cv
306.898 318.531 308.8 319.531 310.871 318.912 cv
312.121 318.538 314.615 317.336 315.123 316.037 cv
315.818 314.252 314.125 311.726 312.052 312.717 cv
.855469 .847656 .785156 1 cmyk
f
286.611 172.398 mo
285.761 176.094 285.505 180.022 284.119 183.745 cv
283.082 186.537 280.882 189.502 280.64 192.541 cv
285.525 192.333 290.935 195.073 293.609 189.76 cv
295.441 186.118 298.142 179.879 297.189 175.994 cv
293.806 175.13 290.451 173.244 286.964 173.106 cv
.058594 0 .882813 0 cmyk
f
113.803 367.034 mo
115.311 369.694 li
125.272 391.61 li
128.816 388.304 li
117.832 365.489 li
116.652 365.854 115.182 366.442 113.803 367.034 cv
cp
.742188 .988281 .019531 .00390601 cmyk
f
93.1807 296.77 mo
93.9629 298.265 94.6465 300.663 95.7549 301.926 cv
109.138 302.55 146.676 309.182 157.019 311.295 cv
168.445 313.63 172.641 311.295 172.641 311.295 cv
145.733 299.042 105.415 297.083 93.1807 296.77 cv
cp
f
110.614 350.497 mo
110.612 350.495 li
110.392 350.036 li
110.364 350.062 li
97.1338 326.959 li
96.666 326.032 96.0625 324.835 95.3506 323.422 cv
93.6709 323.905 91.9863 324.375 90.3096 324.867 cv
91.2813 326.881 92.0693 328.514 92.6221 329.661 cv
92.623 329.664 li
93.2285 330.917 93.5635 331.612 93.5635 331.612 cv
93.6221 331.624 93.6807 331.625 93.7393 331.632 cv
106.083 353.413 li
107.767 352.763 109.882 351.989 111.117 351.542 cv
110.614 350.499 li
110.614 350.497 li
cp
f
109.445 329.367 mo
107.319 325.116 li
107.319 325.116 106.718 325.24 105.99 325.546 cv
106.414 324.655 106.556 323.816 106.556 323.816 cv
106.556 323.816 105.92 322.542 104.798 320.292 cv
103.241 320.924 101.657 321.481 100.06 321.998 cv
102.776 327.595 li
103.08 327.642 103.354 327.631 103.613 327.594 cv
103.339 328.253 103.318 329.069 103.776 330.076 cv
105.548 333.973 139.563 404.485 139.563 404.485 cv
139.563 404.485 145.233 404.839 143.815 398.462 cv
109.445 329.367 li
cp
f
274.316 356.431 mo
272.814 349.772 272.875 342.839 271.88 336.102 cv
270.371 325.878 269.462 313.325 266.195 303.483 cv
262.701 292.961 261.472 285 252.888 278.54 cv
244.728 272.395 237.693 267.809 228.479 263.282 cv
216.313 257.305 205.145 250.041 193.22 244.699 cv
187.624 242.193 182.979 238.762 177.805 236.001 cv
171.595 232.688 171.213 234.419 165.582 238.146 cv
156.118 244.408 147.851 252.403 137.77 257.971 cv
130.486 261.993 112.256 272.86 104.806 270.011 cv
121.178 283.961 145.097 280.59 161.814 293.094 cv
165.724 296.018 169.663 298.402 173.688 300.449 cv
179.17 308.453 182.617 313.981 182.676 324.536 cv
221.656 324.131 li
221.652 323.84 221.656 323.545 221.64 323.257 cv
223.491 326.427 li
224.111 327.64 224.703 328.963 225.268 330.429 cv
229.521 341.462 232.056 354.044 235.015 365.862 cv
236.142 370.364 235.677 377.624 237.85 381.452 cv
240.896 386.819 244.169 385.435 250.447 383.423 cv
257.134 381.284 275.089 380.185 278.767 373.374 cv
281.265 368.751 275.464 361.517 274.316 356.431 cv
cp
.855469 .847656 .785156 1 cmyk
f
181.82 334.041 mo
220.518 332.91 li
220.755 331.855 220.967 330.837 221.139 329.863 cv
182.454 329.661 li
182.313 331.141 182.1 332.6 181.82 334.041 cv
cp
f
178.46 345.31 mo
177.931 346.681 177.103 347.979 176.196 349.263 cv
167.752 342.063 152.655 338.004 144.328 335.923 cv
132.501 332.971 106.094 343.745 95.0625 339.808 cv
92.4561 338.876 89.7119 341.167 89.7119 341.167 cv
89.8584 344.782 93.1777 347.378 95.9805 349.563 cv
96.6904 349.563 li
107.798 340.37 127.822 339.646 142.044 341.769 cv
149.405 342.866 155.721 345.62 162.595 348.146 cv
165.454 349.196 169.351 351.72 173.129 353.663 cv
172.17 355.235 171.448 356.874 171.342 358.675 cv
178.151 359.636 185.14 364.96 191.822 367.282 cv
199.524 369.96 202.731 377.144 208.794 368.696 cv
208.794 370.116 li
213.753 361.093 216.729 347.888 219.404 337.48 cv
219.482 337.174 219.555 336.886 219.63 336.587 cv
180.96 337.754 li
180.271 340.315 179.417 342.829 178.46 345.31 cv
cp
f
105.251 270.065 mo
108.165 275.449 123.645 266.985 127.364 265.313 cv
134.938 261.913 141.071 257.938 147.741 252.936 cv
153.882 248.331 160.586 244.26 166.999 240.2 cv
168.822 239.045 175.853 234.993 172.485 232.248 cv
169.854 230.102 164.908 236.877 163.31 238.565 cv
159.365 242.729 153.75 245.232 148.985 248.408 cv
144.586 251.34 139.373 253.316 134.407 255.285 cv
128.384 257.672 121.663 259.387 115.982 262.327 cv
112.382 264.19 109.405 266.89 105.967 268.959 cv
105.396 269.303 105.397 269.374 104.73 269.545 cv
.058594 0 .882813 0 cmyk
f
171.973 227.442 mo
171.973 227.442 170.344 229.396 167.205 232.444 cv
167.185 229.766 166.436 226.28 166.292 224.786 cv
165.889 220.584 165.791 216.345 165.596 212.086 cv
165.399 207.815 165.529 203.387 165.359 199.047 cv
165.272 196.836 165.089 194.875 165.411 192.676 cv
165.753 190.355 165.308 188.221 165.647 185.872 cv
165.867 184.351 167.248 180.356 167.339 177.522 cv
165.601 177.062 li
165.256 182.047 163.35 187.299 163.046 192.159 cv
162.597 199.322 163.589 206.601 163.239 213.803 cv
162.911 220.558 164.085 227.42 165.78 233.801 cv
155.616 243.333 133.304 260.782 101.579 266.182 cv
104.414 268.544 li
104.414 268.544 141.737 263.347 172.446 231.221 cv
171.973 227.442 li
cp
.855469 .847656 .785156 1 cmyk
f
89.7119 341.167 mo
95.0186 340.093 97.3984 345.784 97.3984 345.784 cv
101.007 343.528 104.877 341.897 108.891 340.765 cv
111.336 345.888 li
117.664 345.888 li
114.491 339.511 li
143.026 334.698 176.06 351.452 176.06 351.452 cv
179.132 346.966 li
126.218 313.895 89.7119 341.167 89.7119 341.167 cv
cp
0 0 0 0 cmyk
f
100.951 323.69 mo
49.6914 218.1 li
49.6914 218.1 44.0215 208.651 39.5342 210.777 cv
39.5342 210.777 36.4629 214.793 40.7148 219.517 cv
44.9668 224.241 47.5645 226.368 53.2344 238.651 cv
58.9043 250.934 96.4629 325.343 96.4629 325.343 cv
96.4629 325.343 94.1006 328.179 91.7383 327.707 cv
91.7383 327.707 43.5498 227.784 42.8398 227.077 cv
42.1318 226.368 33.1553 220.461 35.0449 212.667 cv
36.9355 204.871 45.6758 202.508 51.3447 213.375 cv
57.0137 224.241 104.73 319.911 104.73 319.911 cv
104.73 319.911 104.021 324.163 100.951 323.69 cv
cp
f
104.73 332.102 mo
113.178 349.72 li
118.611 347.792 li
109.445 329.367 li
104.73 332.102 li
cp
.742188 .988281 .019531 .00390601 cmyk
f
107.933 240.329 mo
108.147 240.193 108.361 240.057 108.577 239.921 cv
109.888 241.985 111.2 244.048 112.511 246.111 cv
114.399 246.524 117.354 243.769 119.38 242.536 cv
118.023 241.054 116.414 238.113 114.979 235.965 cv
117.407 234.45 119.257 235.621 121.306 236.683 cv
122.199 237.146 123.206 237.537 124.053 237.986 cv
125.93 238.986 127.929 239.565 129.516 240.722 cv
128.902 241.045 129.182 241.568 129.091 242.008 cv
128.634 242.405 128.419 241.718 128.037 241.773 cv
127.481 242.04 128.007 242.548 127.724 242.875 cv
127.232 243.384 126.958 242.129 126.642 242.773 cv
126.361 243.09 126.452 243.746 126.715 244.308 cv
126.969 244.846 127.499 245.234 127.716 245.704 cv
127.863 246.025 127.81 246.346 127.933 246.58 cv
128.367 247.406 129.072 248.138 129.708 248.838 cv
131.467 250.777 134.036 251.914 136.296 253.343 cv
138.652 254.834 140.911 256.211 142.892 257.504 cv
140.585 258.97 138.28 260.435 135.977 261.899 cv
133.925 260.479 132.07 259.088 130.199 257.783 cv
128.333 256.481 126.494 255.042 124.356 254.271 cv
121.354 253.188 117.937 253.229 114.633 253.002 cv
112.828 252.879 111.393 252.812 109.987 251.554 cv
109.357 250.562 108.727 249.57 108.096 248.578 cv
107.093 245.563 106.572 242.638 107.933 240.329 cv
cp
.855469 .847656 .785156 1 cmyk
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (POLO) ()%%Title: (cykelbandittenBLUE.eps)%%CreationDate: 19/03/11 22:37%%Canvassize: 16383%AI9_DataStream%Gb"-6M..Anni6Q\!:R`&ZV'SDKr8R\B6nsES;nUMG&6?obpHa",E!Ci_VrFYU0jK:0D<rDeMA<NK7!q=U0+(_O/hKV]"34?gT(d]%K5PVsW]'eR<]SN8=a<Tl"M,T=UpRW*Aa`b_So7QTM&0R;MXhEs*EId-;p`K_Hkg&(`iq6^8I(HWUL>MjO6a^_E&>:/Y.nfab)b;\%i0/?[heBhir2j5i[l^cdHe!oJAZOEY>Jni[HNKsD49R/6ASp/eGJB`@*2XsJ5)Kpl]VH^c*Q(u5/A>cd_a11bmA<Zfd'W]>"?mme%#OtH5s#ciGJ.TLa!L!,rs8FL/+@,>?[3)$;VgnY*JhB9QeTEt6BR"jO*kfSMEEM(Q?^3&1TtR@G`L%p6GK/Y;,!@sR[jNUZ:+*WI%bG"B)!ba:^Velt:;d8.H8eQlUm)'Me#g/"e!C-m$UEY;/LQ'LBRpPsG/`:KD2jb#oa3:0R]af+l3gr2"r;iut@H`"7Rm20VmAH^t%#JCG*'d>'bY)e@oZk&P6riLVg)<]D.b'nDa([]VNF99<7lq]"BiS[bia:,:p#OT"bLq/NZ4?6+@08A?r`qrX"Q^."qhoZuo7>8GV%@00Rg1sN`i?<gN&kU'C%RqKP,E&<sefX^_jf'^YYpSp0^KrYCW=:QC2HJM7'?uElsLmEq?rCc2n,7X9@-L&;Y!HM=mS;dWooCt=A%nDY9QFjTOWo2$W]'EdRK;S]*UT!X'FI]1-SQg*u#g=lpkV[*6Q!l9@`KYN]RJ(Nuf%0Cnd!rOk\nC&N<:KoF;c+ThW>=B/''h-b)%MQg(p[9>=tP$jb)_);VtLV8lS>9sTa_KYbo>Li&lWa<`;of@P"Y@F&&$U8L9U'Q+T>53BD`I/S5`g?5S)>R4t.A*@<j)8af1uW@h%Kes+4r#&Cc^Te5GKYNXei<8mDRd`98KbWKa*/XL0,9oYP)sP@DKHa,M-ZbL7a&Y_Irl-ju(;aU1&9HtgF-4"d^UY^jcIar@N#U*'%R*-C>$iUZ@+as,)8)b7oWqeGW0mpr@8=ut;F+sK8IJ=c]6L&gonMas<&H%NiO?WTeX2n2UI-(0D7Zd_i>i\E+N:CD\@k6]2n:`<(%lk+<YMs'2aA\GU-r.f-N3g!+3%XU"^r$g'L^TeNs2q#`/iP,(+gE:X84csR.*Te?f^sXei/@$JJL7#<CYUkT:aI4mA)*?tAcc^]'%b[j4r2T?bAam;,NpZKlu5K93NPGO]!S9`!s[-0`?hb;e8:MEV32:F,8;^VAmh'2T]r*f%fL.'Ls<>I3"l[TfY-a@m8%Dc'6Q$IX[%m\uF@s5>J47:lMjIJtL=jo<\eiIBN2s&[q'RN^?7rti`RGP92Z)8gqC,BFh$?a\%KA?Yo<Xi>j'YP_aAYL-`Kp<*CmS,@L(b5ZbT%5ITabG5.QYQ2d/bp_E#a_g88H<[%FCoig'R[n$F_H=*W6U:DKP<&IZXllYpRhYQ:*%T&0)\p6J&Yc\e6q;_3=H=V`rH='KTT_F-d%mG6r3:V&H,`A6]+[3G7U%lk.E+9-'Yd7&?tOKOXRRJ`BE@5ec'H@<uDl?-.95,;c<JT'IRr#sWQLsSr,)QJhdrMC\6Y`76=eu4.l%j52G`P?,Rs(0S-+F2Ne<IpdY+(g)u8=`83B[m#J8ZZWmIXMIO(aHP&D+34&?M<hZ(MgHScbe4N3k81IBJ9_MHV[3:Pj'&Kd%BDOm%S^2)dQ!]ID0B[0-PQC(cKG"1$&.gbc&cYL-\dG`F6`uh"Y%n2'D>;YUeo6(U97%B(OnS-K>[-!I5DP%Fq(VYn^,8#[>.d>W5X'l=%SMus4r!H<n6>6b#.^]:[r#i9(@Tcqg/V1rX&P'oPU`k*8eO@0fTTf>1)t1f<AS],f=P@6pK8pUH=W6W!.O\#a5orm0'@q*/ALrt\%L%W*nha/r/?`U4#j!q,I^I(YhK/jDE4=C%bMar+9O[hV7/,nfkODAAW@ciSqD<>&7Hu";*al)VLdTjgVc>tQ?],ioH,1Vg1WgR3%%>R.]q@,Lnn)(SmY"REuEcPFsBf#8R2i0uL9P)X:Z[ZSbq#262]bl/ar+AT-r#dK"Qj*R\NSd-(b=Tjif[YV'0?@CNncZ&3/PccBL%le';OU]htOiil\jnDE6A,5t!]J2QbCnU.li!/ZAsOLq4hF4+2U_d/(daA01pO'KK[2Gr%YeiCi'^k3/kTgc(o-7r6e-@(X4-$*+6%ESp=qXPu9AEY7+g5qd(dddl1q7m/Md\7/i)QcAO`92_lc!_l[ST";9Ff4Uq@G[2,H2#A0WY+R`-0Xd<:@gDL62L`kc,$RL`:5i8;%<a=Z5>Bo1RkAfY_7+eQ8b3V!D+\R/!GKfQrnL,JjcIu%S+8YO%T3!R]-SRa18!+?KqK\PQY7g5445*7CQINS?5\[_6cWA2"+L7F8%LHCEu)Fq,SWI8KKais[t.Y^ffAT.@[)OtR'G<O;Wr^,n>I[%5;jpWmW@lDNLN,,eAWhUNCW2*b<U/kdB4>2ip9"6ar)BR:6427U*%^Nl,l'":tIX"p)t^QOLGC/KmM9=M!C??27,>mmjdSF90l9)oZoZ`=_V*X0O`fngYf"!d,UZRo3m'tps)@9.R5+7<:)V+2CKfWG$&%IKeTK@/"=Vj.lWlW+OF_]5Ha)jti/ms$6S8a@s1YJ'78\(34&)8Y'".Lc)TrbrE3>KPQLAPrKRc7+P2K2/GlcC!%o`4>3Z`jRX[F%Q`%G6btDdMFn&Y:QF0aLd(37P/n.c*8u`[^4nu4fB/E!$>20:E$TmUo!t.p7U+2*)F"`JL>:jSE,<OFh<_gblcH<+ma"H'O>8(qT%-="lsSrK/`>#^1=C:.VndXYSs#^_,]ibu3q(PssX7BtCo.Z:kfb$AOTFVQ?8l@eTjJkT)9l::?M^e_(i1jQd8n!n=$Ege+@N&Dj%%..e#@;ORTOE@ii?E>>Q&W4N:]-WS."nCh>5\nLM&<>/JAnd/X?CRW&Y6]/R)=N_siHf.+BdiWVbFefIJlo^jR\#JQ0W?@r:&6hM\%K1J*9Xrp4Um'H#fU+oM1\TY/_,i6aUNMPa.G#[Z#H5"^6[+I<1(0N0[K#hdn!X^>Kj40%Y*\hS=E'H5'F-sGZmjQNDo:El'RFEC/%/2,AY_9j=:2E^PQF?WYOJ'hA7/`iT*1PQJX9-h^_JH83!ZtI8KKLc?B#Q+^PW:`DU'7"4Fa+*F(5OV727@D4-OZUZg:lOU(,`Wc[%Ej!T+Ynb2ia(aZ%h8OR+b;2R^[]C_tAgg5#`\g/fLU^?J76\(<pWiBG<dO$edaR]"rR`U;)PULnR<1!@q,ft6V?Ujn%FRah9+cWM%>B*pPB[trMk0#_[CCbHG'(7?6a10:>OQN)N@So:0R[8LU;B9hmXpF1"_Q]adjp6:+C9-&Ts-CI'[@1'3KJr_r+rM&?(F/%?TeXn'%19VsUXN3:S`mkht4Sg.,'g)F"9U!PM0W*fu>eWu/<,Dg!7k?NR3V]\/F^J5%e*r9-k;X)@=lWTirI!Q!8_==72G_PeTR@Al7!aLa%MnsbLnFZY<)%Wt^7J?._(HLJ89/kl>HU:gb=uFj!n]N=Dg4)%qaWuW7Gqj;5<tgItnahS"p$*N@di$KBg4-94R(+$NGirRf*XI)P%C&kYmQi.!rq!VZ4MHC/;;#s0Q1!cFA/:3'\BGHX_C;HeOc=N?qQIRbOp:pu*G<LV-9U.amkU7jW69,,CC&*SrQIs[>3>1>1hZ)qV%:fqZQ^"er&?jOnQWs)W$Gd[r]JRe5lDG[Hhb-ElQkDU)</$1qS,fn./D+\<()p@:^l[rBCQt-H_#r[@+`dAB\:ma1dB&TGB`uLrG%bkY+tT?N:=Z,hj)e`,54EnU,i6+gn5^'8TNlEG;Z2gE^cX]`S^$eYoKG\VI+Y<d:HEp=3'S@p'*<@i#jYM'Ri%[[qb2^+X>SgI\O%gFHH/MXGIiEuq+8-UG[$U2(S>"tXK&NQDbGZ'HBWZ#0$pCu(Wr-CiON3N800n1JNs6uuDSM*B03,ZTZrWt;DL1.;iMF$%c(49`l3%5K`QUS1Vrf@Ec-NNYOPXaIhO.'pEHb/@@a;%"9,HA1)mXAkt(eN54b7]tMGPaLkhQJaM?"N58sF]%Wl%?Np$<jPRig;6Uq2VkhAs%LHHTh=<?B=0dgmr[`am-T&"m9(6%u<S4f.Hle+.YH-YOjXY:^ZU!@+p&a@(5H]Iq14X.hgiRuG#(8An8$eh0hq-l[7aqV,Zi\f`o%)9V_(hJmK#:KgjJ9l,rh@>2BaIaBIX9>la'm;mFmlTDi$NY'0U;=.<oM6,W]`(eIFq+\ekUh-MVT5PD73DEh0aoJf1djUcY%ai!V%":+ge.WV.V!M%+r*TM?WpZUI"mUV5rkE-)1L'],lbGu7hj9S;7k3*aj,L3M-[ulTF`NFLinr'pr@2b?Aod[*L@RP[l-gQk$K`kmt%g&neKN@`ZrK8$:Nr-,h,G(eJ:\5)`'o7&GiZ`7_n<nc&>f-g8JY$9csA!J`M.,#Vo&W5dgN=''"k;\n]S^)J/p)fp]fThGA]feP"%CXGfe=B]!4[BHsg_=t/mkSW\Ei[/D`'r:>8AW&IJK:]M5*KGI*H?29jbQ$i>eeNfXW_8Y5Fiu"fJK>X^Uo:,?S=^bffi)FoU=2Ba%UPs8AK!A,f7frZU<MP*Y*M^2&rX\bThL&qEh>g%^b^0EL3mCAL7_TH0!?5I?W7\7r@G\i_OuQKN=>`D17J!2"We1neBb0sqG[:MP%.[N:k,V,,0$IVJ']qDb@iiP1\6n#5,124ec3D$]MpR;e*El@<>gqYjJ3@\m?DnshCO^$`JCM'X(oNe!tf<OJNBp8A9p)J9p6o0+K%V)I,8fdZQ8*`@`Y$$/GS;=-^jW$l8NN"FGj38b(P-g17_o:^D+C%6T!;]C#Nfig2UhA+[?SKfl'EE+1ir=@89r4j>0W=jD0[o?oX%;l>GIan];Q1XRc:X7O'Y.4ME[jZ7"h($k&Z0s7A-<jc]RG9b[O2K96>>8pIWGnJ4AEYr%qPZ`cAG5(pB5V5:WOZ/f`pUk'#X].5]%qJ=AT_`\OQ/s#&WM"fG5e`^q3s$V%8"qfU%PusE#7#St9A!Ym2\\>.h9G&2^*Z16[\o:&m&<q.0ZlVlc3:fNSi0iCS@X[P<G$&(a%VW@/rDbZ7OdF`IB8$SW@Ki+`"bXVmS\i1GX*>6QkMURI5Gt$H/!X7-$.,o\DEF+jiJGARld>&"Z0@'0:m!r4XMA;l9Xf\,%"BVB<%G"gF9=7rh/OsQcI.cE2)?=;'!i#Ks(QT5S]!_4cr)WP*/P%?fdo.K21R+TS^Gt$^fjE+31hN@0K0&tO=)V(s[;/*HS8ArQ\iFt(L%+n$E?4H+@j,0QWEh=RGPC"GpZ%Gj*n.*RVD/li/NIW+k]p\K?a90U"q]R0,#42RJ.]Cb*r060]r\SVZ4a>7"$chi*p?),!3$dX78%FNrBmc#V'^q+lVKc`E@`@87h]0ZiLhL-+V<F'q3ph_\$I"]rqEc'g^CU)Q^LAlij>grNb`ZU3FIRa;@iaLNq[X^GM9.>.S"UmO6r%gWVs`2CBF48MbX-4;#IjA_qIQC'i4FeM$]hchXeG"_X,ZOXDNi\GsjaM"r8XDmCUq\-JU2aGM+r)%Z7RcE0SEX1.T3RT[+7mS;Xj%p\A.^@VK:2E&2=XR4(ZLo8!!iGn,0P)m<7GR=)H!=1FmAfqd1/rtb$3D&2I`>Jb<[']PC_)<_j]<OM"c3(&VY\s:IneFTIT>NYt*%doXILX"hH>7U=:(o.l0B)E9pa_/gi);6#JjF*t(%j42"?4g$Z6/E(7Jk6a<5R8d1[4Q<;1=g$a<R9^9$=91S4S-KcM,.>,sP],N\%aO"rjPW_*+iqTKuF@2s$gkMq`#n\,0OVQkqP,tC1lN::*Up'9XV>iZ,1];S9Xs_CWf.3S[iiX8FN6"d.$GYhY:1r!?qr<?@]kZf/%S7E;66<+kdG%A9Tp>p@EO0C+)IuB'*np?M$X?)a_\4A)I_j(kGMJHbd2;c:_:Q]R/l^31K42JB#M;tr)28n2Vd2\B*V$/5^V/5LK%g1^#A'j4tu=^!E5A;*kCK^Po_23YkXcE1jI;K0V%N`?P["kV4*C#KY+F/fGDjg@?'R.%n5A*$BbaH0Go>mlsHOi"2/5r:j6<E@4Q%X8%sV>r1*SY$%0*:*L`ZB=V-q`5Z:E@5]pE(ePh'V@8?P[cdVtj(>aiCf?a.(t\<-=G^TQ&69t>5piRaH-"i-Wa]roY`qgrNb"tg%cZ2-dja!H<:AE',pl,,(LiQ?JF.Ch3SE4<g+spDf_m[tD^1trcUV+[8)!>G89N>W13oV1NqM'('Fi\hNMh@4=Z7'AFk-K'-dJ4+n%e@`+o&>^]QKEdYJU`T'NqbLA>b^ZreA)!<UkNiZKX!&O?D8E<tb7&IbMPOB#doJ[.*SM13N<2E&,L=b!=d\;*EL4\f/?27PEAC8^%goVaq)Ti==[OBOkbhH^IkK6E0oKJ2`.dMQR^&RZu]]e[-Eu3'nHr-ELHgcKVA[p%7IHLQHg)dd!c,1'a3Onk>`U@b_!md3)fBdS#%[Soi)hA:Mo`FV8hXE`$!'7%;q\r'NUI4.+*5J>_cmkk>UHr)K2Wt/"q!R"tuK^[C;YWmNST=O^gan'U04lti=e))gn*^]2L!1sg-%qO0T&0;%s9nBlm9E-hA"E&9+OX*08RC&,^RTA0:Dr8d@6Zno7!^@iS[$qJ!N)kWr8J(k1RVnGZ*C%kB+0-.4GDi`=%IgDV0:O-7%%]9+-D7jhI6a2@>PT9ds`-g><+QFTk6n0[N5:JYt8q`ZU@#MntFmEt1`3M,s!KD)6;n?Z%U9n@.[+JJ[Ucp$^m3e_dM;+G;Hd!GjH%g<cS02!rD)\^jO]h=90$)ZTJ1oP2nDibQ)oQBCNU>g?-`I905:]Rp`M*gLN9l1hdd@Q<_Ha#JI\3KV]O3gu(K(>G$6@_^0VlR?rn%4;fh#Mp@]U:PP(i&[\Qu-C[(;Zn=$I:XU:YHK,=RU'SgE:KDE.q`U&.e)Oc4^jM]SH%&L0AKB0GHZD+4pVnR/D"9b/mjZ]8l)2kb%N[O)5ZJgm@8%h2)`11Wb=tdm;G]GhbUW2GOSK,,;nT-XdIL-3>Dh@`XQe:H)>T;`fIK2j2#?Lk*q-)g^5LDmsok1hm)uTAA]*DA.%>q_`N07.9F>jI])/DVb+Deuj#Xa7#P)ul^F>&c'-kuQFD>(0-'2RqFV2Oa;NX]]Kf:",&j;,]EkB$g1>MFrntNCK]"W&:T7UgZlT%\.LT?,A[MXA1-#j[d)+`UL(.UlIC2Y2ta[%eTF$V#Bdeal<^SmCXsE3HEC5KerlK$`O2YACLJfnq))1D9%?tM=`%.(eQT@Q3Q8KH%iSD.];"^lhl6WR.R5C(Q;G4#]P*dLiU-pA;&gVq#&hKPiRYIf2R]2aoR$*;#6n*]fT2'"2\.ps_7U3t9r&BO-*62/4)TDfLk/UfX%MOIBeW^jIq)C:N&i[B\+'LkCL7k4(%\ttn-U$K:E:D;)Ea#_XPLH<5KV.hT!Kh].\;[]X7!h4S=3RhIS"sH0@h[<UR1M?paTGCLZ%,VZ&;%\c2n@1WQjTE<H[a'CP"\mP'0Gjtfqds^V=Ic1+;nibN$9na+uXJr3lPYn^F<.:KfV3G'P>#a;Xh"H8,*mfkDgE'&U6#Y("%h(*d4]pH,=a97!:5ucG)iXtg.C%(.'Zo0P9%,tI8^n=E(iM9_S[C?56k6S;Q!Z]MlE0Gql`>Aar72^e>TsBTD6lLat`>Sn!72pq"%`#F3)H]uAf"MI4/?6a_cM+<t(WK0XA;>*l`6dbta!Rq2KiCcBedYB/48@qV][1]DB.L2sYrdZOX\8!Rh+&1H%P/[X#2*P^arck5'%<1ZTE1h)<kWD4pC,IOP7C@R@YT@j-2p.*l0d/F1Aa2aeb]r9_IQiF%mp]lK5:<@aR13c53^`4:A;JZbT<>DmA%[8hF/+GmjI*fS=%ZnMPu1n^+6d*=]"hb73R&+nEXr=,g="Nh]o+W[M)'i_gUN+uBt23:eaINPXV#hAuT&+"lKqbX,eQe-ebc!$%p;h02p,U%G14Y@?F%$#l\04DFlN>'2;E,K9r'BOlAk$\1m4d*gF"ZOL"s=@"LjKHHge3%VmDCKgS%6if`N8cjT;dNHYG@C?_r:o7't:rZ>_;!(UJ:^0c4%;'qJ>M'qnZ=-j)gBn,K!W0?_G=>(EY*Zm6MqAOT\'-2W6)pm[rE2nrKHn[WGM;D<=.iX$O0OP<h?kdQSnYmiehZIrYK@pOHHpf9l%VNcU*WIY%+YbXL6dD=i;@!P)C5S7*B""'uSV?u@\!?>g-R'$,!G_KPD\:iRd=f[:b'&E=Kj_.MF030Sj)mG$Y`om"AQjF!J=bd/o%&oTldTKX2j*(PWaNPW7G0X=\`nYfaq"_eSO4g;k,jW&eV%`(1rr&fA2f*PPr&.Xlt#3dQlgRDar#qh+<#VV&g*O=XO+N,ut76_qm%7U`H^*]6KaS$[8Y#r[Z!$?o;Jq*kZ\)+Q,G3B-TL&64ne)Q=rSHkY*PU`SV=,p-\?V*@@kJ-)AN`$MGf#sYnkF9/cMoq=qi_`E?P%JU2m9J\!#YJbjp9JiZ5%;Bk_Z+B<-=Yd(bf;YP^+7arb/CVcI'O?KR'rFqAX!AQ/`W*[Oo;F"9@Ppmo8`X4"A,tc]1PK8V-W^Y'1%,!2fqHK>kmY@<3NXQ6`^<(tfb.MbUp0'_+Y4VIEu#(jV>K.JS-=L>AUa+Z&rg01qnCiA"dMTo_5.sBNJhNB\/%;1([k#^#s+LJn/%$d:M2/F\T-/tpR_0u@CSSIt!gQZG'0T`m'n(go)5CjbPbH*,m3SBWqBhQj7p4+!lYX9r/)VeLW?Srlj%/65#j01b:3X`-ru&cHD>%6'?g4IJ8n#Ee$B]*iS\K+V'Y",T/J&N[f$'TrXY;a[nn+K$o8A&sV`aYp^;+&tKenD6u9F&gA#7'VpD8$,n?jeWfMU@9e0m/lb50%iUDt_XMLSCM&H_*637gaa@.@D`$5mXT>\qu!E>HmHK:n0kiE/rbU[;i,+<cmX]>)c>`1U\1Tf1YZ.YpD33r(X[@B83.FqGaVc_<]%7]U>oac;[g.:m#3k*-<)RoH""Vh\T0ltV0CCX$$a]#fLeR!^Vlfs!l-lBAJQ[%o9/\P7,/FY^V;K^3Ri1;JWrJ=+1S9r9lqEu^95%p.Hr=$-NMhKTj$C+JZb]3s?Z_$:1\&\+)ufMqnmI8L:\*ne8U,+SXpBrMVM:?M7=?s)HoAXDG[iYnCjH4aVA<QR%jKo-1Yd>ge<"%OVOGa1e9);k\f&R3&!pACUpg?h2u:Y6=#WL$><1`LrGuR?QNJ6E=Cl"jFnp*j4kF&+40V%ro9pYWYCbO=Ya$dZX_6:;&-;Q@9H#6%]XX=NC0<>28`^lc^bV"cEc+gjpu@;"g_&-*cfL];&>n)+ST`uD3D$+maeYYfWJc\;^IWHp'O@2GgA/UV00IPsDJ8gRgXtjN2OD(]%fd5O!agYRHD&</ARs`s2DS5#g`pOC[G6n%(3!B3M*>0:Z1TBpd;a'T:G']L>fDA4R]mCC]gcbNqohk3M^n96d]j"SY2B)PekI:p>%qG+X5mpM''(.NO_?1DC!kganbOIfX<@NPO<QMu77DgqfGDrn5$\GYA_?F`_u+.h/%`!O-2;9B.5fA+G'0TZ5(m-B2Y5Htciqt5:Q%oa(QqCJ&BqTXF:+(mbtBWe$KBS1:naR=#^r!*7.D"Q8c`<e5f_Kn1&hLd;2-kou5]4BO;+i8P=e52b]r+\4pgq#O3d.jjd1JK/3^%^orD_`&(*$7Bg#m,5U%sb%JaZ=kn#Ep^>G.MsJ0@VEAH[&:t(A%F5_h<"KlO4356);[FYeUIa92Y^G>ZctDGDO:F+M-ELc)`c^se%+Q6<(Zp!I0OE&-Z_r.,H"`f\j@#E#NRaJJ?(;Y#Sc\RqY1g&Q@3'bF$OEc>\,nXPfdL[]J#Yt_>C6gT*W=$S[Q8b\("BmG[8^E"m%UWppuRS!j^b(-lX4;Ct*HiT%S%W\5HP%YVCl$!o+laB@$nnL6F'@@-PPJI(N-j%Pg3fD8bSDE7tAU51A1=O$W:K_fEUdLCmARC#D%=RuEJ%mdCL%W\5@U-1^QC8p4p:p/iHKni2:m0`dbM%:kZ1&-SnQ0%Za#FdSLSniDOT\gXI!<e$P65'HMNCF'n"3:i5+:"pF-qQh=%\`3`fY2em&i_"aT!s^sXh^>K0\.TQtO?ps6`2jfagB(3Shk7>IMOpoRdla$&R1.`\fRYX8SCn_:3'5P.PJ'Rr9T2Uc^qQ)rJ^lGH%3RC%r&gMO\la[:en!Zgf,uHs%nf&pq;AlaNK;F.D)RCI$YlK#X5mKC]&7U6Y=4DCu!6TFH,JAg?W#/9!@G]+tjC#$a<Sjp"g)7fM%;1`h>9n6Na&UO]9=9gn.5[k36E]k5Tnm*'bXLT3DcKVoRM?T@u^c-=nj?U+&Ma=[-&bbT0llZNHX*]ro]*O_k]2YL%(k&4KOb4'.%mIPdI*g;e/AoO+;g$q2E$XieEo6)&^G2d)q&pu9a(#\A0$HD>+g(86K_A76T!s('6L+)+*f5hNTf+enm[aaAO)=N?#XF-^\g[HS4%pHlm1p?c875"WB[63i%aiH<d0<T2gG^Qk[mR>?0/4AF5qI]O1gZ:kgo9r(b-KHVrSJ@uLGA!-p9b^r")]L[edc3?96S..5%TqJ&G%enDJL9rnap9GG9H$u06DiPAF^&.oaj*'"%DU)?#uEsR;'GZj00Tn0ZU%"6cic6<ED@hY*mJlKN2i.rKl%#e]OE?W\e!O5(7f1SWP%":]k"[W)j,AQ]eBf1%%4,U[!b&I=h9PXQBa,m\06-MHfA`WKr]1S!/$bKSm@)/1%C10FZGED(\BJYb<qI3&CN%6Vs=%#i3'$G<Tp%N<(nr/\b7]d43P\RP;,I"7Xa4794+XiX?$-j&tLmO9FHCmY2=[*.Yg74)X9$Jes"@T`Nc2JNanWMaO4M!$AGS(`;8C*<>f_ZG*$;%D<"#<n<6rY8<a\p^_,6#^_[-FD&X=(/HQq/'LoS@<)I<`n-gk'$pa\?*^D)R_A13fA;)I((kmc7OII`E*01+$+Y3u.&-cN!*X(%@%Yl0b^$S2R3!@ED!NiomT35IP9cN=//<+P)=2@6W-6Nc5P^]\?0!<DIJ!_a.O[]LVW<`,Zh^F/ufNjJ`CQ*eW6B5H<NOoC4."b?e&%Q%;eK)%3^'nmqgFhj,,s-F>N8;$fPs1gq)&l&P_X%0-a$=Kk<p&A^Q;$%)r@oJ'/gE?Na8()D57DJ5tfRo$TmFX/Gkq*d5YA3>bQ%R$#;sOTZk!Z*lIl(!P7P!*\Rq3!*]60b?FNi#iF[\dF%:4%'o(@9FEQ0Z"8N&"p`$agfabF?FGsL*4\pNIcX:JRk*!d)WYW0G)J2%.+il>>(X@aSh"6K,oTnWE2+Fc$Q05`\t\"A5X<V360prjC4iTTTE-8Y#R+W^lY@u;gpbA)34*PM%U4t6X>gJBZ07S#%?L^%BOY='%[FPmD:haEjTbcZsE,g.'!%ZA3E+#/M0T9Z@8%t@if^jLB+6tAWlGQ^F;)89sDGRT-_SFH\R>BTS5X<n*f#p)d"GWY]i&Kc&CM>MZ%0_6Xo"G(VR(qD=SdW$gsos=lLU!o)K2ZQ6B:3"o["Lo$ZVhpJa(LSXt2tk$tnGnGp/Q68L#f+Y^P#5a4D:U;DU$i0cX)"u"Jg=h$%L,]e-&::TkK\2>0b?E+GEC6RMENY-8;!]iVZ&M!S7ZpG1`8ZBab^;Le"CT#5Ph?RXVBf(XC],A:$o!s9iPYfu=N.#+SnmTr_C?#Y%rS'5i_<HlYnQ?,_l$S<t5fR7@"HtAd(H;nV^Jmgi:0YB(/]Qpu#8H6I-lEcaT6Pp#^$dbd+@a6CgWDbm>@8#_Q<<$g][dpM,[t0`%7NfR]bWH9.MWWh`X<A)c<C$1EB@,-a&6)@,"/8Bq%)':YPQ$\_/?rVKkr(UBVL^^g0LkO=d%T2*9DL>ZSAd#l*8n>!6rlF!&A(b!%$]k@eiZsfiag!`._]t9jTu]LI+)<#NCCTc#,YhnX%WO`V91CoJD@;%3$"l6i_Z>.A`P>Y[)[G:\FFFZ6r4mnUWYhh>L)LAaao&J:%#@QO2N=$uG5]@]H?1^LE[cr0,U`SlcYs>OKeuqr,`WKTg)!`/N%"t;(ZA,(s#3)VUYU0k9!+9\t23F3HXEQ$,nHCKOOKJ2@`<fDm%I*imoUBUjQH^=aq!W"-d^du!:XGDf%40[WsQEZf%1'SY("Z\Ir0_/f&"8(2#Y4e*O>o[Z"96d+WJVE$5,b3!h(+HL%Ta`XTQitP5%.5QfG"b'%5Q,_<0%ff()H(bY^_#XUc'a[q-CB3Q9M0aPC\]Fgo5$#<Ae--t?(]m0m!Zu^p]4pN?5Cg.\!,P\FgNn]pW=<9%";pnh%POE3E!:\6bIE],E0G%:d5RFFkW'dh(g(W!AE#=M:$"Mh5@9_U0+gs9M7%b/eLqTlS(7nW;9dK\rQ^s%XA.0^j/Hp.P#2lRe4s1;%%$*(6^"</-?-XeENon8)DCE);fIa\?#d1:(=4<-4U!XrVk$"/in3rjt?#h1k5%GPi3JQ^2177P3d95oG!6l(E2jb.XZPY,Lp&GlN.%OYnm"p*I_;%4+1U*!Tk5aH&&0%Xm(I,'fS-Nar,,>Bh+1Y*"N2,"k<D#TElthb-@r[+dD==;ff3J2\&CF<[5H5hZD*M]bO8H6Q\@%dQ._E,[CVY+ZTO2_*r'W0.Ra`/t+d6A-6LR6,52WobW_u>^1pY5UB(`,V]M:N^OAq7)T_8PK5&m%:FQ<b#.M0^OkB/1rR1QQ\Ic_%(?_+$5gQE((6B_BS")Ak%&0QM8r)5;!"^]?+;!bhoaa(.'pErO_3*o><ttIRLmXt.r$n)(ToRN@aLIJFZ)[7#%`Sbj,F`@3?lV4B%A"='ZP/9V[*CCr;)dt(c?>+nXhN8rN!/YNO&-Ikg!3"<1MBp?!$\4r"43DZm!8<X-,RqQ#%mUed5tEubf,3!6U>qAPa:[cqnM,o<%.M[5"6ml`)5UD"QZ)JZb&[t*i*Xq\3g<g+UJO(Im'?=S4&KF@`N++1>U5R>8E!B2cCn6hE"(7]C&^P,MTL5@ZA]9'<#r%I,#&TP4%&4FgO>2QK2aZRGg.a=*U%a\L=B1$%B"5m=s$m8EL`j7SN)J_>57R<$)absGS/ESP1lkTR<q@\=:Duq^O@SX_0,]3T5Mp,=l!t."J%O_$54Y`P&*9UO/\(ldB=Op%-ik@$([-urk"])l@Uhb["h5]+H6-(#P-!Amoc0Ub?/lu0sg;Glk6@<U6dj"D"73-#JKP5pPI+J\=a%&V*sr.T2M@rn8/C8he4u#E?ZjkU6o]!YV<KSeI*>[hDg+I6g-Y@>!)J:FOT8ckG#B!#j)h4n%&(BL6>B[2YB)0$B!:4q6Z38:9M(%lra@f4AS(T`#ECjg3a+Ql8obhEE(l'c>!U<s$.."km.9P!O4BkfSDg4X;\G39(852^k+oiH@cN6*+0Fi,V^(fF?K]]VD2%B\T(!G%fa(#4^n`?`2IYg)()S",+PR'6beUiH>0/dZ2E>\%_^:Q'_dVr@6K=2].#iD^r3L5N"RJOEElndno.6]j<&XfnccQ5k2AS?q"eXci%&;Nfq3KIsRE`kobF;Qq:#lmU8B)aCdc<D0u4!P0(2J-P*\$i!KIPuT(\.Op,>Jaa<87G.7&K2dD9o>+0!hD>T?k>BF`bUT",JdlA%lf\Olqa4lfhN;+C9Q1jdpgH9<MuX&8RTEELC*H5XA)dOl]&8*\bRL5XA6)#ARnL2%R2moSjbp7dZ?$#sM'TMU5oFr#/B>G&?t$>'%,!Xl98H6cA&/,pI+ECeU>bdi=OP#bUV[QsSFsse&gL(<'0$Y\/j1q)3c-S=#hTp0rb8u`nb&g3k,T*d51fEOeo/f&=g&rQfFN01i%J9B'o6+Pf5!4/0q\86#5'Jinn2p)RpnVS'$8L?nZR@"d[T/VL`=Mu@:!(1*OY)0Gm"$so@P17RWp9Y:FBVcT6Kk[hY!hde<d/GAV%oa09Og&\S=7>W&eWn7dm<.&&M$=-=2?r8;n6ik@UmSpX:"e][!C]l?GP?:M9@r3XYH>)W>8RZ#dM(W>t&;"2LOpD6loL"a[A_Ee`%>d*q(OU'8";mKd2J`',-[QZ5"ln-$>JXE`Pb5K.h$<B&VM(KrDMF>=rLeA,WV&-lXJThMbkJu4M+tsX^'\K06!;[2QS;%'sjmq2A%kM$X#%.pi"9I(3!JFRF(D1iR,%N6-_cN%P:S<'->XFaQoNNGX%[_?[2b&.A-/5qcZa:?.mX`KoM2:\sPre!#)&XG#[UeGC!EPpiB%\[`2$3%#X.oGJ(/=D&cY;hhMEem$W(&$TO]<[WJNAoa`MR*UGLNE3Wu$lZVb)u1E:&-$0BlWU(%=VKmlO^g&b=C901?]<[\`6m[L%Eat%o`3G+F`+ZqTmAX:>[^=_G\T&nq#9kj,8"annWEa0ZJ2[?V@2]XV>94`5.bXd@JXja]N7-,_bYbF#oEVVVg)s_Emc`[BGH6;9%(T3drD;oA"(pT'VnXr_#\7d2S14W*@_RMK7(#sH\'SBq[JN,n+ae$\P"9;-8bsiNif>`%N&rM@s,:3E1OcFH-a8cjT+r:;>J5,F(%+E<8NJ68otQ7$YM-/?dc;9RW5,%1-q!#,c>mPH$$A4S;m',^eERUD-Wm4tk'4!k'j<#63a#8V+d.s#H_e@LU$[Lk`5X5k*?bMqQ(%8Kc-',>*jB7II,"=u@:$c@bK213S`>ga*G!`timNGiqAoW]a=WQCcjlL)F/?f1^c'Kst5IRq=UC!)+"M)WllVNME"RPnZ?fNLYAW%R=hJd(M<M07RH*4N*<#%P3O$PAbZ620$8$Y`A8,2Z.nADR=VeQ+=^t^=E0S3#D!7o@bdf79!#E>5ib`ONj,'PU7]00L%Dn9c!NPt%4`ZT.G9!IMCB,;Lhies3)h5ol`/Mjtb!9;?>*6;uJBA1sEebJkW,]hqB(E0UNe=Y%Ms3c,4JP&$Mm7f[F2ilC;uf8'+p_^G&A(I=%i_"Q^K>:0umER-"C=>_@jmq"'Na;M!Z^IZB\-!qokLC>]A='FR[POf!VaZPZ]FHJpcuP"o)di.1Eh!?L+I=i?OW.:M09iM-Mp^A7%271DW#R\PdGcn>Bn=]mIDjP6,6c`E@(_`)W'XW0AFco;d?J@j'gshMbMXrPgQD9l4:?TY[("c!f,*HG%UjS<ilpLljTic^u$jRP!%;7gkh+u(-kC.jmA.ormq>jeZtTh<HF,Fdg^?moi22CO]oHEuuPKuUVWQ@2Em>c4i>goNi:/SGd9n+\f#CHNAElT-=KMt(12&f9NN%Za%RCQAqE=`6"NW9+Zd:3m[!"jLrAL\C2Wsj;O'cZKuUV;)P6t9O\`hqa8]T7GB?t7On"XT`?BMTQ8'h33M!FKL(X&CmuVOHC?CP%NVEqM1a<5=nLuF/Z:Q3k;-Z2$nR@\jCco_ejp1B#+\^W9]g3@Oa2g.H7s-h!dUF(:'08.]1NoIo+c6CSm;,-:iAc@O)9Gt^:h"/#%MG9)VV49H,Q#OpFr%=RZ4E5-iEk>U/k;=SnHRF@aNf3uJ4$UOtb@`(J79ST\*>bfiS86kI&HDo7]'%g770&'nX$gn^NoM$L7MtO9%!8qlcDQW.-+GjL7O?>ed&k0>g$ZbbIR5Y=B[V\KKZL#-]h&HMA/N/0N++WEs%-CXNl*7'hYor$n+Il&^Q5f/g9Yf0`]]:\^63E%f%84ADe=?)VsFZL!U\gM8YRg^1M"A6=f(CRZKQM@ikJr!Ikndt5b(Y_F<>g<?(.`jeG662tEBmp-S!+@Lp.Wm?jbgfEXG"7-L-/1bM%8HF?)(WTYlN;O#,QXA^23)6=+4rVmc1-hen!6/1a=6-<c,;Xs,^,(4H7Y*-!U90&$'Ek,>0e#U9TGZDLHk2!4ib``D#2>)-Cc0cd%$ImYNP">sj[`D!]-E#9]]0eM]C<s5#<tUJLag\lY!;iA_&_UsY\2NN<74\YP8hufT<LkgoYXX"#@c/X0+ND]F`"Dk6J.BE0`.q7/%O%@r_R,Z&?*AqiK+&'eu!.H+5^fbWH/9],SNZ&Ap&S13j\<:q69;4qe&lnuN?X/fD"eF,2XE;EHLn3oV7:ma1]XN?^JPdtGeLmhU%@$N_qDAr,3\QL!W_/LZ8W$H7=G[tCJD11IT<m]S(_SSu0..JbhG_r66[7pom>6t.4Ai148Au?0m@0n\YHg^OBpl8R!2C*i4!fc!g%aOqe'bd]EJ>CV<>);11pjop:pYjKsJ+[JH3X>UIlaJp0\=TYU%Rl<jIV33Vb.LNKJG%G2^c2n@uTp2Z\huR6![&[HJHP@6oA@F/f%$%lG3[o%5^<6!ei[#8<T?sH:Y_4d'&#kGAW2WrUac<o%tLk3*aIUq8tEW.>X)$Ou&8h#J)`c,*,;d5/G.-\(bA]erl,D%<K<nQ!S%E+M+5"=B;jTbDkm5as>#AECll,F>b$-C5c$j6\PIP0rhWn!$L0$Rt`M#ZPhh)]0BN-(KHCq,E/);HKm(C/o*7<'e'X$'T=E2_0^;%-6as<9Y=X#Nm#`rF@IO,O?NM4']2-C$*P!6"&_XO-)_KB40&jm:Il1$BsH6""2plYBW*ad#"TA.Zu#=F3'\b#.!p#Ol'+ZJ:d)q@%PA$ff#+2$@Y9[^PkWZ'u>3:fYJsX^CXI@p7h$sG^CT6E=[l^g:-s*VciN4a:cIg]#,6B)%Ub)+i@!CQ[Z'H;Y7SB_ZYot$o%&HEU%2A-BD=QM-2^tPAd,^B52[reQlSUpK6g(p)ts$6!?$*jdOS<^#"Q#Qrd>q8cmcgELg(krZ#B/U@<JQt104O\ibB>R1W'aJoIbApSg%J0oB7p9rfaJ?Z[Q=s2Lb":GBeA\K\."#.[t[Oe$Q4TK5@AP?;k7=:A*mtfe"1`Y,6q\<#:Rfnmkb>mO'&Ai`BBMMMbJ@4$/!?TSX%0m@=6;<>Xu"=@TGP;$'''3`#(#k45o'nn"j^QsdE^=7][Xt8$p>kSBbB/bK<;,f,$;Qcj$#/gPtV%YoAYgT4T422-hW.>r5,LEu6%!(X;==$IC(6R?m;JM#+jq%TuDQhCul"e;&4]36Pj<_sMn=mR+0GZ@?_PJW6rGLt28-1U@8W/<tJfnCbdWOsY'8JVDZ`>0n>DZHGi%:i^%j.r<257db((gFP%![fr!/'t7gne5Bj)d1><XRruV^k!F8n+NWoFQJ7+HZj]2Wc.U5\=Kp*t^Gpo0N4f3c-JBNILk.0r8j%+3%a=qU8M%oI*!rYLicHG2gHQUhE2R,l4cHT[Y1tcITSZ?#bORt"&Pr0M8K1h&5EdS.W`5ID>!1r/T$O5laGY;%s&eP0mK&!m5]EM/M%!5h:V"FOA!i[T^^\F7pVr=j.n&)>0i[4sTm-rV74aBSl8b.NioY,p+5'i.T\!%?V[c3[pJJN^9YO)L0IKh\.KJ)=fjllcisPpf;9%lR[d#2ja!l=s7]$RE4K$-p/_n?r(>C*VW^LUd,#\HsA`]>a,Ydn"u<&&S(9*==nam?e?BVR_$ZOE?b,dE*SFP!(P(8L05h=r2kj0%0NT3I.:CF%$(-9a?O[B`@f_2Y(3TjB42J.P#Cq4AKB$rGW$C81if<Rh+mr5+=E\N%nLHLdq<)"&+S@-(cKiT7C;P*^T"V58:FEFS%+"Q9R^-q*<DBWMJ!p)K(!8-^0OU><kLPNhq%"nr\a9aY>9#c"A1d#^-_FHYQh5?J$9PPj&__Z+)F<kf1-;btp9h7Yhak=1/__pkL%&s)CSa>,;&lr7EO$Qk?]V$&^)o5"HE^9(T./[<IK:e%_%>AO")o>#sQ^c+TaQ?n?80Qp^S*T4Ga@$$pJ@6oSVlATe&;3]NLD,hD<%4SUNJo#mSL!8*?$`$CA([,cAC3%K"T\R(;9PnO4P`l9X!*.e8Hp&tKCB$:8mg&$kN7=79!Q"TI4($+;7C3#J&`/?F!!47(TCmegV%3d,_!1YI1`<Y@7@h[>ukM4(+7,8#7DdOlRUCRKGSA$.3;!L14.*]mjRWLR=8U4H<cU3=Zob$\YT?%LYI#9)/N&e\`-V_P.nHB<gi%g0H&AEKqmtS=6MJ(bmIc%4-F]@O+Cj+Y*_+OB">rZD/^m^oFTELEOOJR:;i[&s;U`X?LS53p%')#(hsKK;+TpFH`4u.?]WQJeLul%:Pt*ZWVo2WPV`2A]k6q<'%g?h3_HkES(C8Q\iK#n_L-\TddV^M#>jbcXl@C(0OL;7Pg6#"Ef(R2X=iDZ1+XH]maKD^HeA];Yd[3n%%RM:%5:_iB*X@*%Nbji_9p/U][S,qsH`75<LiNGKOc-2J2tm%s8LU0-Wc.Ch9nnr)<h[g<IGhZ:8oeFp\-iglWJSs^#Z[k6V7TJ(%f%.5Qd.`4q)sV%%V9$'VM^s&22NbFg_*ko9KFiuB0`kak#4;sP?HhEX$$$A.^T@u8Uc^T5Ee]oU^q"qC-"#<UmR?XQQkgbp(#`Tb%*bSr,]-d]*I(!Db#/5?B:(bR*oC6,M]026qd67PIXo448j,M@:(Q2s"Idq;p,5Ok;K71=%D%?g?@5[JY<hSNR'KrdV$,^BgE/>_<%j\4"HmQAO;&VLAXnS)B#>UTt=_E;6Nh&^!t>QTr]qMFhL[)L0:Q7W5OEbJ*OWF[>9l_8#3Qa=_gQ`X6+k<^F<>I#nITY1IJB6Q0$%OV`"JI?GT%qF^$BYc5miqjuTM,+s:KLZbDefYo`S[)q2VORd6,G1M0%_aNil53?\"JUg,60!2sq3s#5M/;$(/K:\n^$Z7I=I8A-"%jQT&hRu2Ju:LFK=<60>(C]+q@$lpte_O91J$p*nl/g^l0?-75VWRrM-.>Qjd^q;c=5Z:5#-.NuAKYb,#`:=b=m(#d?6LXuK*2)Hf%k[tu5oGp0*.+.s+9B3Hn-PieBUakFk4IGOCje=e=+58Q4-UqVM1^K,+D"P,^U([!\8$r\P('FG)-%l)!=#mDH$(;X2h5-8c%rHq5%Whjk&?K92KPO-X2P74V4<g(p7&iV?16=;&t,a(-R*m_!s9-25PI>V!hbHC.>#sqjdX)(RrID?Ubj(PU$dDWSI$"XLknMn=N)?brQ%lO/J2Yg[=,$,ngq`.DK#l:^ee(9"("aD))'(\s3/`:kK9FJjb?G$nqC$qnb#c6?)/R+Y3%Pc4q#Ed]+3OMjhCX7c-1,J_Z+nR]3&%pj>[D)rrhSbJR_dFMsAqW&Y7h2/k$7b'bL':S>(&-)bN^#\EKX\f@<Q6U"jL*9HZhpAN[4VCU-b\T!;LC2K:3/-^]0^4q>>q^2H"%c&Mt^E73A`:4!bOV)Uujku@Z/")fuOXG-@f+OnsW6eUtIA<-l/Z7/!gcC%&D8g%CqP[$"I]+YS'M7[jA8+&]Pp*9jb'c\bG_[[_;%Gn_*dea%kna/9CmmW,1!Wo7Fqgm&HFKEWYN9W?==bIEZCOP%o8bhmB)o=_IIfTcf\g`8Kacqae7\7\OSasIr:Ca=p/[d@Jm+@u::%r$]ACTKD`f^l(<O:jMudoC!a-H@6X-FORoTh^[I[iUOb9_et?M)njOm2]T1pDjPlk]6s#?PPtPGg'=uS]u0([*FCJW.,Ctb7d[`%%S`=%k4%]bQ\R3)HE%oBt_dAV:V^[(<c.fj:^A7/hf)afN(j5=_[c*^!J''?m?eu?dP_e]<$,UFUl$-F"Njk??L[p=$nlr:Z3A+!b%D8"=2*N-SPa-4@c8b8!<;t]+mCB*q9rDFB,XOi/l/',Ob+.\YTi@enX;B&@9?,3R#>bU9t77Un2T]oulGen"ggaGG8VO5KIFEBM0%Vh7`JPWdg0+CAZN9;&:54em*]m2&huC&ZLonr",;R%?G)9\OF5io6Hro$Ia_%%g=APKjMfT@#Tpeh;@J2$f`:oC76R`R@8T4)Bu,%egUK>$9D>FUX/T_@Y)fJ6nKQmZ(]KHcLaQ^S1M^+aXV]!j`s%[N]QEW;>^!qf.$(\#)*kk2qW'_fGgnG/i1H@QU&eFDJ-<b:X`0f%1)q#U.-khd>#QN7S.<TQ8J.fp&-u,%Z?#B&NV'/sHahba$p&RD^!3BelZRX6DR]ALf^0]=g(<E@^E3*g]D^T@n+R1TjDM`AH2G:l%l*K2hDn"QWD>/5.^"mjM*Vn@>=(K(T+'t?UT=T&)^,=JRMfsKU&Hr+=J,T3.YQ#OVh?<3=I9XDR;jG4t8,1X&e)Dp@jr]$13JsU(%`DqcRMA+Di:<6upARRp6AM;p-p"P\I`c<#.d`98Ql1(uBI._Z@G&g[2XBc]R<dZj;iPt6,,o1^ECa4qmIc5ru\+i_&HPp&(2%ib*%DSt&+K%sl]<g]$X>HpiLod<7"j)hRqH@Al?i7:_j9iq5/;<>fuII[)W97iMIFd0L:dB`s^p8M_6C##8:IWW%5'Ge>V]3j>2g"&6'%oJ+#+`h2Q<(7)7cpT0&tfbVp1XRM']rO>!-V#BIj5OGP9)*$C@j.Cf95&@n\O_6a^RNH;:`i&cY-Tt$+PK3(>/TO<.D&B;B;;O4t%NkD[qPg@!B1N/1L:%*t[IaWUr/`k!!iq:Hi2q`NmVI\H061nZ93-m.<@pA<U)NqMm3`:3T^@=6^R$)<Cn-X)j`fk9bIFDsV6>Ih_%nt!4g3p(+?VLK<*`?+^KrH0TEqNhe2XG@7)R21179CWDu\),oAhdfhO&0,!\+b^`04"\20TXGrW<2'=rqe]bf_!4YJUU@0K\)1FH%Gr-G2'Xn4ppnJKY8neZ8Pb`K3gRIil']2Ys*A/LF4t'0-V_^K(Y-*,m;jQb?d:qq@#&/F<!Q_5*[/6E7!%CTGf&<B&<]mh3Xe&5d%23C^W!G?abd[$[lkaf(6mA`\QTKO<VHgO,$5@&^!@rjOrqdrn<ZXGr-cBTi5.8J!nANt@W0H62C>shaQ?1"gh0hcRZ[O.\Hpon.-%%C7Hk[<j7UXrQSojXD1!DFZ_2hpNT`HoXm`b*9dXVds"Zl`M4><t;PccKK1C%\s"UjY1K&r(Zq(=/Ht73$m=F&DGEMQo-.)drj`o%Pf"35A6U7j9e2"PkjtG6WTI>Njjl:1QaDL.e'Y313OhL)I#U2&h(!fV<VUN/'A7t+pi$LDdcB0_grAWsQOS?=#^OCUlXdg<"\%2+%VMZbF[cGP!=7WW-]4^6lXP0+D/c%P5[DKlNXP1t"mB##r>IEU,38OgR4-R)V-7p5I=4P(S/DACDM+-/&Bfh6]ZY2FY[f$uDeK7Q^%O=)&rM!slg*j\n7pqP4%hG.pFW(m26<h$tEn'pK<Xu?/mI)XQhJ*kf*P\g-HDWr\G[9IECZpe?6p$ect#6_GCYOFn8G$hk8fPU$-%DI(A4l!](lPA.J'W,Wh][\^'F[gbA;cY\P*./jr7`T*laAHYh2kIYK[Z"=qmR>:A*LFZf&R2T&o;;,=AHQKZ`P/d2Y[A,r+G5"(C%\)c+K^YO0`]?Hr,BtMi`]Y3E,f'l"Ef==,jXZugP#Gh$mB\$A*Cn!2f:_:*,Qe%A%XmeRlZ.YUr=athSmLF`I?R8'Y#qkor;n,G.%[eg385!1hGNdHJO0"<A(mOACqh;6Q,[.o9s2Vf@S8^=csJAO7m`m`=4]9>Ecmtj4aSMp3TX'ONWE%mlj#K<%s9YZW`ibulNil0&g%bj`O5qZYuZ*0p-O2Kp0ENRj<@R6KAi5Z^6[j_b%F4.36k]]IjsoVEm;]/!/^N!_eC-1/SlCF,Hk4YH?*6"p!&lp9ZC<"8m<A:kDo%OkN6NQP/\F:XdUrh]=qK(='1&98HRF6))5Lk3o4c6+TN*EOOoiqH1RVm9o0pa'H'arLr.%?Fp&ZBbrDh_PNtd4L\@9$fe&k`#+sb%2K9>Y<BCW!]!:0GA\MkJTlAf`H:?$4;IIt7/m<sWhs9:us8"M#^GmAel6,YNKH!Y,MJM^,6@ql%10:R,G2;bdNH^ljhW/C_[q\:D%I6Ou#l:m:7dReH+g\K,h1N4<$4,X=E45[S_/$e-JF'YiZl#-)ZS*6F/gpt]>GFdKPLOPRNco#[`,q\==4q7@@g\EF'M[tTY((%iX%rRTL,V4'>)QC7R>`%0sEG@+[F?%L_<0/).0GNgHDpQI-%F`GQP?/2/u%T8O%H<4A'V"kcCs%R]M&"m]hDp7%ol\F6jKkjaDE4X3$%g3/PPfN_G1^G=.1fIn6)D>HU`5"[$a,Lc9qpNVWk2$%It3EK;52ZI"c1\4-T`nFKG:=tj&D451KLpV$1Fi`$2pfc^dW0""n^JM6E%[We>:4m:<)8*Qu&)f7p!A5h')dQT4r`nQU%oZMqa5D]%%f#q1@oXVV)ED6\/B3Sn@Y+1_Vij)YbHcXlmSX`u[S>j8]3NHFdM$\$B%nD=)$;0su\.e$.FRj7A<$#2@]:qPY6PASBq0PMUT!o;s*roX"fWgp-`qn'Pe40%5A<c]8a/nsnDrsG^i_j=/G^Sh$sKkkOK?X\T>%c$b;ja*o@s=4W'-F@PrV)W>tEa#4gh;0k!F;qSkeOXn)o/4]Q'Yg2*_29T!2VQ\S?(q0)`PR&'PW4V=TF86`-l"*!9ZebY`rO+CC%&@kKgUU;9dDLVu#RHh6LQ'I*]?5`auLA11`)a5[?I+jmDbY`]?D\k(ICj3M)8T0lVaZj@[Fh!+)og*T/3h>NW[,53_0Xa)T\Ls4f%,IH>Y:0jdRmlVYoqXX"nD-;XT:0Bl$SQe.CqeO'`kj$Fd\qHW$2a-F8ep.$5BPQ7m1tHUR\K7*E4_bLR-ge%i^L+goiSF5IDKZY2%pO1S]CC[Mqj.<GfL;+s9in^@;GPV1HHJ$R3nOo@[,.klKD6?=a%d/,VXpX5+C<c55fmM\fHO`t_+1aU**#Fdjh,3`(#jdS7ht8CC%]s#<,`&,[*.!Z\U];+GnCtTgTmuEQT8')-u$Q^YlhX.]Zc0kA:]K8=VE4"T_EP$1!HZskM4$MLA+7G5NGK7anR-30D+)e;B\4Xf^%l[F'(L7<cPak7GFE2C<$[rB@=0(.G#GC6:F7jmhDg@#Q%.n\uOqaTL<>tEPAon7FacS"Ij9=hf,\^e<fgVtVsfS&+12+l?6D2?!U%gTXoM]c,aVdi8#0amDsZ]fd@C#HnK8g+F=GhIY_jfslr:<]iS!V<!LNeQkdbD4bYPT=VE0kabBp/&(-k065M?UC1:*R&75$J#nq+%an<0NHr$M-)mBFO+.#t:e)8L/J[Joj,k>"cm<!pJ^>,#ZN@LO$YtSj1cHj]aT!16(nIc0DetmES[*@9aS%P%kR!=68dmm2*mIE0I%]Zi'Io/FhHfIRKpD/9i?dPneNbq*#0]Zi'IZch+inhtbKG'TRZaP6?(6K:\&;!a?A+$L#(ghpu<0FN#Sbg!"4UTWZ0i%(=+gH@c2%du6W`LE(.*o.u7gG%14DN(kO-_k3Q@_$;i7[d.2-I!F]-B"p9Mg?u((V:[u(\U/56VY\ToZ_qu\o?p]N_gU^Z<dE0Mk(P_@gYt8<%c^ak/qTeIghHsJjGL)a^#D#O:r(9(ilM75=l2<Xp^8osNE9d.b#>T,s,rusP4-OjflX@!l7[cCTjG_=TZ(L=UiCrRXVI[AQ^MWK!%??&TG,rdD]LcUop497ltZUX=Y^<7f:ffYo!-CkkVi;"`d@-\WBrYbpbo_J8$m7Q@6g;EVDD2hH_MM'4/ig#A,]sc$5>f$![9&YPo%9SUNWg[GhHfbL)rIc9N0`oUkj4=REre9G%h\uR1VHWQE6iK8?'UdY^Rp(W^>OL3Dnl0**?#@Z>`_n.dLL)[kI]okg']1T==WNt9N%Cu+j!]qQ.F,'fRiNScBTdat1gq#:*VAL)B7ifsAll`P4n^p`*5MN609G6r:88b8!<;t]+m(W/OS39^;5B4G-2NRRTCdXIIq/=uJc%HtooL8XmKjK7^QYB=ssTBD6B$92qV%CXXm'OLpk<Oc'lNg`L_n_]`B`kKXKsNlL=Zp+^C;-)phVU2Z#)IeHh5Xl#/j8@+7&DqB9i%$Fek@coY8\?GS.'lT`[..j*KP/s4o`bbgHuaJS@XS*Xq:.kKd$T'T;1)RO=(\msW)LR(.3e+1O*`ZS'4^"ikhO5s_.4^bd_k6b9I%$JHMeCmm*2>n1+/aR4*,mW.5#]i`$m'X6gSF*FngDsocsB<SssReSAh%c!<!pu&Wr[pUdO*!3b3U%_@bnKH$rG*b'Fcnk#<4LQF`%.pSCPX74bAGjHnBY0[2l(:oRTmTOf1moSbY4`:#RX*PL>".QSG+"-Zg"UhWjSSd0MCgZG?X&A=]S<D."Fh!$)4+aM][H$@p:VPND%20O8)o,[W2mqT9WY7^0m)B0V)S#__(-r.i9YH\6mi*BZ!F5?7:YH`qMI$`I;jY\qRYAmP`=E.mn=5dGqSAlH]D,X3I4^[L9MLsDb%;Iar/OrBP^,K1"pB,dGCNDs2k]LLj3kO'M=MpaMMq[dCYo:Ft>5m#Z?HpZdQemd*L+BS+diU5.MDSrs<nEi,]]+*YQg[Gpf:j*el%XkrPQeZVl^MHdg3e^M,^hr\eO$8:7Ra1'gnm<3lh*T)V>q"C]uQ1qREkdm<,Ji#f#IQ\Z5Kd#[5PktllV6>2tr!0(%:MGcL5C3>&%jD`a)?#0-5qS1<qHG)/3+0YU<jAemT]Hf%T($u67@*0Pg]S=`H^%9B2]S/Qk_4+d3oNO=,5;*!2P?7/RoS7(UI9h]I5Xf6ad3_CX%q'6']Ppd!QW-hG4rJJu,-h0<9F93T:C*/pZ0:[UPBK@<(oN_T`8Is,+EDS\GmC`XjR`q_UhTK^3LkU8gRB/l[<lM9&GrD2&.^QgT%YRW<Zhj0Gr[Hlor^7T\[E+H/"ZSifsb7Nd9i$eqU3Z9g[mDFDL@+sqPORKjs*R$J=rH(#f]We-;pJRQ!ndO)h4;e`S=[U&&Yf_WR%Qhqs>A,)7cr@.Yn6GYg$>.VVhZs4PEa2d;^m6UVL3\!?3F[;OaIob\Blg9/9pPQ!eCs*X1VOQ\FrV!%gbGUPn[O&0MaT)T1`b*iG%q[eEOgX^K%mL=&?038ubTPFbRpIsp63!3"fBm?i>N@#rCk^WL$Z&kJa=,%m)$Jp</Q+n?4ETu0md't(P/B\PRq9:\mJtIp-FuoY0%#tXh)5k[3%k]U4Bq:/mJgOT8'[CQ"ljD]cA)8ARr]Kc_:mn5jY8Tl&]QS&;^XaU]>Q+93(RT2cQVJSYSqRbUo#E"9=SfQecUtp=0%`X'!G\C\iH*t;ST`V]Q)63#'JG.]Qqc@PWHjB:1SK%b>:6Z-Kr:bHL>WC=;7*i*$j?crm'c37e`mo$mqZosj/+KRaHFJlfD&Xr9c%]_`>diITcfU\@Yui`I'KT9M`:Mn:rb2oA`V,dPr<rGT_jo1_8jdd7h22CicW1d!?S5Ak\#^Ki4?cCseI2WT%HG4-+ZL,BWJVcIqB%Q-/;`rp-TjQ0LeVZC49%-@M2gJVJ&hoGY!lpFG/o/b"!EqBI*]FN1)9rL56#D>3fE,1#biip/9!YO@r/J/8;/)IidFlQ,abmdt5-%W"L"7P&"f@3@_9Lf^Q9(aWl8e+4/a&M0kGH-KhJ^ij\N[=G)$(pO*>u%CWG!B8jsDT1`)HB(Pc(1IW#A"+.m=CQa1#k2l#<Iic"q%PFllmq0DGi[-p][]J_pZJ#W!?L"BAY[A=,mj:ENM!KJMu)Co+>drms0:l19YH:T:@ca=jeV5JhA3J,?5Vm=1Iq-dNs".#O%Eg-PC%gOi62W"Aas&;6Q^MMMAeZf1Nk`!VPIII14m:EHpAKA7h(qrBgM\ChDZXS''i62gtOTp&7CPIM,E"8[XA482lHC&GJm3_*<(mfMS?%?0/m@gk?$qCNqA>;CeO0lutU+QXDTLI=4%iA[(8i.mns6[aIJa2pp7\B?dmloU-!d1co-bUOW\kj&UuM6XC],)*dG2IEsg>RBN@V%D=lgGnP#][05Q:Y=(jaMVhTK^=pe&^UOhN.-/ccLdHOaKbfjp2AuC^]r%Kt0<s`.oj2pXr^0t9DjnIPLe-u/"L6u3r,)'&JCSc[c%ccq;g5"5Sph:9&Zf[ACL/(]g#c,Z-acH'!Gj>*^)?*dcTm4E,fY_WNF>E9mG/^X=d?jq*U\9<1!1l5Ie7MV"cIn&Y/:`DIC_hieX%)<P.XG.fAkM:=H%;*upVlV(":?^0TFFt+2OGog^7(blf](ibA11"%,gTGuV)3HRX?e8a!4&Ed3]:l&aD)@-ZsLMu*I0JiLHm&V"K%5"&RR3lj7?m<W=Qj%RX<::!OG%D??nM]E!V2m")em!Z#+f:T:2"*[f6pBH-G$,K6VNe$N).Z<-&hmHN.&%,U*S6gA<E>GtBfa6S\%&#+r(7X&.(,OAbC@D<r%l\t8Ci6^*@mEt.$5K=TmFP;.fGC='CrqS9-kYL<h7D2e8?\+igeJ@hs/5=(0`5smPPg;VT`"H8Y%#g_q%+u!G5PR.m!m=Zq2c/EalcHY;V[`QeQ4,]`#,BErJld"Mg[,qE,M,W!Y1`uA0PPMFVG0X`0-#.h$FJ5$s(ZI.K?S5tNQX8[4c_&3T%ckpr'-P3+2g64F,c/`e8R,+9*TLE%:Q&sd&;MLk;E7c4SbOcf;+?tW>SN<6U;rt0@g)CRm)muAJ8gi%[)o!F&40OFg8bpnM3'F[K%[qmjR(d(R6a5pt$0gtTG5:H>.I[7hjdk".jrQmLd,7S*99%0MO7qn;oY%0t=<"T$kc;1=$;]og8ep_N'af%?>T=.77WWhGV]&dr#%O0g%LfoiF)fb(,of&Q!C*N,YkC&(3oqkW$6p*T1E?GAFEHR<+"b"d>UVj$@Zq4Klq22*Hgr,d05.l]1]J_TL][_(?UJN.A)?dI[f%4rmD\>.+7@EK8S&:A;+sYq2&dnW:5VHS9:^[cQdr13BR9<c!ujC&8T&LuTP)$bT[]FY4'X&G16r1d%n#dPg:3/F@J2ZM3onAq$#i%GF);L]!n9Z'k9oOqslq]Nnko3;t"56..WXiA3"['R%"k(Z5?)_#oqO%7.p939mcfnOe+YZ3kIrG*X^0=oV%%b&*':'FHhXPU;J3`%qko):b;\h9q"?^<7.)<,g*1pWi[DoW17n;W9=Zhq%aI/Fb;6"+p,lV\.RdH1bP*9L(T$H%7p\e&TFHPVCu3c3`+o/>Xl%Uu^EY+l%*M2]4/4=suO4&mkrlS6s-:P]BVQd(1dn?!?,d0!E:PL6`CWSc1*8VUC0aij>/Z;cKEW"a@nU0H)#sK[c=$]L"8&&oF2nif[)#&BJ%D7@K8%P'Sk/\Ts^S@cXl<qimo0*LSUjX8/"C>K`"k3Z_Y'?3Ti%[*)m,?Ga`;WM^M>UEHJQrH0]Xs2$EAlqW)G*1`]78J*7k7Meq%S3TJ]O<.,fN-_\+cu::FBDZLqpF!;feXpsJiR6OH32t(ji?Xu$]+>Fb.iueoiphjNp52CBY47K?:2*1`Su;N?gQTX]"8J^fLQ-:+%q/K0QK41\6a8K)RD8*goN0J9^MnKHJ?6rsApq$=+2=:,aSap&I)?YT\WATdJ1f:<77=kX.p<Bt(WO).]qBkTNb;`/;.Be-;D:;@-%7&d0a2ecn[*0h&hGj7GqcuWJRrSD8!1W9(_p[T_\"UL*SpD?XQrSAYKO/Wt17H7=g":j=bUJji6O3aWH(61RMIht<Jq!>1K-.Q-^%)88fMKCl(JL!#=ZM(LY=V'IGMr;QM(Y"iJ%?KTEjAdD)QK4.5F\MkZ1fh,e50imTk_E!CQ?`lRtL1$ULe@(B1<OYWo/AG/0H(_%)%UV-CC$US]"&G#()DZ'PGJ<4L46.b8>kAna%q.T2<J?)WiE@8p#c?CbX#$#P)I9r-Kh"Z7dS8J/Ab1#sp[-%2'c'C&"Q?I/[ReU#D%F0F,A?6Ou7b'<&Ji+D+:Dg$m6IS,7;Y`d)Q[i8->Q#6p2p*V-3WO54IQ4K&4D#;E`([6"p4b8[kK>L0MFpei+BaWJ0X['VVl05.p%4))H%.t%[k$8n=^m6O,CU;+(s.#Zp@A49^_L6`t/_7%)fm6_5I2`mUHG(ud,$kIoaj5-h&mU3mrV]dYYToFfP>9ha=Ggu&Wb@d\q%mI=V'Emd-WhNZcRjqM<&lV;q/kmRf!mtW8Qj5hk`_*74p40P!X*H`mM&ZTPl`UqOH#V;)P;eF'>o<$(mjMtH.Lc?nmfPdB_NXN:B%F$=K>Y>/D*;S&f'9RE]?X&$0m7Jaf_9s>hlidq=ZMkhD`JjQ4]c>D=]7K!o7Uc17OY%T`9?(kBJP`FK.gS=9oNQ6dhZEt"n[*h(\%1j14?5hhfk.*t"n-DGRNT<q+la0SkaBUfsKeSTA0(MKA[HBI`bV/\Ok+`OL@T1cQdBJ?E-qkp3aiF&(ZT8kE=O+@HP0,KOd"Y:ui%Sc`YpoCZa"rdJ#gbo7r!mu(A`.Uou^S[D^*S@aSO=Z_YPcQ@/V*K=\h?7f>,C*q@%G_pS3S5^bWn!q$rAhUKF_o]/O%p=^4Ap1U<%94u6M_4%%nYW[R$VtK,eZ`5+6s*O.lo-\,27q'(!hsro`r9s:nE=h,rF&@jC*jiaSVDhW:5gdcX664h5Y[qC]O>DM^6A9eF#V3?D%H@oQ"'S=-L?@Oq;n2Q!p!O=\#8W5B6OjAq>dM]B6QA=+Kl:q[H%s7J#\1MgVR38$g%7dU&HVA*_]qt;FD)I(HI4Aa/Cq%@[Ehh*4%kNrm2V`(*^GSs/Jc(rt;(Hj?.UgpqXYbV^GgJq!h,S"5pb%uQ?Q=OEnnaoYV$5VCPI[8,9a"eb1E"B=_aWQ#^cK\rco`Phu%[OTg%/+aWp6$`";UUN4#GLKDAj0>i=X@%g\`IqXLkArEe/UtOE,Z]X(_pcno#`0IYQ]OrO]$p>X/9:nE=(1e\dm9mn8YFZ%_*EmcDS'X=%9X@]p@6$ucX]n>^0>s;pIbGj!8?2TdPXCh]?*2nY5OA-B'UK;"A?7Gu@pd/S`9V-4p$sPM^E5heFnVR"iXY=QF6I%L*["@!T5oWl%ceW<dd?9XW(es$X6([9*i6LV?[&;9R2S7pR2#)r%i,\g*AdTol(TZFGc[/4KkEGV4gE%q$NC(RA;==XU4[.c3Ac+iHd`WFiWeI.C%FEe9R1S(ng>!9dZ9Mq)sjS((cP5&M95!9Y@^O0H3N7r3rXQsm]W9#s<k;K^S^)+>seC=Wd'Q5jghi:X`LDMt#H0o<me3<]os!Al_%Gs*^&5>)6)n!K7Ik^GE1P`L-]iuSJ4?@1-e<a<kX4(5Eeq-.saj7JCQLIZNo!'eK<:=Jd'i=nHmrUo=mYbZc5].',sDXRjdL\HG[%oM+&2QM[YNZjV8LR<^c_*NTW4o8dq\"Rgq/qt[C>3=T$"hs56(0[9q@+p#3A^&_sOetr<1oWs=*#3CDRi"Ur0BJ;4QMuugrd-cmU%^=,!ee:uAj?m^,/#XKX5.<h\A5c'iO_Q9;*n+:F!lp<^#'*+0pMrX'D+X#6@[Vqd8M&4?%QlI_FcdO',Ce:G]"LpUdI%MI/f1UTD%MTW7V@U;MSCN=@_g?l&0Wb4KLgj[cm'X1eL%s)>u)()0*NT"dX/r7XZInj<_hDB\r@[#_4&W#L8Qes6*f=;50Dm]6G$5%5m&N.a7%^tc&PeoNl4M9>bAicKcGolrG5G)f)1P;GXIr]jk"r4(=Whmke`m)8MA_;m'6O:h)s4tKD"39*[Mk8)td]_ZJ)HC['kgu6:icU-5:%Q6As8>,RV+GYWN;'#Dk=-hs3mT<]aO(Zp#69:.<f6d4jt%u5(hF2-AtlcS^4TcLY1.R!-M%$5[:QJ>ZF<qEB$T$67hV!jp#l\eG8%5uoZ"Q9A%t1@$KjlV&e5Fqs`#L[E2Lqe\ADQ5Ni!T2mKNfp.78ZJGWtEi0\dLP$)T06:l25RG`:-n+?bB,5U"m*:I8P&p&:_c>n1%ehX$;RJVoF8q&8ogLP!8G,t&>O:Io9)M3[`iSJj^?F[,hMCn;VF>'3_iU`gP/&"D_Z3.smIsJ*ble^kL\@3dKBP]S!d649mH>$<P%C#rArn_Bu5aO,/P3k2A395Vad;WH0o&At/G8gB[Mi2'O/pTOo.Lb/G`$(s!nb[jfr%UPLlen8lLn(\8-S1rH=14StBrS^,=)_(=b%57G;Oo')4-htd9>B=HV[gisN\qII?aJ+V[[psuL^59@63ET>bcoj56crb(ljQd+`X>PGm\E:7fA`N=dmIeNR9B\J;I:&hKO;doHX%kD^Fq1g]#-rd"P;c]s"9^N8FWI"2'ZJ$ZM+s7X8n7agMJV"X)sD[u3m$.J)1hVEOL7]#\/X#!ZpFT2gA`JrI*XnY*k-B2A]WeLK+%^JR-3*fR-1T21J3^DD;RD)K1[IUDuKs4R.C]uH3/k]#Kgs,</:pq(Hnr,;6s^%1"TPNLWUqW\!Mf<(\5h\oQk5&]6/S$oI_kT6#_%Lfpk[J\>tArUbMCleh12E9jHG4K0FCs%tT=ptr!/N]Qt.rgb]+qjth/PfNHh?i<*?GG"lgGh@H>O4q>Dje()dqk"96LEG7+Bk]6r%jkAmgAk.>lXaV8(]R?]h(OZ()mHY_kqttpAZYs(@FS`1fh`^hspi`RaIZ<fBT/Vf@Nd56uh/(-,hEV$aX7u4\DQU\J`Fo(Cci6)/%*^'Jp=2b.8rS*BnK@4(Jqn&Kg<sP;B:-QGiq"Du-jM,ncEI;hT'N@SnL[+K_\!.i:ds*_K%bMPHQH%ee?M@L(I^9LLWug03[XTO(%p#Dqt9YnISp?pNShYH70k)Dci@9jrR(k$EXXq-$]r6BNB+)gt1TDV*phAbe^62.+'I=b,_A+Y3AblIQ]YP.g=Zu8D)]C(6JIer,F%j(A26VlbGrrgseJ'&a'[djW_A[-&J/^P<uGs863hNdZ-7qrUu8]RHXO59A&K\,R"-pBU0YHhWsfr5KPVmb2Zp^O,-epQr(5VNl6/%_g"slg<KbZC6'>95@k,!CNlCZUGO6`r^X*\P#r/TNA&045LD-TlANY8T/VdJIe@K_h>Zc5[HR,7Dsi#+G^6Lhij^eD55f-WEV5#-%_!5"]TDncqo]c@Qq8<6HQoZ"feBWm7c`a[k9YW@Z;ASWV_oC*qAs`9!_mZauId`KTht%36aJHT49D/+)[IArAXo"m@n[IJZa5;A4%.qEa?'Z&f-lc/+q@Ij"P.q]17o3M.0$]@B;p25A/GC$CAkc:0H8Df#+&%isEF"]QohS9"uo)G^C*_iME=ZNsS3PN\Rs"O9S_Hqa5%qmFkQcLYcH/4j't5!?Sc5E;?6Vg7L^q,\d]NGa"*e%<(0,0UP;N.VAcQ]DhPgR\<C[89f:W\bdr'";$<GsT^H?VeD955Db_\5bb>%A3BP8@CK8*T)>(:kCPR9;!UVq^X'o[-3nbp;u?.)-[4`m..%$Nl'',>f6\r?p!"Ma0S+FilhfXDD!0Pqi8'C7K@BjEQmA<]%_nUq%aR+cCiDI9ImR:e@pO@SU?iT3GQPif4dp&H9J0mLmNoKa,o=L(_o113Voj=q5!IVJ&n?3(\QedkjoD^sgh!Ek1f&?^j55R+8^3Dbf%FoT&i&)44`q<!I\hOW!+k'nC5:7F1s?i-s$UK]suRST,ZkOl$NaonL_rAGVW:Oi</!6jKZc`5=fVuOoKqkj<<R(ptapt>2P.b1a%%rHqGqbF*>Fr8mknnY]1J#J[uL1G7]pT/M_0TD^n4".lo(0<bE9R)f8s4%MZ6o\nT'G4kCsf/'!FfDAq56lui,2dUUo!Z/WI*YeL,%Isuk8DA:Hqe`SmZ&*gjb2dI]r+5#XCj/]Atgi)"_lKe'kddl[1")e+tnbp.)s,gC![JDW,chPKPa/@npmga9U:VV;T$m]!3p!U`^%?`4pql<iJ]HdUd%mJd?^ro9V&FnkR;2>Y,'rm.5&l9YC,%TlBfF)SMID>Fp857OW:p022JlguWMKFdL^-?oETs#FrS#IR\&2kIVf%C@hN:n=[.DP>u6-W$,d1j>rkQ[cp!SRQ_i^#ULJZ5#TpA$kY.[7?G8Yd-1:VrtKs2is<rh^uWA)<TMtoN:=AL?'FG.5\Y-co!aJ?%\NW>4nb<SO_,%g2>/"s^gi8jd''eD;&UE@Wd7U%s?[nJ-@\b!&Q>s_b(17$P1mMRfI3R,lGKh:\O4[7q(<h.:qgM6FBC.6%o>i/E%DV2S>8nOBa5?hinC.9[oI?B*,BIZ(OFX4U?"nsbrZTje7dbK5g8m5knj?)f]@ucKA(9N,;QZ^k%@namo*6T4$@.^dAHIeG[=iUra%pVX)FKlO-`//so=b='rR4O92\NaO+TF'=t@"o<gK1oi;((8u:4o0$`rmbu@p/As;[bq3bOLO2:E'.W?SA'A?IV`?@BMhjGS!R9sX%QsY*$'$!U6o0$gLh)T?d?B0ri8pg1sS8`;F0!I3Y]AggWj:HKM:AC=\L`LQCSA1AXG\&;J8Kb"^s%hBNY,B]alWsVd0I%hS#dd60%J/E9Mc]krAIJ0:]m:X),Wg.I8!pa"82cgjP>rl5j;@t[N:I7Y-3iG0&r;<Hc[DSPbRGW;b]gc3(g076WcgMmU]enkNol2FqF@k\4%(9EU,pq<4G9Q"*am>]@b.U*"OqSCRbVb)gXLU=UR;AM2h_saj1-?Mc+InG8t9Y7L>A1t);=JM[;(Jdth=aT_8fpLA5LKE.;Mb^4h%p6kN`Wn@"7nq0eDRsd5i]e!FFcgSO5ma(?NXZY3.c"\D4S^Z&c`giNJo5)"/@UT(j%TZ@!hWHg6(Ue_Ap,TE0atVNG:kGH`%I&34%jR)rl]R@6";d92;]1QgIhHW6OR9r&25*=mZcTa%1DVfk6]t7u1d(W3(cRQZn<bZK`AMr8iP\ol]hlkQO[QfW?=9!0/P1<H[?PMX_%Xppu2[m`)UU&f_ke8fj!i&I1_Ct/G)?7u6UB2p<$T(B_=]GOR]9kLPEHfsf3_]'-9;e\\e5+RJ[8N,+.f&cIN2!e,b3ms5hB@qKA%SMfOk@qKJja,@:n.A;B2IHHFZjNZ)k5GdDZlJJ#o$+X-bFc)Q<O+d4l7c9&X/DJ`200XNY'>;2*dhFbpOY\hY1n/An7c8PW!*dWB%#D)C[28.#O'))Xr52NIpdY.$\NN:5?\$gBp5:eo4l^FP")=-g)[g.e'8N*<pl.'tE@DB0;XL1oXVK>lU'Zc:9E(a7dY)B9Aa+1Ii%FCdB`cGtYXop>+t/akkb]_bXhiTdCPh_nOP[^YC40#u9WSf^H!50hJmDsSN%C;i:';1S)<,DuHpIC#b,f5BFH(Id-@URaLW/cIaL%Qmg31?!_geKC]H;?Y,45jN$p+=]S`;!S'r\d<2_`W(dd*%t$U#13*'dUd0lT@'reYSP=RZ^uX(\HgTK2gpbFLC%gK]4dYn(fX'`f%f8^*XHN,c4D0p>QGNnN;mE>-W2Rbp/#(&%0pt"kaEY%0Gm%;UBhI:\u==WuaED6o/IDXb1VV]NkmZ1C85"a(I)Ou3MhYK1G[srg"%*DARENO(X97^G5FF6C(5aF.g94s]*FY`Vrc9qQmPNA:BTVHuEIJ2->c\]!]5ZfXbm2obf6N.,!12`)(Bn*e^pEU.>E;);"Td`h7W%=O:A,n$SP!aV&?s)5>uAk2d\'4]fC6Q(>PW\VZ;qO1p,gD;6%G]IZ\$/>:trg\^<o>4lQLc9m01qs'gNM^tmlV]=PkD-Cu,_eBd9%?<_[2S1u7'a+gk'q5p:96LS=V94QO?87DVkI'.g2%1g-6Eta>tIjZ>(Dgp#,*&[;\`WX<tXqUPajn2UKfNRFG"3HPY(N1dWqQ9R9%907AR=hB1<CpH*1%5j+g^pMhLhYLX,]m]D"g`o*D4']O"?I!<sHaSWTq/uX_hOL'"Xl""Z'a&S-QOep$olpCt=K4GrIo\K<k4b<c%+@C@cFmr=`\W:b)H[]b.H9Uln_Khe;59(%]2aS?U<s`6&A+7=+SaA?g-i[-JrCA]"RJ1@JjPL&\n$BLt_#s&SpUkS=p:I%O+-\(1%2VHb&INNJB?JT)W!SLp@bnVgD_O%GCo#CIAe$JU1)"Vu]btMppcV;-aC?sBdn(H"[lWEKgQH8$O-LU;>hHS_p)6YLWa_52ShKk^L%X'Mb6:X5&sB]]!'Etb%t:D.^oLPb%&@5<UnVJhMjM.gYio/h;?mifA>p+l9Npih&_F)I_7^U@aVUSYqh`Ih<#4-UR:p%S0e[W9!d%[9sth?XXCEDZ%K#!!s0I]2;\$D7[o'NA%76bAF<lU9.R^CW#`S[GO@7L->'-=X8^bmoXs!eVF$'T\Sd2EB&FSlmA:<IT&CTMe_*X%ABs&Qn8@9,BOmIl=$!Bhr;4':(NA\d/q)8g(<-[plQuLOIW'.8+G))L.j!jiYHsEh,">Kb%I`I_$A'f>2&>B$8O].R3GR'dH`$89%'k;A.kNdK1A9[4GCKrGRdkhl*UmLik#_HiZ9#^=ent*%V:$Z=9bs'EIc+G&L4M<-f#n>ZW,*.2T/f;W]qodH$`b91kaYT2s?DsEK%a$Sm(iTY>nK8blfCRFCg\QA'MUu<e.c$?$jI>CRM'/sT66?NJj)TCa=YPGS9oe+bYo\.;jmI&XZ8&eOOWNl9o45di9?H-?Urg4j4%on,bdiKcB.s4&1GeYh-Gf\a?r]_\"1bWicLZ8Xh!0-!KQfN>5He^i<KW^9S3[Wb=/CXgmi6=XJRB@,D[_ZFiW]rEsGR%INcno&,W%jn^F`_LJ/cMR5G-45cs#g=j^-@Z5]3b26FDNB-+d&q9hnQ^c"1=BQp`Fs#VO)GuND7:\CDKUUH3$:SB.g3`OI(HS)0-h,4!7UbD(%hYhN(1"<.=Xco%"aM/V2>Rp4Pcfkfb7R2l0%ALT='oPGXoChV!i]R1K4?#-(.44\==%8M6WB[.Zl?Y'K-4N,`)hj"EHK"JX*/m:F%0:)0352eXI_Atj9l".?7TG8RB\:Io.HE3gAG;,H:k$S.)NeK'_G*L]%m6e71lGl(`3=(8NdV@CG94ponV/qDGk4(P*nlN/;::i_L%bc6I-&R0>B[E@X(W=[A#=Cn4n``TK^OW%ckacr0>i`P[1]mG)K,G<WQIX%_u(W<E+Qn/ap)";O=c+<#m6_glojG#U]EHV.p#S3Nh%GAl=ZKY=<eK>/4o#G$>f9keM@9i>@A?auFiIHoOXgtph\h;A1ff3/?8q,(@Arqf8rCZ1]$pgc7bf(3dj#-^*B[BmAlf,RE"(O/J5%S\fARX1.bkfB)NjbR34])`^$a?XKoD/j,Ii&d5SFHd$@Id6@T<62R5`*c!;pG:bV)5^Bl89jA`d-`)0$,K)_EI>f4)7_[dJ(Q@ed%Z8TeLAriZ&Cuq"T$dS(T;l0K#nF,8c>]&S?ql@//-o;Kh?4gVXq5<Ok<fQBO,:`k&c\]fFVo-G0=K0;h%,CsQb4F@tQR!_mT@GVW%?N'k$<_f!YOotfb-b"F9)](HjNN3HS))t*mn)lHrKMcI[INc^H`Cf3Va&<T\7to[7aP2gL[IuK6\9t;U6SJJQ.0$1#p`-Uf/kW_]%`g'a%75)C=U_4Nro>^"XX/d;E<TfpLcS&gGO@m!&I5L\$4;t<'Xe*;Zm\_ZA,9(f;OFVe),N`uH[3fcL8,-;O@bJJ=ah1e`DHqX]%O#Q2jn+YsgSmL<lB]rUL?6[A>M7n-/r;s,_9q;6mBap4R3;[L9]T:Shg,*]DFRg<4cb_g4,oN%^D/>?QT<ec<SBc\j0&!p]Y>\)4%_\_@lfW3X`m<WSaiFuQQ><4f*HDs&DIk:f+^[TgGJ,_e9bUAB;WGrnQ>LpFOmLiIND*WVWcTC0P5tJ9Gp`UJ>@K,BNpLb&*:-t7C%g.S6pKDAgEig[CO(uD%Tn*!^*hmg.6n+#]5g:<8cs-be9kJN+&'!$D&8GqC?q4(N`2Vpb1<*lY[dAah5f\bsG=\3B:o1jQ7m>_$T%q*>q#01"#ehV0#A(3Mt1L"lFJ[H20,ifE,YE5pTQXPY)VT2&]7P%IUos2tM.h:KF7Mk`N66LqOuIV%nbT)KCJ\(>GdV7,2.ISIQ-%DlobEY[/m[[9ltC9C1i%87[%11r].-kYf,LHr;%NG(,YGY)e?]h^:GMII2?(qQ+jI+Jq)o7f2d])4R51R<Si]TDq%q$6`S<\e%3H%rh%Z.d'jhkbh\91<h:';k?mBo_Tm$JRhhOiXV8dud/5+PD[VsXU\3C1_7u)QB)Q>FD?d'QOe,>g;H9%AdMdTM%TJ%jF,/MH&U)dT%^-it7'-oO9Q02Ld#IYOPKl[^AE)p0`GYg`EPAOZ59Wi1amoU5nq_p?uqo7^>kP<Y+Skr-2AZNslW";D9/;e*#Tt+>?6g'lC]hJ1+%<*q;h7!GI_]8l0c1X":trlEiu]3dcCG(1T_d(#ANdZhgT\e*Of1rfQbnT,F&Ue:X?jQ`Gb?St$:/h$6Ndo?2PpZ-b\^o9En_hIYI%`R_fURof-"r"-#M]90Zt0+DsrqEO`?hbRU/hk'9!UNrSoi^WJr_efPlFH`h@R_a,[dG$L>F=D+\5dmN`/B<U_@7XkmASK/sZH7p:%W@HHHHAN?.0-,OV`mj^8mQ]@ts5F9IqX!(j!a-U<O39mPe(:DA+4'^X[F4]-ok0qr02E+;=%@ITq16u<j4$>6j2;rds7o<KXr]%p%V=08sJb&Y7D.$UOf9GRmEIk_\#8W6P`i&O@:4oT1Otq5=UG"U<6_s7"_WamU`PGJaq=8thQiHiJRD,(B^MU'tXgt&[cLTInV=Ak@%*7R3u:6aI(j*7a^4[4@qNm6<3Z57q6]<jO][R:!NXgI>M$!$Vp958))9?keDO3,^2lD2(e</k0<NF6:h:?1Y*]6J`D;=6nQmWgU%%p>]ERS>*H_n']G.^^*`+pSIRcWI?m$L@[V)O+&]EdFZFHBW#JbkNcd8adk';(ZrZY74#4fMr>+C1Lo5FSQ^NpQL`.g:(7n$51TR$%Ei3.,R5(X7N!5d7nj0aWUZM1=PYTIfL$R.HH?,q'nWD6r`mteb*GjM6ABGH"gdmm7db$X_V0$G]jgTErkL2K*;O3&4p4H+#<S?ha%Bmaf?jed'_\A2bWXtA>kf'$d`H1f:_V`X=2E:KeHh:#lNjE#0\"5O_sGI;I+9Wp+8W)M`a"dL^;)QB9r:RcuD6)O`1Mf,^_/k5C:%.@iA7Xd;mX:[I^pr`i7bFI?1rp%8#:H*1(uL!NVCj<LYQO7+SV?S'EmSgSZ\1u.q$cmeW#h::K?K9+.8:6":TV/a5^P;q%-`ogn3%Z$NXDe1$e@9BGW%PdssbU\DOd2H+3K;#U0:gDWPZ@kGm9h&)Whk6BM:;u8/5O3b4J0-&/1O2hX5:9E@7j+6F$IeMEMbk,F@BqEo#%UeZ",cb\`;:]#-FgZ!,2SZ\$%r(ZR#mdY=;5,H`WU9Zk#s2gf5a'oFh2L`)XG@1>Alu_uBFu$JSNO.`sKqqJ[q2Nilj^@`%8R12i%k0Wkjn!cBdZ."?&qO6.&r_dn'M*&uD'BZm'*5(NW.@na"%k\?qjqBg>S@oe5lBHNK]"PbHs#NhVi%m_\hqT_/GIk'Tqqk7fC+QX=%o<6:pG7+/o3nNPsd`>9hV[_a.qgBs)e'5G_a6ENb@]WMnKtFJe)n/]\fNB7TgeaH6e*FiRV'sa8IXE6/)X+QX68Y0!PJrIKk=_Pl%]92?=pft#BG(sS+O7$+DdYoU?)^]d/NQr6(URbFL5(BaGU!rP);sHe,Lh:5VCrg?fVfSI^XRPT,'qNVclK-[h%a6ji7n'?=?PBK&%jXone-C:W3W>Fj.g<'cseT&2]nrGhKI)e>IpcD]ESPF!&U,-*3?c\:%EMr["I^@.eU),Q9U!lg/k&_!%.P2%@iJn<fI;Q/aVcjIP%rg:HGfe;I[WT9rb%e8W?rT;dJiq)X)JLP0lXRqeKFEC!crnJDaH:g9G-kGATL22%&`*nsM?7`]CXQ"L5g'fV6H1OF,daONnHh2X<%N'6iXJ,/ER;.iYjjKDWS#3IfSle<ja^F%Q5<eil&T<9X+\U:__1;?bZ>F-:M1Z+rV:Y-Yr-L?BT`2Co#M<[Z1XdlV)9kDu7bOO/]%f#[j`Bmh>iku?VLEU%Kqp=*HSk/,d0nAjF?PcpFsQ]'GO=n:&7q8U26U0^NB]!4U8q;:@H]p/*ckhi`G=k-EA5/4jm5MeKD:QNi2%XI\ZsnSQ.#SWB?<f\QDsjnjVL%hkO@+)02VA\4)5@eWA3NN^1CqrFq&Pk.,7s&K=;TB6Znmg][,)m`+35<bqt[rZhCDS&`\o1J=i%D..!sHf5i<>F<dXr8mP5_"hXqn`feu6t%W22/pN1>?6]S:D_(6%`b`)Y@l^L;fBChpVomA`a'Yba4s<j^=lc_9f"lQ1^dM'"(Q,1%l9MngF#Zu[\0/ESnnrB=E*E1Z?X'a!(C.t3/kHj?HF1Y(1XiOg1n*5\mP!e7]'d4iOu[j\c,L5t8InaK[mS]\dl0_Dn-82hmSos/%o4(T9S_b9O`m4'h=9QqYl!XOlcbe>F);]WIbPcCh7e&%Ce%s&CG\X-KA&6kml-pUq/*TKp]F;B2FF&>^VUM@B1VM86V2o-$;]XR\%W*<n[khZ)!o/^0'MD"CD\5Qm]34uoYF$$'jmm]d$Jki;3af#)sT\J*#"5D[q4#N%ZdlSRdr)P"@)=<`,LQkQURO$YH-EYb_e4u]s%0.@R6F(L=V[8Z96qe=5X%QY?Y7<G[_,I(NSbG8omp\^B5LlLl89^cg.h8a1njitWdl%'93I=,Bck!Ro*F8!0+e`pt0FQr+3TsX=c%\KS2Lr`Y!S\&&O5XfP=g9:J#M`p743c`@b"hlqS9G,8'm$.IAS#dMFtdmZ:bl^\1tkeuf2>N'HQmPUa,(TMuQCO,h6jEE9nF)sok%%uobZVN*8+CZ$LE1_Ht*R@/@boFGr]5i7lfXO,-p,OaJ>Ek9!RJqgA.Re])G"([3))KKAXrX<P<R2^Q7["+im?eXD3T-KG&hdbF`%dnBP15%B5&%B92JBVN`NM"MJ])K$id'mc9aZ*F,eGNVEXIs/[eH,BJke[9#;r,VW&%/HO]UKZ(U#5b=E*pg"Qg;!3i`#%&n^p2H.%dV(#Kg+QM#rEDU6@X!a\VQkbqAC'?nTR3nFb/<H?;-(mJnB,+C0P8"uf>FB,?*/M.\lSu-mWmo45238fY2*R+=O2!_--gi%B8^]e%%fG!M=\g[-EAoN8CAn'Oa_sLA?GNDF&ZM!@;J#fCo;h8'R(&FPcY;%rg9PmE=O:hTCce1;MlBY(LF:]B>tln#`PbZH%<Z"B&OAcu%"&\Ki0DC*%KlJY!X5XE2.[c8;Qf"NHU;MX^3)':P<f(c4T*urhY2!qq7\[J?Gai<2cJEhLI"1_5(?T&"E0;QE[sb&$LG69gVQn+_%BnjWjRj+kjpg@`P[+@:n>n8jN1XKESWae`:DYPl]lt*_6(B;Ih;I>U7i^P"`g.l<Rd1+&ZOpeQ/3rq:C#M7L*go13t/PX:*`L&dX%Sh`(g?!B:.=-G"7?77(4@IYq+`0+^RS[[7;d+A.:D0]u!f!>L-ChpD?,+(FUN"K=->DdIOOBBZe]A2:6kIZ*..@KmDn2CI:(CTi8%FrZZ,fLAmGj2mtB;1F(MdY9S+Bg:nnVQ+a$a^0FW[ak0u44m-$bJ&HJ^8TIC9^\a^]@#qjqf1`g=W?[;GI/;j,UUfrV;ZgrP74h0%5-.kNe+U:\;3'6#MFl-[6o8c>k]f4)\1WD5lJ66r_-#C:O7@VBFPn,^Kf5?[rE`6!YB0LT"Zojg=H6VF4](8/AaTDB@BBo)=[[=8%GOfN-+0:I/`4KBIlt.?ANRTOa<bH.43NF)BAM,d2!E2OaQOMWucGYVM6tf2L6g;MmZ4&"]>Q/;13g%*7&C3fm9raR/U)&bANUCV'%&^p;WglWS>WsK9!mt>!$L"]UP*MbYP<^_UbW=/E^66Kfn%AjUaQg\Zc5@aaXNeL$lhb'LX!6oGX>C/SWI^9^Blg:$$QZ:Dg?\,AA%ae'0mjMS\qmJQR:g)m+7JijOR)h`TQn*<ZRaoAIk&*i(m#5l\fhSIoI<YA1cH_cp[`A2dBXLBn,\=3DS&NKQQ])%u6lL+"E>)a2?%RYR]007icViV'$<e_aRn,l7!5*!MmliX@HmeNeWY0Y)Nh#rPT$lJ;O(:DQ9t/RnM\mZ$C0jo4lA0UGT*8S"C=l?<FS?*8gH:*4Z:%NN<MO\h)iCJraes+DLfn>+IL"9b`dYHo'brLoSlo9ie!goNGLbN\5c5T0\m2HSD]foY\*.oJ&(loU&T*9fTG%Dei3)W(1^0Xp!_%%Fs#pZ/M7-TJEIU#"8l-:.t?iDen=aKHA2afg10t_9^)G2!PGO30/7bHZ\<,^/BkMZ\eJEcX(-?$LO<B.k[RIe="KT1q&;/kUYYWc%f:M9%QqU2`kP,1Mn)LZ5[mWZkqQ%tF2%.)'*,G"]7:Srn4F*(bf\C\3\B;G77c]84I%B#K)NnBb-A[M"4$?Lb[rN8YfnXfm2sk]9%pHnS&6=\CK@95cP&g(Y@]_`=#.08a9KRr1)0nJq+`s]nU(A(1ZnYIZH7sc,?18KB]nk&PccdB`F38/iU*%fE&6F>,FNqW8cO&foF%i"I#%&,LOV11LFnNG6(A8rI4(lji_]qtir)m0C#5h`XJ&nm-2r]lURZrkr-RS]fO0fpm*_[9mM;aea<l2Bs/!WME_EOjIOBNoKAj%E[[\n!7-VCP.IqG5%MaF3]]ehUpGj;BfhNGXRC`/Nm1I3h(W!/rDY\%r76;i6_'Mc7c021^1RTQ.0l\c*2[4-ECI%2d;\onBW(#-%#]:qc'5WZ@GAJXtE`,p.`+T32etq!%SLc<bhaLK_*ql>c8!*B0SRl5J(*>*/%Kal;A"BG>23u4/9U1;DbCUYug#oY34*3^B]+d?n%hPHJc`=@7Bmj"r*=kJoP4&")kP?Q)i41:>E)Rbud*f%9I>h=:aL+uhePji]9$Y:tC\M$0>8&FVRP%7uD/&TJ-5oN4m/jSI.82Wm^%9?C/dhI?RrTn>h&6.>LO1,YAS+>[]Be<JY.X3d0a7T\q&T62Lb[nO2cN\]%.]BC]+!rQQ#O,#/h^2l>@Hq;@I.PNjbH,Tnb,sa(&%Vi%<MIr_Ps](p/PUnqV)V;(mfnQbptV9D20A;MrZ4gqhZZDP8d;H*%(d1Y0"Y+djglmjk)G?hC(roCH-5]eB)acZ5M[Z.,^(lOYo%S)dej#\9l+S>^$:<'.R.)rgE7ZLe/$$A1kV:ZsHZ2G7IkfH)I@q6u:)\E:T:1Ob`k6'odhVhV@&"^Od?cjspUg/lW-la?I*](Qk\%mA^?%WM+*75o6X=r-8`Wq[0o>^-=Jsm47C0eUg#gTke"$Qco-$L9>q.*G9TgTn]`KHX-O!LDmbt'm*k;>V@sVm47Cr51[9!/t.ll%?=EPnUi!TcJPWHPRX=L<884[PXc\Z>M;-K<KadWP+g%rgbhB1]%N1tn4h\3t>M\A'VoSS@7aj0<\lu#_.\#!_Za#J.@&49,P\?#Z%9k3:VkJnKWkK:@%o;cu-Qct@/$g)OP;L7G7#<,bS+gmW[_)p@^d9JS9F'K3;FX4Go])nub;F(HQV^6t#eGBoK'=jlp`C/NVXf^mV%BAIY\G)Ks!G39_7j@cZtA$=N:3G]A<OuaAjr?rC+at7=9g;J-OVJ/OV"AS^B$psB+fiU'7Mept@;D_k3LtUhqQ&cf.f(Iruq\4gI%d@6&a@G%lZNRT0$Y"DB!*FIA1`m2#@,:Sp!d`:@MZd+TK;QH;JDCMQ8k[tL.7jl!S5H,!KEtqU=^eVYuWtX==n[1Tm+EO.1h,8!B%EB*,2E*B*)VTjM5Y,2W,N@LL[JYtf1kJ6t!QYHKTiD)E&?.ADXZp/>6W/E^NN\rQUa:P?0Q&Y1FoEV^Sa@CPf8iM_uV+Qe!G1OKE%l"\2c6Qo`2;KB.:Y#s3DCO`]:3do8#`q6MX)A'ZM3u0MB;GZsi[],UOF,RC0!eunBq7*>[Il^F#fBdG\,:8brfP>Ko[P@JRcA9g_%NX&(#B`_jJM,m:%H4>$YAPL%<E^/?Qf#UCnc')JnesZ4n01U>E0o#D$M\/!OU!n%hdp/3n+*lk<G*5R\eBU9s.T&?LV,LBqW#08R%lf2"A]QE2BBJGc79rVu\>QWMKYD>g)JKO,d1o,M"[tV#HV689K+Y1+30=)VBFVn*/Fc&\/U+"r"fO[C#:6fgu6]0D=UR\G:O%c#d%l.nq9Fqo2R4>NJ5dk_]W[2Dm?m#G4koeY`md>-Pe%Q7T.O3F]:2V<ABg1ghQN$%*G?oC-Np>V3khDLt/NV5QD"HQ6<h3#AZXa?+&%6FEK`rmM#/n6WM%V#IGZY8`NrMOtsudj`a0@rW!\NKjg6ZXl_PICBoZ:M^P`c5Y*(/AJ=[UF'u(?YuDiON#QX?F[EB3-BI\8XZn^%M4CCND7\AJP$C\p]WGa;?0GBS(/%q(Wtt&$=4^_1@q(2X>1S)7p2tM/N,)WHgc7ZRMsJe%W=!-U[T#ETH"]%#[SF%nqi!'Lk].]i%pZtC5SB-KMi"kdl*ptE=O*+e?Q^e68ms;L81/p']_fa$sm8H.foAlJlYZ!\iiea>-q11c4LPoe4H/ZO;f#&f(4,V&S>S!1[P^ksI%_hIe1SC6$PHFO)^/1%A":WcH8FKp.s7XG9\S.cc%@Q7Z&b`WXmOsTWSg>DA4]H0`p@jYa,G1pL3B9)JUSXAs&c"MKQN8*U)`a6%#%C,[O'^j"pSqe[?_nU+t@qeaG/+d@`p[e>D7&L-jcs%0Bcl:XRqk#\^0L#-V3+J!ONpfK!`f$BA+:ehqX`bE-`5_d<tI5qb(gM'04%frS7mV["sc[mEL8j&n=8Sb./QnnD:,C"?rKHGiLTe'Ps+[@Gg()4"_q/AO<Hdd7J.:dsYX5:TRWhYUE;8r`MI,5(<9%i))/T\5B`%eEasDEr/nC<MWMS4n6cn]i_.1766GUd<t5f+uT6Pcs`+t3NnJMUs5U4h'O#u7%K0$\V1G>$6;#KRpSgS_PQh.^6ZW%+7#<A':n1p%9&\4lV8&jG4o$ZcQbmlX=8oQ@/p7HHji;kI'J@e6d.^GJ2#gZIqi'TK(01u.5IjMI;`$e7]+a/`qUffF%TGg3RHHbOJ+d7S#;R3U%*^nk;%Wh4Z4_2(7i'OdhIBc\p'Z+RJ\pu9F(*?hlQOLjXYp!\sLlcg;5s.[Kd'gGA/eOX;eW2B)Zl`$bm+P%k@!AdM[Eu")>YJL"%n'rK0>^g[d\p@Ht\mO9qc'EPIVI-N!(B(YJ7;n2=2NH'$GM;9)?qoj<m-Y>YP7J:`h)8l_[9+j0iCK\Elo&s)]G5Ts77t@--5KC<%du)tA;QJ)^1S<Bu_N(hM:?g7H_PPuLBuOs1.dZ$aoM0D.G&!qb<;UlC/QOT0@2CG;gG605VpQ,2^1uBj1g]O'$Sn@&.dW+'RgQdD%`cWT8;l-`W[?]/hmc2J0)mu`R@^jO(`GWRoHDaEj6RP0t/bees2ug$fVffT"ApH>d%T5A75$"lU2kmoF/.O6#rfXbDI?.*(1VK\>%.^A^N]u8f-Y/VgN1UL8QGl=WIU6F_eCr@(9^e,M>&?(NSEpc#dgr;3R>#qsHN=j\r,WK?cm?s!*WmT"d?gWmeDooO^+4ObTI+%_6%*kq=$\!uHAmZC.);l-C]jLY!#[2aMdj(cZe>[HZ6Nd*CaYO*WV*V0('FGX8fr)2s2bF#?bEC_,=)T]ST),_n.B;tk-rj_=eo%N?@%r1nGdC_tH@o(7*4:%qRN9R#$/8TmAWL$Met>uE7[o(auQ<7</h";C!qa(i2]>.Pb)+1hegVe4Z_\=,%Y/FhHZ5#p&X2:_5MOKPYK%P)T6R'"OKH\th;[865G`RP(S*/f#>h6T&/4T-\e9>X,7QP'lYJp"HTa\i/_Vos'r<WKo0*45,a1\g3uo]AM4T\tgLg:H%XSRP&=S%EqulfdgXcK8c+jA%FnB7?#*@ZmhGae2-me2g!=EEY#ao0eT@ofi@MBc=4@+i`O`+I9<tdBIBTM@C4L*#qcZ^\e3L2*eT=C1P*R*_%Su_+=C?aa/C[]eq8`aI0a@JOql&ofGiprr?C:^4[Ltn<HQYO)?Q!Aa9VG!qcCNCS)mfq]dU%Z;,@-i?Ih]5[TN!3YmZ#rjPRj2.r%;eBnj[#9Cj=-kb>[bA]]m]1-(?"@0;N]5]^OORX6Gb+V%#/qc*$IleA!eo.(kN"q:%Oi&AaE5%!=88":,a$ofP+eI2lT-=<;RGI<%D:[r8/+l@]\Y9j:6L=Mn2(B4Od]D2Jk!DrsrM$nVC=\QO\Vm&#Pt`RnrgLH@%^VTI5+M;7]/GpZfa?t!SI+.:5?V<7fAhNb^M1Z5%/T/[Lc!;*GibJ5>rM4`RgK\ieV,h<8h)0C_m9;Mp^o:W`I<N@^PVhR+cFJ7*lW]q!m)4(Ein)I)8i3r46I3&%Dekb]0aL#BgsP1L%\dm=,FN2WaREscG6Fr2f^U[#QL?V8L=f]uT0NMPDaOX6pIrS0-El/[aaOY[3XliYLQ[C\j>.b+%C6]lGW"@:0g?i6*e8@LWTlr5(%6Zkq9hKmI>HlX[YM`lh^\<YS(^iT>>gA./XMc`R+:9PAQXi,I.>,?3$bV!e7F(&pT)qa2)[JgcW+j.>7R;O[SZ_%S\`YQ>#ddY\-%IPdp5ap\g&Y10<GG<ZjIape$X[S\6AXVKk6e-(\:daZ)G:X,Timn._@F&QE&DD6aFls%Hk_/!d/6T;CPq3^E@U!ApaP@M;+'8ruj%'`TRbc0]USc^Ag7<Qbun5FkgPT#<67ie\7<qa-#i,J;C:```]e7c-:.VIUsiSo2%Gl78(e\GHjU[bPiro6[OM\`']N2U6O%oqV)_%<pJ..GoasRo1aLYWCojqj0%]N,p)I0;O<X0U<0QV\Ee+kCUquNebOs3XJ_L38Yn(o>r#\1h0R=P=F32UfqB0>QbBWsHLN9/AWX_6%NDr+8Ts47W4fQ$+gN0Mc45G4hP0SlVG5>$;McRJYVtRQ$kB>;"KaXg0K[,6E/Rpj.WkLWIU>M\BdAu8O!Z<'Pm+2U#qj)]89LK?2%:rIJO&[Sm>;QO@G;bKP]2R>QR0<'^';:!?d+f[ZIjJL4#`,teeZe^+K=/+%tCCub[Vf40HU(og^B?XX1L8#m"P-p5tP@D%()365$%k[h$I6'c%\%$+=%6dE=-[`3IKkYLJ8%>e`KM\FfC/&F?779Lin@`@>N2#bjQN2@5YP<[H'>4OU5"rH"M/_KrCO#N[^nhO3.GNNSZ%D,6OV<B[glE=JjJWAZBLPPXmnbjH935%`?X.+-e=[?#D)g.C=LYBEhDR%%Hkp/VtG.^t=o$e7,1EULPdJg^R4*M2mU`U70hIsX4N%We\dZ;4Mg`k+]KTM6/H]7I&i(PII#q7<mseZ2E+eCR?J>$b"K!s#pZ,GLb2<Q,_[tG#G6K]XW_K>U:0SoW$_)GN3S>dqG$!a6,kT%1ZZ0(?Z]p#rFo$(eG]mm;G5J&^9?&),!9$`?Jqg)kKoc@YqiuEm<[0JT!k]tHe'B)fQcf@leYr_V^'I`5Bgh4hC!I2h>?>NC`fK+%YYs@<>tXA2=cQ`n)"2R93t4dB+XToD!<,V,@8=2rIe%iLWUIr6CTm35Au6?'ig+gbMTM`\TQGL5g\?54\biA.T6Mt[g9jSC/;_j;%@^h_a]OoD1CF>TICXKYDQGGqO?BXrPF\&5.U<T@B8qfheC]Y^E;ejis/N'd_l@[@>8_P)BVk@VR\tkfu:2A[^<ja@VMk<--o;]/m%)4E;k2A89f`fTei\NR?<;DpTG.>jQ#oTFLIZY+!W5Ik&K@(Mu?96t<9V_ojAe!_3pAQP/KQJhFU3HSV?E[=dFG'-[.)SU%JKB717%qJp=U*P:4,C8?c6+/1kS[Bn`g@i+f%SD-S]SeSKunm(K&HC!U%U\0'U6AlbtXS$$CXVNaZSu%^k58Hm1\^=aD<O:;0c1Z5(b$f1p%ms`s2);N%GS\^<8S2h0UaDu]7A?j_7&%bGSg$ss-]2jY^L57)d/9O.!+g-m%>2ja!D1lDCKk/J1k;uTt(Qr(BcT)8S\*Fs5:<HeZ%)s[s4[Jj`ZqEFSBK+-IYGXsE38j/C?7eqIA.;/";X7T<*T(Xg8B/)Gq0]"a!32jdVISYr'1Q3hf?/)6]NgKchZXOsDpW5TjXe.,@%pN+<4eAb\7Kj1t&J6m\&"dl\%0V6\jK*&:dVPeX<7TpHGbDnC/!+P\P?3M2'^U+op:kn6GWW:f*E4!R&ITQaj6^:UYZS`7OD23GJ%;,=:G:TFI?>LKAQYbf>hFZFcY;(lH)s.B]QI7R4B8M"0s`mZ]DR.f&&V0lS)aS+Xeq4b?0rO4E@9CaS)s&-SV2mW,:;EeM6O7m4W%;D7.l87Hd%i;MS3^*G@:s"EJLHTuQ.0'19&Iq9.WnjU1u(f\sD9,Z7AI\tQOP["+_EAeO!p$56s=5V;XlKqomkg\UG9g?_-9t])]%]iQVU`p-(gqSfZoG,sLrc\@>7ldsuDP\Q&!H*:St%`qrRda!U4p0PL-R,%;HIdJpY6Ct6Lme+b"ajl/nrBqr5RQK,f00S1Xf7%J:%pK.@\?GH3CqYfU^OG%uZg.s+W6acf<r=ZT=rMepD\C[p4``^Ged*^Cc>(2]>Hkb$*HFh_3]qFC6:ET#tCO`BlQR>V+hWreMe4n&:%meU8)Uo^QR<kk6pj6K(WHhMgbg:+r2hhQRWg':SD);RI3ldrji2PD>f8,)j+#?8??rF35lr:jU5ehjo+XaXTJdZ;RMjLp$0R9;-h%]7,(0?XfPF=!<6^eGHq.m1ZXt'raF4f.U%:eT.]tb;iWg][s@c!dZf2om3fK>?]bd-MQP,^\6(60(.cci=q@:I=/`[4XAqMf6oMH%o"BM>6cA6B[b]d*f3XXW2=J69ldu,:^]%3/Fir%Ojnj,&?i,(h4H&-qp\M;4eZXc*pps#EBQkP*c\Lc[\,,dZ5/*&cFGA6`>4;.M%jsn(^L["24^Qr>eaK9o?`DDWiqYB??GcT^tWm\I[F&I"ZbBs3AWB"V[AFK9S?GCs=]lq-A03d7JYP7nhX^o'`rFbm$FdI07E3J0F%MrFV=r?Ct\LSIIIf0$IQeZ[4HB3j?ZQbpe=)UK\IIX&&'qa@=tT@+8=oh-fr1HMX?p6qn968kk1q-Li(m)ksWlPEu7/[tTLP!'Yr%f<7>,j>&cA45K5S?8;'sM*9_]f=i@cON>,kldu,:^BAuO8,)kf;hBZ4duSkSZKa-Wh<Pm5anVueD6%Ha\C[ptE9L-;RJC1(p;0+1%8dJEt>/WeWBJX0B(KrUY@cpAJ_sV#7aSh39Q_TqIjP2rh5$GB3j'tQ(-Q9Z9M3*/E3UH<G`p@%<_IWdT$'Z*HG/lCp:_>T^3%]Ri%N)rO$.sfYbp0MK_IXGh$o)iL;5IRWQq2#^^E8@$CXjZC)Q0R]0p#tt[j,VBU%\F.>XF(`fjr6D4_;bo=@X.WdW0Vp\fklc+s*5R0%jfRA$qka79fDIf+Gd['Sm=*Z02pR`H%sHL4[>3R&gOGjhQ`BB/#FA*&_WBlgWVGr7r3uL7<LS;[/"On4IH5S[UE:TSnA*uJrG+9o%%0)_HSht?r8oA@V0_7L+g][$-?YUZ)ZP-OFA*6MN"5:WS;ebgRQr=pGm#9BF4)?<<6a%HOdcSQAO,q&^iud0.Ak#!Tb8WC-pjfHQ%S9_<)VO`]FCrl[D]d`UVqsre=pZ`<gEq;JW+j#/kqU1eXYM)QX^=emFT=tc;J/%_`N\8!5,VR`4C@(rQ+!s/HA+%=i(c^;Q.j`G?%bk1e41-@IX5M@$!-D)(E>J!P/UK>&XdtTriDO(.Z:theQqRG?$q+#*qC4$LL<lPA.rgjcMUO[E@7*F^_Pb&Z.jE$T9MYL5G:.Tm#%685f4qLmI/efN)t-Vp0a1J:LK7q_G:qOd0Nns_C9Em<dl\a%erl<O#RDR/4:er04=L#\0ha6D)"hkit0h[eq9Yo:qk><"7c"bC`B%AS122JA2Gf=ulVRb;TdO.k>B5@Ua*Bmr_XL2SIUY+5^A#HLs2">qY$"Q0S&>32HL,E[/To22TWCf1174J$?f7H<bo4Pg(DKC)TP?%8S^8?]@*_A7#:q4fK8QoF)G7\4TE&Io3_@`eC7LYZ?WsX4C$,/SssO+I*fCT`'D9qbKA"ns'RDU?nm.pbPR@CiCEe1Sc>>qIdh^\%_1/,2*fLW5r:(hE'R?S@;KM>r@E^;^8tjk'/h4@0lf6q/D\EIc<@Jp3%0`S$cg%gd2"4EWD;SUZYIt.K9Df.]aZ",f:@-USpR0>]%ThPPH`GAUD41Ee8L7\ep+KsWSDt6]Wm-Vooap*c%4`6Lalar3=4l%X[;ls_-g]]4:<tW+o`F29aSp'_uZ<Ou/RoBlP_oV'WAdV`u%B#hpX:MR9%8`]k/X+\Km<eil:9)FgZ0@n@]Yq^0hh\?9R'i/uX,UOV*C@fcTc-Q3n_o&MTdBqp-h4qF^LEWJ@C<P)Q%M&`7CUK?@%PmJS"f4qdaVBCWIe%R1/qEDT##,'M)f9c%]mC.p!9[Uf?aW+JHWGp[NG54Pg4F__R]d)7^Y)5`!!ZX;L6K>VF]_gk$oY`0.%uur1%QQ(E,-Xl6IR2W*WSUSb;=HCc=&Dp8l509nHRQ^7EceC"URJ#+ap\!)a^QQZa^u[]G680KI#HQ1f5U&KkjJ`eG?"JI^nm4>$-Uq":%@.t'$oB[,dX8^&`A6-+;(AOn*Y2Gn#,Chp(ps/QjY/+tm`d3tr5[9'P^7j/KOEPX5+UI.XbFT=Tr*b*71snTV4R"CEYqc"YO4<aa%T.5(V1!EnX0DM*i9)apuBh0a2_O3jTHj-<m4t\r,^,4@1Kmb%^,4o=d/2(<mcJO`gqmIUbo?p#=gU,6B0[o;H!c?G`rIRBurHf2/%V(C<MDZeY#;3AKJMAold-\<?Mb=se\GP;i_R(^Gi4I;phlZZ6\R(eQY>(fUtHGc2U`V=RmEUUmQKKm@n9#/$i`)T"P`5hVseiW+6%cF6W]7S^>@OC/e^j:2Sl+6*L_SM025qiR=kk[VX&<k&J-[1R1`5[QM\)VC#b_[@)h*4'"&[A-pqH,56:/.h^YX[#o&-1(JV9YqhU%9A!e(7tJ8X<PCYCqT+=.W#`GHf\GH<2<u5Y<?MCP?<_>G-BdBK>/_Wn[Ei-nP5bSUfq;<eT(Y)sbX"?N%[KOc8Hj$>`-p,ShVejW%Q&*H(jfMW%j7jlrpnAQYHf]K]6?@Ip5OTeDbXO%[&o/M3m+1L.O#2@+:-\B?i6q#6i$LY@5K:V$-9Q\j#?,lI-su$%%L$XrP$f.F%GGnHN%;LUm=Rnq;'B=SN&PQ9c[UOg0V((g+G3!g_^PU^ip%0TrB/=%#`rN,5BS*ET'M\L=%,m2B#-]ad2mI=D4PnUd7W0mQXNcDF%cD0hCJjjU9L':mds0Ru5/I(fJ)@P,.nj+Yq?KqfA/m0m*&>5Q!>hcs^]6]=J-Znk9:`B@%*TK+;G\HSNMkQae]'/V+q:EQ"BT6[!%S'>=td;KDMGOM$9KYe,[YLC@n\e=iWBtG5L\L:sOr_HD5n,;lST(E"L71Oc9\gk_2dYB1cf0V\HZPj3`-+N&=FC\n/Oc;e"2AR=b%Ql$WT')2FoX3u4Nhi]VQ$[&,-KMX&(@T(AI`oX%p*,N;HlIrgJ_XU6/^\jZ8RZ^M<*sX=o/YUefQ_G0D<MBHJ?XFT0?iTOS#Mr]$%<Xf+tcr-0&o&iCAib!I@rbNLY$.=^F4;DU"nQ"gpAbl2GQ,B,sMnoM:b$YE0e"tubH9Jo#m6+Pk%j#Bl-i:7,K9^3@5TcTq4mtPd%<;d%<*#6H_;G5JK!ArU'dUG6/+Op#28d4d,N#9hX)lA9-TDuXi_2\lJ:a0EeTV#G0ZsnItQQ2nJBS1/&m.pS]b5eK+%XX2f00l^W%<ma[13d;aDTDL*f+Z?70FfP<C)(kj7e.Br;W'hY*8.R^u"q,M6ol<J?Dk2j=Wn1/o'>ImDpD[%Rj'P&B;E\5Fg(*<4-HF'4VFq#>%=mSqj6)0"Vccm5,SSct]C<V[on'tJ,V?\C++!7I'-LZZUSDr#ZOCtn*)u^ITLCrocP83;eYE.N+=!\1.*%C/IF/;EWOmOZ8N112l%`a'bDUj@*aH[jihgk=JD`uT&;S6_r_o;F.RI6:NBW+bko,/Ci1D033H,KKD#VhZ<u%-X%p\@c!pcgtDomKuc:aV;njdhk\7Ku?!/%I56OT9d/BlIMkMPVNAlQql)=BIks+>FKJo1V5b9NEU7&_SaWKRO3Na#^]2%G.d&."ebKq[h1)t^D1(-rn(n#YYM/=0p[e@,f<:$<%ebS%?Pnh?@h;>s'h>\r4KXZAu.7l@_-</VR+0hpp+ibC6&+7m+o$G\SFmVITSdAP+Cmc"1j_8t-GK@uWbre`1'K8eBJb#GJo]YS6%1/Rh=fGuBD+4US8Q$!O&,r&H<$F@J)k`0dp4eGE-?Su0W6X@6\3<5]nbY6oUc+gME\)r.b36P6UQ,`-HEDZZp4&Pe"5BbC/q6`[+%RVo.c>YJhtI#/D`@!l:q_ml$<L25)c5j<H>H_@`/3/P2Kiie=BpUWO\%k=&njb2domqAAAE)FYgF3p0R-"DV]P]Hd]k:g$n8J:=n%it%jCp$hR@+OAI"A*M$:34`XD4ta+n-SS,@b<E<d(\mVYKJenI\NK!\mK[kGp<%DY9$YB_0Q+G\Ii+p20I"g[Koe.).hj>C#8:Sj%OU:bu0(1rl.u/diL_7lg.\R+1h\U@jK4[Yda68=j?dLSGdF)8K,W%lkiMB!dPqH_NpPJ,c2*GQ^[&F>Q.7Dt>^;^d=bdpB<@\N"l%m]Dao&+dNU,ggEc.me9::*4o4cQ*2E6)B)!nFK1-99f#loGt%n>UauZc5#3X''fPsMB-V9!plPl^F28srimB2$W#'0'1,IN>'TO*%A+;g5&99hgW<VbOo)36A?O>-Crq+.gr;Odue`%Ztm;7;jroK4DoH[`Z:<+u_n+-29YOB3UIIt)Xn*`uW*0R!^[CFmuQ[Kb7$l-`g%f7O="8>Sc4A[+OYbDEqAJ'g!EdaSX(-+EU1[jgC7d(URq/$L%f2`Y-^0huT3(W9Z(Sa5fL$W6"[=PnK'D0YomM<?NP;MIMH^SpHi%kiNr(R7LdHSqG4!3Je0Br;O,U):%up(AR4d5e/jU94Ks!0o"_h#K1b="S/ERk0a1rRsa>o*SU0@`2lg4Wa>r!Ls%Giia=QL1[i]=%92\:;)L5p8>q#(C4asNS.*C>\\I=cT<m#6(nhsMJ*dq$V7crV!7#CkjUd*I4PO_TW<ArDjTjJ\ZH210g]7$YV7$N!hZ_Yim6XGrh%[_/eQ/o0!&>Xu0sVP9G:CWIT&,7Y@sOY".L^:56Uk6DaaCgPNol0na$<!I%(_D5n^)j/%b'!`@,BQ,4t/7Q)0*INQnMt;SfF+ULC%4qCiPNS8#"gdLsV4k<#8EHno5nqn4<@m/rh*?:T;?"1hgHC94&Mtoe+#9/YMd"HF(BNAV;*$&n@06rT.^P,MJS7O!:!I=_1B9VAd%]KS)rWmWBKb(sbge,b;dKKQ1=f_O^,c4\PmJ]k7<b"HY?WX"CSV6'hJ`TbF'\b-crqZd#H=Ge1q.g&@P?eRRlO392h0]F?bs6SCs%SS.=6PRnCHM7*2968"9r2J4<X"=%0:(L^Ak/QULKagXQ_Y2NVLjHIgO)G]lXATsnLHe\m0r8RU'YIFVeQg^th/SLkt1V@dpejS5d%FrE_en4p6Y1l?1j0V6tumn8rn._RC08GlLdR[DYM?'R4?@6*a[QNnW\[-/%7I>FPtVN9)rA1laLA'/!%Q,%Hdkk3Y=jLsh\BLjfQ%jAsHdd4F$CgR7pQQ8d!MZj_a4k!*8J]?#Nt@K(m5V))aLr%S.:oTD3:U@beiLKlA4!o)NX"6,+3&)9hO%#Afm+/HL+#D-0-,OsiM%X=Yd,(XlfUo,`5'H3ihHWHf";B0C2`A#HtpdLWW)ZtA6>)=]>Pr9pZHYkJ7?q0u$`QeM4a=X=lkYP([:s89X"*#[W&SR'fRm_XFZ%>WtrFh>=DE2nWO)0&6L+qpN.VhtrJ)qFg`^U&X(Yg\ms`c7dF!l%]RYo-RO@]RG2,^Ak#FIl1SRq9/($a&hZsmFU7IQg9_4rA=W&%d<]k`V=n]aQ[JUl?Cq'pT^aFsoK#,c_Hh@WA%^#7^ZOdqU]7%UkMPL,c(%\:%81]#?V3c9/CW$m7#s>sNfDop?i%$"J,CP<s84X$%XoCFF=+8u!Tq.]k)AU_$oO"WX<`I=dIm)s7h5KPKU'@i6!4,CtU8^1]rjPJ'd'jOrZ#:$k,8TV<8/%ZA/PWFIW_8>OHH"GDM`S=(%:&J_+>/aKT6@e:.W\Qtb%/&4<:;HK%e,hTFn!L[8@"rQUQZPq%'NKUY.cM2^U?UM)B<#[=.CEXNXr)\`\.1k7_m'NB<a8@A)5>MO%r1.#r1^>_2@^u]W;lDe<Q`\mT;qL4heZDr^CD4Xd(oh0,ZRCe%-O.EJ(h.h'?2_0%h`2G+EbX`p;6_)Whbc<^6hH8==;jK,MIk2F%'cOQaC@X1"eBjFH;c!m?>`;R[(n.E[^i1$J+hI'NEg3G2\cQJ'Q5Gg%8&:oTJ0+Zp>l$gm>jfk=3/SnfR];5$CsrQ@E5kdDGG[fU%@(E^j,eg%Edhl\1Wqak=<LY/3WHlC'(nb9jnhYth.:BS65;Okt0u^ZeF$i99>CK)CL[M7$jsjgN<("KG-4Pj`&.@[$%Kf\LG3)mg%Ne6\XMX0bEGY(gOib1FSJlnIda)kT[G,Hb"JC-uGfdVY*!Lak7@c7VWUCEK85Y/d8eSrH.Q=Al#g2P<B)<4[`_`L7KY0K+(0Z178%V",c;5XWG@';F3lg]G_W(ns!Y*2E99&4N[iTd]IPgCi/?)nI7;ZmF]fh'#6Y(eNrQ#dc9B_Ic%Q%4gZ$(Eg.\PE\_WbNf]PKBRla%]M4DTMbIgWT3Mf%HZ*=B%+-='fH;<:(_e-ZU1t)mCeJ>;d4J9^'\Bd]<*TY6lHk9ti\QMlEZ>*8FRbN*@T!>;=pIH''1!K.`-8cs%bU/]hS)Q#"f0i8h@09t>>V*'GGbV6jTE0':8>&]p^_@OcW00tjBU17h,2*W90r4rG>@:J70bbZd+c];GGg#"/[eNN2#Y+lI2o$O?%+hQ?+THGAGk'EZ!L+-Qf98WkNZ@?=IQ@rAseE$OacXZ['S;9q0D=DJ\.#S,;6+DWOF<W$N''AO'0#D>I6n?2iH"%\S/Vt"tQIpVj%+=ae7.nbgnirK2\M.Zm!44nt;-Dgo\La9E[mM*^r8E,oa._TCp>TNH+&DQ45#\siM5[;37U*PaM\?>uX6iAL32]!CA!_u;ue\Yc-%`#rmVcY+Iq0f]X-WR1\"4?!_fJTb]H,hp9gR`eYs0\T]_f81;?d=_L2<9"E2Li2_-&nX16C65B-dNO(9CSEc8[]>!U=puS@f9hi-%BGB@oWWL158c[IB`Ci%#1o(f\0UjaGRP*YD_2&7%Au<,s.Y'dY!i!laB[hXGZ%Q?BcU^AnAua"_F:C'$/D!_7K*YrW:WLsr=/M#B%'?E&8I"7U"52tX\C<1>//-,a+&RCe_2bYp[[UPk3]WqYpj==j3R1@@^R-L%g^BEpsa:2>eT,AQ5T-1]ifKI%j>tQDIGBA:lFZ"tD%gON7$^s`aV7C<VnK%\Od\JAQk.<h6#D`Pa#(uhP\"Q1%G*GEl?RK"tTZ2A4$I*8?4'+iLl5r?h@,t'G[0T;+BQ#A*06Q@F55\N:t%6L;^Jp'6J!je.9=6IJR0'O<t'kfE<F0lk&d8LIUTL8_C:i[L1HR%!ai6l]U1\![(/mjoTY6N%qrg:=@5`oIK^OmL<3'MLM:Q:ug2%-=P4P[k;eO_C4.S.qM%A@,4J<UOj$WJ6'INT<X%]Wh(NJF#479dW6*i5[9kL-8IEkQ#hei&BL-\K<Pe5"onsGK-@7lZVmbQ)J^i'%.AeP%bd6gWaH.R*.3!lI!JmHHT4&04#jO+Q/N))Z_McSKeagF!'OdBN9M8gl(B^mA=*1@&`m54:1B%2W>7B>mA`KlD!l2[ARhi[t%Y3tt[JUOh9X[+<Y#cehnR'nL`18&1Z_IP=pYQ<^uRQN*XJFIjeieV"^?sg#7S,R%9O$FNPOF@S>)BqaHc%]d0#jnR!#oj)ln6i^!%(9n_X@BNB;-uK)13Irc]#E"0d^XJicfVFXCi"sGE.*P\$0=`"f+,D-1AfLT,!?I7E"r%n>BXpil=CO([hJ.XP&do<k"oV+.@ZFD3%g(h%sF9XGR#J^IC$0eBT4P:WrKc(Z5Ft<Y[LauX[B6>V;J1)O-87Ot2<A`eU?k'mg*AgM&gP!5YhSU]#hPBA5[k1*t7auss<H!.s%fIY5I&L\0r6SM3,%/;>+$;\rcM&'?;Uc)V=m56FfQb>+0"qHa;/S61M,WT^/%$D&&`]-:Xq&NZbTN+qSOGZQe`!&!+#8CUaJt;+_%Xa7=+,&K-n@\$L2!WpTg0gK/@7_2u]XDuDO%+f!qX:LIT^kOQ\[UTT&8?t(86agi(7>f``&.uh\n<ObQ2JWMu%hjH#6"<_5'PXC/%2D\PbnY7$i9s^3#.'2`*78C=GLf-oTD\.l7/CD&/fi#M)D"4'nJ2Wh,1flr\Ss-J<R%cO_L.m:sJ2mXp%!DabK_/tG(q?#EH*bt"%+kd>0g,_,d"Wjt:B2_f?=Y?M;1^S8_6nG3L5Y8ed30NlsDC:/jV&ud*bE0Uee&u,9Tp[O1+pLJjW<RXD6HQ]A.1?n\.aArZ2*c&\%'X7kFZSWd,9.K?6E0VP,;3FnK9udu&K5@/e9joEbfOUZV4.FJ&;C*/hken><_a]I;;8?H4Q=GjAK[ulD*#]Amn6^,]ILG5<EpLYc%80_a%(O@Y!.2\.?%4#k:K!lX6/[f7F'u@ZjI/k^%hK>9?BaR??0lkUF5a0b&74QXj@@df45T6_UNR1WJN55Huh,L5[`R.u-!8.X3%91I;3nI&i5UOF4V68[r^0nag#@*f9=@>gdq$W7]>;fEM8(P_%mcSQK&@-31M?!>^rlPMQ(Qhd]4RC*=Hf7*-l]"Nc$mV!t\(^ebn%lPF8>:ugJT1Osos:(hij7S1j<jp[UW1mD?(RgM7Q#c<6*e"UNK3*L]a_*0/#dX]P<kOC-4M+`e2ANP])H\+!7&/Wr?98Fj@lOmY>%D3>)mG\Fs$f/c+jn-fE](Qf<oq*`LrlSN>iQ8S?0JN9^bTS<C70jA:jc4)ODj&9,FRh2HbCXAPiNS&cm6<AKql"MV%3RtPA;\d2I%']QY[1W!i,ZcOOMBPE:['A?R"B[Lu/0l<APTgRZRB[N^)&gd&!/2?Y%,n(r[BnFYDN,1Q'5udh!r!*\"=CbOARSHLb(q`c_k"HJ`%.?[ZoA!c"?.Q-Dq?Y,G8Keu\Q"3=m0c*P6)$%MKEru*U<@ct,NP(K,/h-pI[BTfa&"LWpcj]Q[,[6\qcTfTX8Uk[O#TQLD:0Sh&L%]1F,!2cJm79OXQoA/<nG8dGXe)4h"R+gI`K>941bQN_Lto9_;8N/Q1b;nuK^2[,0>@16QL8X$n8;6M]J-&p_fCM"P3CM;-GAdA(3%V)sVZ[Pp9]JV<':e$O([-'t&sdGuIV<l,;\:j_[hOVD=S)K^Xn(&MOg0&g@S#.k5,K0)dd--Us?;'"n\-CCqChjb%'JAt,R&e>bK%liN3GAo"lg>XT=&NapS32kj:jN!ZLRi4tK3-oi,5a*q2gD0_m-6g+iF6(/g1!1oa\$NClu*26*kO'2\c)`0<Jd=e9F^,BA@P,Qoe%j688@#R4N=Dq>]W'F5enB8P`jB]R=_Vl[6*\QBR+;c7dT_rabJ6]")BUSc^@(D%;c2s8!1!BFku@L]TB\g1IJ#[>EqKPBprd27\3%RS:)S==kB9:a3](jAJ>s-1"^PCZ)m#i;eIk#7"ZfKfXeZ)=dtk@mW!SAdO=<0\BVIZm#2YIk*KQb>?.P8@8KieS#)o:.5!'.KrD/%&?Hb$5uf_[@/OpF=<f2&"[E8nJUcA2(*+Q2_$8PA7P,7-_digMEGZbW7Jr9)&W76b2/p?)YnNcMeuJeGN^8q\Z+!(WB9<PG9Yf.X%TjZ6IP,:f$j,4Du?c5cGTj9NYjD1-Q$=>HNU1V8!YZqs-(rQQ>"Cj,[N[R5F\q@DV4I?h'0fd*\Fsn$FFG)N'D.:,;<sp4'6lnuV%G3`(ZfJB+jiX-V0?`V&K%6>9;h_M&#_@!R]681ple2'It(kF7Ie`#&!4J(!T/^Fnh!]CL-Hbn"!\OE(jAg`AY^/fJeJ4W(0_JMg*%]"t!g6uQOX#VdIs!8:kj_K4!LY/7=COLCqu^`87h*AVbj`nBEk(!RKQ`6gCb(noEYLs>G)61EAJN!=)SKHRl=W("\b+9t0#bqb4U%(T&]Ioeq>[>/\u/.KlLW@l_ds6d'Knmh7tcQe\/5P7,Ne#(p1@!CG*4X!Hp]4Lk#@@1<ksE*\><gN;DnFdYt/k!q,H.RWJ56:T^a%E4M\JNAr5:ik8ecD8K>mL@g1hPk52%$NuB"1/.7HL(U0'fN_@&#ZhUG]"dqq%0thlBN#C'daXed#oc]n@4Yq=a\X.$ksHAp_c%e.%8V,4kIP<#*(2ZM(p<X28(o]sI'gX#$#Fc=t2:rt?)3!j8L0eQ^L%&PcY-@9#>t;hq=F:HV8<b9lEZenlWXoK[RHW)2";p)VW<bg\%28p??N/u)6LmfPk?ih<_&N%[n<?LoKJe?rr%tinKJX[J@US_3MNaUVQKG^ec,B<pU%,Q$$p(Xmp6bNE^])ZFMHja+%3G"\RhY9#K%j8P/$/&=Wd7Tu[tR'6]fDM`XcGR4Eg_K^)-9[Oqemi6m%B&aMYe&91"h$Q=M70972KZd`o33UHP.l8%C\7NBb45@:=N[[Z\:brk,%pL^cg),V,9K#<Ef#0_eJYW7(M?16]'.DeD'.Df^5oV];f]t_eqUXGjtE9lArF]ck*">;%]2A[o1n<UOW5tg'DLAUS/g`Mfr/cNiO%S!Ue0&%R*H!fubieuqF1f?ka>,1KsWRDY_cXKBl#/F6?,NC=eL#:%TP\6VbS\L'b1m^VUo7i\)U\iM#F,4K1O[\Z=r'5IS76r[*o%jW[m4L;6s5S<d#I<th_`>t7R\JTh9X!KLTNAfqL@E&2*d3]fdgXoQJjfQ;?J?kLk#VSd:9>n_f"N03-`\uEaN7a':h/1\(M2UjH`%k[^<BN"[?@FF9sLarrlYYf$"!%QbY)Zel$`&02O[b.]#eS;B&f,k=sk&noKUPSfhtTlVUe^!Wuc#f,6$Y[h+!mT;dcP9:\>6`9lp%/'HM?URq+$O!&8;k85o!&k\7F[3Z9>Q]tX&lg1F2^dA??KTP7%r5ufY`%7;o+_q9;9]\F3$"/I<&;G-*lA44ubiBapnF.Opd9;j[%5T391*6a_o8t?e62T`8$CJ/K,+u"WA:EB:caijf=+2V&^6?o/SDDl:+,Wdk#_&O:H<M:c(WZj9)qT_Eb"KBs5N'A__A9/&ARnb:B%B;rfs(SCodWPDh`)V^8daR#JIiGUL)IH)H_UI2d-mT&L9e4C^cGS:q1@T5:Kpu@00!nM^@OGHG$+ZosHk_K^9I,;/8,hh7B"h;b^%[FrdN*J?K\UCBX%aKg'_[k,q[d=rOUUnY+me!=*4iT"[@R`'usARpsW20:[60k81p6SR/[&7-[t/As@JWY,+_*S0>r!-67PP_FXV%&*'==67S)S;?67`PL1,"=h<OF5tg^c5`H3Ko,uPT5:Z[bJ)l&O/b9YQmU_9lK:m29a'g":Pb&'[Z]RI<RfsUYW?O6;J\sL_9[uE!%P2QL\feK4@[+0MYXWP%[rFUG5f,9#!_iTh1pq>Prn:EJm2<`;?gueMXq648Z?;%Daj2jYm".C^4)=S)h]p:_Z6$`e+,[)$5kmF4B%Te<8C4GR<4?&CqTCHu_$LbccoG#aKQ(o.NWi'D77j2V4ZoO.0pOBg.bQ3)loheaur3UgBj=EgqpE"@kkcCdB4EgmG+jhKo<ghWm3%IK<o.0]7aC&9$.Y\q"SS3<UQ0B=@tjK!aF.3E=^eA/:!gn0-F7`!4><p0f;<h!c9Z/Hl]h5HL=ZK4+h-#[.9GK*Ndfc\($8Jl2>^%q'5W;C7X7V8>R#P,$AP4Ld<K.8:JAUb[FFpBp$1t;Tjh5E2(2C#NkIt[j-F=FUI"7%FU$25W`FMIS1S.<@1)Grd;d=HQ.)G;ZMH*%aO7mh]TrUicsHeE7ch)nN4`_NSs1p"O4W%[jiT:-1HV?h;[L:u.qcU2<!h,m",L@mKCh&<^^0U8])"#Cn=UuPm.][10QY#P-Tmd<%$F:=$j9("jI#p94^R8K^/X,ee7!jX(J5ZT="]30?i]OO`g-QF,k&Q!+h6^^%lRo.f)X"5)_FonSYbgm!W[Z1q6_lT=XEh'KnLT(N%3kPKrmTJImcU,qd;qT?+3!_r>[,P<KEbOso*#oHtBYho)2,b7<(m+u\&K75B)AOD.@$o72dfhdg2ur1i[OJR7NmE=`i7<\Mjes0r%Opr&NRL6_BILj@k]id_,CSp:=7'$G=Ro"f@R1Nl(D0$HUQ^k-+`b5?&60eeL#r`=-2)$jmV[k<r=tj3Lj8t@Zj=A0;NPMV">o\te%37-aq)((l(pt!9!n[C2pK``@+aRF6@/sosm5V]'`@I]7&NJt@ZJWTBe>/KasK'-g[ZqR*2WWV?b<RjKj;nrf0Q,KQRL)9$/FN`&U%;Yd:fL\2nCJHb&D6M?lmn;%5mUWeG?Cs1m7!E1ggC"Pq\;^A"r]a8G+5TGRbJ_KUSHQ-]lPXRP7\m$t!,Wn9e8/##<e?<NQJTfQ%%*\<9k*o)H"@BRb_5jDPW;fH862".:/MT@j8;rLIdP/q5&9fu@ah%B/)+=u4.EnJ]I^j&=$$j;+t1GNui9kZIBdu`D>#b==UEhEDg%fH"UeUKbdh4BQ\R4Bq;29+tQ#73qDk8&KUR(_(gA`!@*u2WP._Rc7PrL43`ZlN\83l`dHqe+D4FPN)'\.M9>FGj2237g/6`7O!!X%-@d^jFjdF7)%*`m[RV'p!A("<b_>!fQbc)u.QK%_+tq^#]e+f%&(Up__/Wm<@nZ%,`,LF>PrLJFY3Q?T_DPR)'CVUr!+n#`!L=hY%T=mmX(la71=.6EIQ/Q=A^H=_K_),F147[NN1a*3g`W;Cn"gU,Z`!3Ik8PP@4NEbR!79HGGkl<7B+eK4>fk:HS%)tpbJ/JW/1S_4O%W?"54W&AJV#;G53^bYIbdVNH2dSBW:q2eem;)8c(ojA&J)(P@.CFOc:r<4ln<.7KVaBRdCOnD9#-+-;)Xb+ANfMjGQ))-)]V()id%.f^EtQS[]T5lOTarFSUM+EPj+j`fiSK\fA'49S$UbVFI3AP3%LkUqC2A+Eh2L>=UF?e2.=I't9JW6)'h?&-fmECI[0N>El!(o50X%2JjSjW$4`bj8orAFmbAo]?,eeUCo/H&B0aGs'ZYoiI-F(-BJOh[LS+OD'<*^%kBi6s%5gL6tH=4):LmiW&$_s;"?V6N0lbu_2*aH%4"O\1&k5]FJ]q79O_dBqa!nkS_=8S1f`Hbb"t0;"EhV468'&rNVC^G-%>/gm*1AcPYd6dP%#rLs]OX?"64q[@jPk[lPP>VR9ZU"\%\j"@#dML?`&-c/eOn$cf?jKnD"aL[3(s"ipeGog5f!1-^9*$=%07Xoq<u2h=npKDC;-_a1Qi_<8&>^-[[a:@Cn$!?l@/JE]"Gn:Z%b@q_'kULCQ=RV9p=lp\-<J]aE&U?/E$fbK>'8Ehck3>6m86-QRLhEIO5_NW!k[e]CW#0462DZ8Yf3'gT"k\V`=Qt.o":LO@!bM^j%TD4C23UA*n/g^f'LSJcJVh".LJX;`ad_oD#DJ=[`&f<sh!lE[U/a#S/PFoR1JA*@n.30ZT,'JrG"iTM%+N*@&?"$0*#3-6B1V%L(%Qn*]+Tbmu!-FLf(0$4gE,h#AuAKkV&CI!3)R'0-%__8(kM\*Ngs3X:nf[<ZBgX-kkd[]>_`8L,GfZ<>URAtQ&d?nc!_L^ZdPl\gq%`d.I>^CI":J?`:/9EpX'%'j>l$0MVqEf#JRN6%6\Lo&O6d?m/N>ejgaZUbu=+Kio[Bo+C=>>C`N$ORLmAJQks5V>;]T*YVXoHJb)%FhD.g$B!C<otehQ=E7seYZ,0+8,t/-==^OEJQEJ`<grM%Z9oIbD.#/^0I27d-K=X$0Fa_Y_ctFC9*6nq\9=>JmBNIriRWVLS!=7H%Q[5j;5gs1\+)*Za&D=q_1di)q^*AqVZAdk/^K[Cp>,JNdfklST*,IgG-OVs/r1+4RPEs;_5>qj47!DId=aL?6l\#7S<resUD"P:_%GOUoRcGV<iPqKPJ@/g6=&t&iJliM0[6ZeG"3+Tm@d-F[b?HrCTAI#d<1P>LbNXG1*&ZI@4=O\rhA?sB1RpS&dRM^d$.'uCRUVYiU%E'5-uf+=Z&=/_Rs49efmjbi%-R$A!q'-JoD+$bo&N$5HZ^1H&_B`pfdL_C[>HFnlo:ea2SQJ(-eGg\3R5VCeHhEI^K"qhP&p7NAo%/mJ7>+]<4:pbHYf>*d0RLDU,.a=P`6#t5gCWO=,.XmD7,.R[0>fK\^M^1HtudqMq_Q\l,!m6^Q&nd`'k1ITVR/$6:t`ah.J*dL`F%!(*!^R#4`=>cEJS'B'g="2SK?!iqbAN@%D/dWHG6jos:Wkc9`bp,BL/b%72(Dl?c\k&+#U3K/SB(![M!3e;S2;/u_oNEcVF2'_e:%jR0NMLA`&$7supcd_mmNCB/,MH@iq/>PNDb-oa8W5E98'+qfOI,,oCrl9kcG=$^G.j!-0q\RisR1b\r?qi=fSAR>OZGaM!'4YCgZ%KO[-RN%Kq'C:qg!<#?2b0Fk:M?nIC\1NPp`+Vu/u"RPa\hm;#5&")\*+Hg[nTgAauZrg/M-X[7X_XmnZG,.JDKfZ)5A.JUDHph*i%D[n;"8D7ZK9G9,giQ!jL"ouU;7I]LJ[lsj\#_O"$bqC`Sc1OI6:)u0"NPk90;q*f,*jeREaAFi/H(sYP5_b=oYN$XiE<n9*;i"I&%&-aZ6.YmbOq#go>_0l\YkAjI%Qt%bT'9dL.5tSWrrJ@A&SI-U'58%#$/sAfD^_qEb,2#i`bd-%oBe]Dc&73=*E35$.;r<c(_YM<0%!HD?]47AhU:=,0NNhE=9HNOFl?8E@feHL,-JEP^.?DmoW%/lS6iBRt#&aYF.TI(IbJS6UZEsaggNu9?b?75,5nQ0l-lf7HWmpCd&%L&'KXn)p7nYA:ch3bA@u2)YOZ<&cN0*/5nI.Kb&5XuEl/&@[9q8o35k+L`ONeonD#`X/im3FtQ$JF$"S?GK6/<;6Y,REuG.E-EAa%2AZeEJ'/qChbqYa6@O'MLTNp@,iPZ3XF)5%_`e-VZ!r=U//(Vu.Thgmb%dKH+q1=UDuV"k&`XX+A4>\2.D3]TOphHlMD10d#t<Rr%%B99Q,QQ4K`EPiuMl*6TeICC:gAt,E1(R&U3FOU0QDaoJ5e/ah;l#-L,.)]$7B2rq&-H$m8=\sInhVo/!(c9l&CbP;;'67#9"Y@c%W&"L.`%mela<q/1S!Ff5`J8-N@%dM*D."RYC@c(Y-^!\/_oj6eNd4<Q.+,tr'9O0,+kd5?[Gl"*fGOl/'u;8O1_K'gWI[BSO7&q/%6X\FaZ<8`O0&3;#?u1AX_TN%u2o/hi)Q&@rn\QO*f%!FuY_HUR)JR&AU:=[U9q)O41_CQ[1mb[<J[u!^E"ucC%K=G)aIEM%$#_hq%$)&Ruh6^H2hHNLaaQ_Z^pBHB!!g/jnGs5o$K<1T*@1"VRL)RISoLDnH5\[)Id6J,W".>VGb#RBMa"ft-B?!M:$tr&qf)rh<[ToL9%MH*L3_de(uR7UVW>YO&XRl^(ZGAqd$!FqquE^pCk9+HglBpPJ?%O)JgDONCO9a'&B4%IX&CjB2Vp25DK_#=MU[Q0rH#_Xom6O%Ue%@4Yp#VCdo23[IB.(f?][=d?gT^h&>E:SpX7ohEn6huOM0C8:Jlg<l_]M$DU$aq8cO5=5Jo9I^I7X.6COm/=q7"Co4[,735fU1-W+%5+U\#m.l3[FG!*j-^)OV-HDmM%!-Cu#A;?GQ=+9m1j'@n!Zr/n!$.1E^c]rIX,Bk?Sa?_b^f8-=cnAJR2\X1T>c4*ON3<uTN0R!<%pnEd)/O\GBlN<FQ5oiIBE$3mZT1$ED8B31pqOl1gA.XV=4VfCVWM4;%M.!ncj;6Zl?j41uW;G";EH8tu]?FBNLJ7t!l6uk!=gp!]%Aat`K=W1+q*1;i`bW6NkG<ruO]qd*FO!/TT_\-boqR?]?!HsSOl:a%5S60cAe&kPqj;G9iKH(4cP["e!C5U!dC2=H>OdMi)4=,q]%'T+$b_XJ2X`:hT-3$LME;a<`jKeS`j:"21]iX,k0jo?`fF4Tk(JOL]?q$S\VXB(5t(/4pF:k1,A74glOC'BHf6E7pS61(0/M1-<t%;#DdD38FuQ+hOJ+;8C8QEB2<VW5=lS%_$ri/n9edQXXtL;4^Z/b!d"8.NL%C31>Lh#/[,k:h\mF$m/-nZ_0VbM($`IAF'b-bH.",%9uOgIir`6<Dib,k!WeEC7Mt>(3rl-Mh96Fq?g*i0PU.Y#VUdL:*Ztqmd5eS9MScu<8M2\sOAmS'^p%nm-^+.2pl]GWQV@J%E>k?m%cFJi%A+7;;cXE1nOrU*7>[IadA(M%Hfr3"[[Q.YL;5<\(:/9sp-<>YfnL3kd@kl=mDoQeBB",5q@U_4sX407j/C#f!a,i(u2-Zq_%@T#b:V"V@)a:Qg`R?B=hK`)Z7+@,fZPCl"7(_58dk=snu5-Y5NT#ed(%a,aKs5C=\O`"aQa>rD(LBt^V_bl$cjlAP,L[bV(.Sd-e%!<dZC+3s+]DQ'm;PYZac0D%!Ii0!*#0hTUt6_sMCU/V,na@96p469C,36WPG\PTdf&e:%qM;"1@:OtGlKFms(0-CQbPAtc84_Y>P%9b&ds<h7M-D@#R>R4p>?g;hVcnJW>h9D*,2)gTtAXXc0ih\M4n(t>j)!oJ#&1YW1oc4.=Z%PrDh9:nY--bLG'3I/n`:S)f!9"e;Y%A:&H_/0qkJ![&:lk$qbdi1>";:(p;l,g(t.#)`T_WlW^J7/el(jYKmZ@n[I\#D$R*SZ'GlOB!<KBGnjX'sE>r9?hPZQn$/lked\I%=cS*pYl("&+>P$!KPPp'8m!"LjVe22<bf)0=2mp<a!*F\(0N$Oo<VOH"[0]g_j'taZR4k>P2^(.bS51\fFtDG`2Bm\U;=`*R5S/e%1O-pF8-U3QHF]?/^I=5%g<,WS;UC>Gn-C-bf3jE7M]1YIl\jG"Dh/ddf-BH<bLQZt:_s/tECE1"+mOOWiL2''fYY?7jFf>*pnS$^%Cu(B^@0#b=;^ApD*oBR(eqDq8"-Po9Y'/ENJ"3C6/)ggKpl.7CK"aV2&XX(9UJYq;!1t1G))ZenM67/=JJ1>&.g[p'7KJ7kg)L/m%6qRe.;fF;9[Q,KLQ.X1JH4hpV$,LkV8BV6(ZJQ&]@ilh@14243/TXLb#5`C*=uc8-:VP8"aoB;Y%ra+?WL,<dQ#2T8l(T5YX1GS0%m!@8_EJTB#;IBsZOh#%;_("ld;gaUa.M%Hb\['Lh!1-52@VDnr5@\mL@,`"@n)Q!RE$[_D#B0g?E5MDpJ&Y&=3Z!i**^[C]GM!UT%aTA12Ziu3SR0.snUB(L^a;Dn+@E8Oa(0cWM8JAG=4n4:YnRo\](hIep*5s/t)_3q!\[#V!:H6fk(dJ[uKFJ\JP,"M`iVq'_BO#h9%?DN/S(fq&14m&;Ro!a2Q)mWGYCJgmC)j567!N<l%#]ej5.0T5s/5:A?\Hi1F<(,O\^6OO%Jq#IAAjscU/L$o:0Z*CI+)+<TOGKdh%%^,KEpiK_@G(Hk#Mc']_4gT*:qWC7E`Jt6UeOp5OBB2I$nC9ecdJQ<;9cUkAbef#B%8[HTc6Fh=3)[QQ-Po(4X3R6hP-ncX_Zq_P%75uqBrW\#2H3.\M(a%&B&5Xd%-#Dd6Z+"[M:^"YUA[JhYa:a"ZZ>:+p!C@/GJqIa,'T(76j?mug'@J=G=.C;N2<bC`3@`Wli34sp%L&<&5+$9h+"UN.?OPm>#i(-+DDD0.j\69,O,eW81pL\Q`lOG^-7F_m,:K3tH9K<jq!,rtKYq-1_I@s%0=b&J0NL?RCkF6(=L'4-7%c2f!%\6m&4JW6Z<DK4#ALMe;]%Q*.U64m<6T0^L!bed1-Bn%j&S1$m**&R"C6:\TJni?F)_ZH0]&usSe,f!QC^W"U&@Mi1DfWtFo%nkrL3dS4`(,(eIM.!i*W;]cAi"9BJjNZenRjD7@<&e";`*;5_OEj3hLhMG`03S),;9"I.F$Uu?g"IU5G(T4Q*?m0S$;(nT+fE%3N%Tp4Q($&$Lb=ZQ?/MK-[.oiGCC'd4%3og.)!d04(uia`qFflZ<'?m/Z&E(rKf@fm5Jdf3$*>=,Ed6q+n)d<+mrQkCMsEC;!)=3c/"%nJhOK>uB45*C7?%rZU]b'<J]*7lZtHQP=RWQd&SkInX"SAm(l%+$MoU:O]PODYfARMl[FpA7kY?3m4l6-AUH@#N5Y,9*kG803a+L%DRl@-PmRqNSY(FOKeGne3haGCYpP,D,*CB,\o%TrJu46(+L4u)_D;c5Yr$aeW$Mi)O=\CXIEW2k@9t@MDI<K(TEnqn'HFRa#U>`s%`^/biJ++6G'9gIgo;X?3*7JWm4DjU/++jcR/l$(I!XmB!KVUsf)H(]sW!7:1OWB2tJ?=Y6VRMe;63rqpaGVhf/8800/!L]jYa"K\%6/JE?MrPgdF@'L]V3)9c(:c"LWWUn:jeM3:.G0a0jdN>#9LlZ-@au5q->Fb#"1l-RH:JXcS&Nc\g1`aUk*?D/=ckC?5KE#kM!ZBj%S'sb#E*-CRO236e0eMH_1%A\(-=RKFkWmW0\B#oC9mMa:=.jVN"D#F#mM<R4dcSDFL*R,S=#c0(+s.BZ/\pV-X=$2^mlrfGfotpM%,5S>'XuJ%2"AN0'jpLW%>Y([[)Nn`*6$G9_"BFf@/u8m:bON_b0(]r7G!7I-F%o%k#)]d1)#%-=;,ISa)^h.XI!,b7D&P0n`\`@*%L4&%]?eN!Wb)p4Gp^-j.IFFO8ndpT#9@t..,YK85/:<.TVDTKAc_)=m1iH0<hnQIs[dE<smd/S+=co+l=L$G,&4Z2aSq3fIVF6($%.0l8*7ioV0OX&auG"5+(%[KI"`0R0'g_=Vj2qbW$d12G2D-6CZO(_V4Mo<q=j0"NZs(\8)fsKeKF/!-7"@Z5@BF5LEGVVO%B/Pg"%%'2dNTRk;cg9(\LcY(*.DK@?68NTu#3@tO[3nFK/l64c;G4)%3'7h/6G?C@Dd<7nt)@X+O>"fq3M1W'"o!,uHophFX%4mi%J`d4/%Jmo#O;GF?d@d>DL.NIlo!-.aK"O6>Jk4XocNY[mBpsuBV^o&T.d:-"-Q3/mo/Rh!/dGd0D[Q]`:-/#f830cR!N:bkALR(SgXI"1>%4f8iW9.#28!(p:aOb]S7kE;6+)f`<*mFgc'IAR7Y!BAM:R@gs="Cma5Qd7#6A]YK@iRMJSetB-6Y3-8c4\hb)-g1[U0\^58<!),d%WbsDXYO`/<0onc*)?rhG@!s=#ata[tA+-BN!)le'L$uF>;&Gf@;SBm+%/<8b[l,mI;%;fW`6#caH[dTleB'VTS#cu%CNP-MC"D7/%IRfBX,hq<O585]pa>AU;c(MV7W'nM97EgkrKrat@@j9QO.?fVXJi3=<S%G:X0Yk29^B%U,88)kK)#)/CM7,(<<E=)2nd-UhC&IbI%8a\WH3;KCTXjr>lNl1VV!VZ_I>au`!RpPMu5JQDDD],3nqAuTdmFf]G#pA8$L.g%\Hd=F(QH0ff1A<oFNI%O%Q>egU6*m`GZ-sJq%S+F<3kd.'jq48-DI\1A]$NbigHF[tkX@K)gNBEdW:T@acm8hMBIeWN[jd(6'271LuGtf7B&)6fG)mn6DO$TisSL4e\97O$8=XtA1%CR-9-[;D/*Q1$&\To/$$mthF:^rnjoldm\(A/ajcUTc<LrY@,Y=.K2X\>UC>,U0XE%@ZJQgH46#2T1^\K@CVaYf9I.,p[g;2u`0_%%%2#7l"rFd'#2+sq'b>"SC7=CF0B$.m"$fI&P(&Gio0#YTs+6e9@gH:V#^04G>Q3iT=PK\,Lh7k]LRT#@Om/b^$FpC96=aq[o"kh%:MHtV6k<K:c+FT6Pt&o33^qo4#nrAcSe^RgQk,AoLu?9+qT[Pr;$[:@hhS</2G-l-[M;Wq0QhHji3f&EWLdHYR]n.\HhK.6'8Q2s%gF0bg[Kd/D(+lnUQ(FsWXb`b>BbD7M*Z@$n>DRMgV!^aLPVt)r.,&jJZk^(Q!N(Q'PA:<_nWL)XE`BLNMcSpD@padh\[`r`9j5J)%]VMR7&TOo676lc-!*XE#:pGtunoCp)b^XRCC"+,g"PBY!KKF6CKH:<%Xgf@LQ#+L;+QiVQcbX,p"gIGBg5C(FEs0t1Y$G[G3RS:X%`dTBlo.^A60*QDOH?8I%3t.#[/AoLZne2R?QJnHiTc,>AisL&He:?>_<\gHmK=M".D'^e!8t<506(r14`o7m4N#"r@je-9;"a/.s%Hjti0n;T<arNDQt6!og_gWpbZ[V0BCTVRR^.EJ]oL9g,.UA`2d![ft6hB,B9%YQ3CMD<9qKIhd\,[)eA1nSP=;4hmHQCLdP?afIM%;Ze31j6a.[WPS]d^IML[&roJ6V.s'/Sr/_ZC>25mA<Md,@<8N(dJ1/*:NZ%s<mEdn45+)E5MFW12gmi9*gnW)-7``DOJFAn>A1%B%\1T!&OZJFm?W0cT#-H+>3Bs$<i]"21g+e\S)WllKgk-B;p3f>l-5eId"VcO&P!W5H$B(7Mb`u'(]o,pTJ29fYN*cRQ=dD3-N,Q`o%%[^*rR:SX)"s%*/SS.dR.OFiKkanO!R_3tfR_F6\++N5pe2\rGCmPccO4:TuIuiqtmP)")Gn/UE;)7#B&W2I_<eQ;c$U)No2r"mp%ornUep(A7#./o9io.Ak#*0ZkjU(]dmV,..u(SsXYIMt,86+M_`E=:c=F[6qdH<kqlFWS>L)_F4_4l&tM)<+i>.)A5q'rt#r,8i3=%3ZG.(_MYl-iWN-KOC:M='_ioRFAb5JoSMZP",HF@%V'sRijP6$fa=X2qJhO'[;C%tRsF).U-U`0^#_%#kco$bT;1i,6M1p#_\!1d%rjc<\&$`hd'upZ?P@)eb3,j\3*-I@C+AtD22CJHZN\bq"]2"+U3?d/"g[fY7=.DBAI;5UnbluAmq@$?.krk/=]UH!NXTo;k>,&9!%!9fGp2.8NtNL2*R@bhEhDOptn,m8E1c?s;%P8hBpUC04s=Cll>;eug`9ud]hfoQVS%6Pd?YYuiKT-[L+VioXuiA`5aAW`\e-7C,>%DZ)`L+:&A)X^_J@P#@=="81a*D\&_,[Z5@:^4:ii3A=fJ5kkuC(>PgB->7iA&B%'BJWU)_[#'XKP!GanQBaQO,'VsTC`%>gOGb!D%R2kp`]-D^UEh3/f1<Mf*lZ6<8>"sX2Y0OFoKKt/0i2A?',l=C/EdAArUu^ogE15nq9^nZY!RJH@j?d<?+873sr8Q\lL/i,FR#gJN%5oaj&bQh-`]F`SJ-%\Bd;-%qS5tUM8.r?,YbfPh_rgI$2:t\Akgs^\$L0QBWC\C<.D5;&c3R:MEQVFl+8RMCQ)J(0m=MpZq$K/Gd%p#==1<OJJOpB&<[.:JQi9.IkVKOcehh3eQLHf)^qj0YX#&H-0";+!:/Ir&PSZM5@.la,&EDXY[20B3oUVj%7_)d!R>b4ceA&g9YI%mU%coVCe0B+RV:q9nK;!*C<Z9%H@khF:AnGYMDrS8&"+P4(h5@Up"Oh1IjQ-5.N'&]JN8CW%6X4@;kk4'PW\7kP';Zq9IZZ&4!B:%bBVbk70[:&JtSbi*!OF.'aRfAcCQ=-:t]-A0IrNN4l"/j\K`;H/:c_s$'LPtK;-o-nG:oE&Uk*V5S?5C[I[QtVC!Kgb9rF5\W?Wc%KZio_pFAC1lM%UL<#b\55\KOe,4EAMq"VP'-(KY\lLCj#cgOs3o);rJ%&E^D&\jL\V^>XaW-Y](G/$Th6pB[p*UV^H#o(F7a/=I3%Z`)]`oOo,/4j$\BkCiH=a+\h6QcIGF`rrttlMdc0^[!pfhV*n,[f9_.5`HG5^8,p`;7sL5Ke4nNF,t4(:k#s^_4Y^DL6q*aZOh.<%h(O6@A8)+(G01N=&duK=5T!G#,d[AfXVE$HLI0Ll6sqKeM3R:!+9?*7>jG"[>:mG>c>[ARLZ,C2^>/=T8AM>5G!d_2U;*;]C'L&e%)AOjejo:_.l96;E*Ets6aA9<W5WWl*mCU;ofGXLm-)<0,^h,FI2Q5;A0_5O-\D)m>rTrM4orWJ6JBZ=c:IQ-?+p'5HK$kGQFKo?1%6:4?@8W9+Q7N>k5*]Ek36&Z$!Z*BlCVKlmLl)Am?o&"su="@_Hak*Ir&4uUAF#jGb=o03!V3N1Zm79oqaqC1QJD(PZlkO:^lsLq-%?s*/#P]5>?hqD7SHp,j$jE2jOFn)6mk2hrr%T5(8lViS&IKZ0KYnJl=aLSOUE%/+/k+C_o0J^nFR%ITR=0g5H9=FLbOmhtB%4_&q%Tr=4t%atOYnL3rCMT(lWlF5O6a/:>QEG0W&l/(u-!.8PI;-nNQWL"FKj7f^B:[]@<H@5",2tnhNH%.@h#e:c2C(%<I7J*_OKWPCF%omc3N!*AV:DD.jVBWVBsV)((9OZH'WckbD>.j\,kP]/YabT%B_`$!2iZ'qjdm)CU0"EV9-g^'-Z.H*ntgk=1/$4TId2PlT*N("cD%aSg^%MJ!usUA,"WkrQC/m8=NJea]nLa@-3$(2#T;X.e3X^H.EdQ2tmXLTW)_5)Y=LSS-3(oDTW;/PF:u5^Y!hU`'M30NT&(d<2YW%V2%JLSU=XU*TU/rAlp,93te[F>WBNEB(js5RJboE.R@+(M-\Fgk(2:[&_#`";,6M@E/T>ZGua[N`uZ$a$i'U"')[&`FmlNQo.f)d%&NYUaX0E6tlXMNp0Zf<jlBo%.p(@b#nip]q#jdE$X-h46VLMq^=U-]SWN3PkV*nOC3a,`QSgH@#F#+Sc=Af@TL=6Q#jRJ6J`fsSC%H)"pMf[\N>_IH!^&k>r!d*]-a8k<ds$t`2^7^[#9^T;dKLqZHjQ#AXJOtYH@G6);GTb!Jlp1PJT-mGmko(V\_"<1"",/u6[`bY5B%&J?IZA-J=U=-+BC,Xn0B??o%)j.?;ooK;["lme.g^.*-Hbq)"$[rR'X;:T-&\m<+j\Qgf!7D3r3bdlJqMEl96l1:VqF:sA84Ld6%%(#0=f0D8+kP*+10"f]rK)!44%r7Fr<J_ACnGrhV3,Y41OWij)re.$!/$=Wm1ZTo+31Zd';&?6@Dl+.C#M=<HsksZGL2RPSF@L/Qq%0sQgC6.0.H6L#]"aSCUV=r%,jSUA$eBE0V8+MjaMem+K"TM=^2"-!#-UkQ2:<Xu'SGFTn9BShbE0$!h.@TZZUGD=*UjYAu%?&0>`%lPZ=o2%C\7=mFP#9-Ig/+-%M$-o5BaEU5>Bj*"-t\^GqA.i@Pt[0-R[GfI--hSi@mm9JGAYINImW477\(ulj`SJU!'cRF%=<+U^-%>k:EVl,X[nXV1ma6%r[mC9Q,A-Ri1a:s/Me;_EP]O$<MSa]M%0:7@YTU8[=W-L=SDkO?M<)",t>G6%rW[(%iY^(#+1!$W5`#Et?\%$8&EcA:6nZN=5&:NXO<+P8fKGB2X-C[HGddNa[#Y.JR%k>jJB-F^(hhh`F&sq=`>6Lf6G/I?k63F5LW13)=rU<5;GiO!(gdFT+0B%T6l%:"Fp&k'`@f%cT,q9oo#E.3;K?07r\M&N`/2*qV.%r'='`ES2AF;T0!Onba87Wn]4$[Fe/3RXn'm4ZOl;<]=s%?p"]6=!f#S/%^9<B,SiXX<lL`m-JcIrV^;WY&WUh^sT/W<Z2,bR0050pOp\P^_a;;N3.@o:!?Z!-hmfK[[1tUWFaJ:fKpl';0F^)"3B@`Y1Wig7J%$`[H'E(%&9mQQZC:VqQ[/]%sN3R,AOPQST[-tjbL(dR^+V!fsRUmr@sY3dHks3^Y<D<e>e.YC(i'HGoX0(qDmEau#_``(t)f]`b.%6]5'L9NNM5S!`R(**3>$?j/7'ddgO9a-qtMG+L](m76uin'09]G^VkhWuU`a"6JYg?6h3mD>j=R6[IC;UB"cL4ZK/_/,Z$4cYJ`3%;I(4U=B]YD<,[,I:B/kN$INq>#BU2?XSLC),oni$jB6sj)(QA(QUo6S/;,!V[E_1Lg2f*KD%Os(13;004nDh01X>(E.*$*L7;];U%"RR(;'SlRd%Cr+m8>a6Tlqe(/,YaKH*+no7[U/l<%-k7,?gKiuH@%ES\'9(R+.MnZal`!$jgbc"lqH:nolj"qS)WT9TjdPIO$$;Q%q'CgK!`RM_>03sbMn8",9PI(]Rmsk5@-Ok%`;;JKJ_F3<V?&;eD*88K"V"IS\ukE3`#Q!ejUeLCYl[g:T>U#lE*k#M;"mm+n2u.&%D`gJQNm(HVacun55"*AU[Nql"=o;,Kf8<FE%[CDZbu&QbFs]XWiJ"6`rQO8VfY]U,Z]4Mgi9$%Fek*YLV$B)!Z<[Sg97kk7B'^4L%mIo;^;Ma@<WY@1BO=!9NCF-!32%TuU7FunGNAIJFg6AN,;hX^(?F>mtE"9O,O*SF4q3o@);'_3#Rlkg*g)>j"7g^>^O%8CbHBUm:%Z$9lW$f\=&!\MEG52C_i.8UsQ%b@(@G\cX"788A"V21Ur651:^qH7-+h$:Wi:E71"^/1M@QH'AR$7=!g/2aBio2:hn/K"^q>R$#?%K!ACR,Ii;2>UW;WoF^L+`M3g(WWO[cEX.&35;%Je7iqrTIc^n]!4`J*#qXZfLRK)0S\8`1cMb:".)JJIchdP0&<HeUa0[U,o>4IK%?3AahU;)RIJrr3rO-5_Q/CanU/]6e_(\>WVbkS3OBuBp+/PEMDZ[^X@@p8E)V/ro3'aWum@SO2*$@T'][?.V;WFMh=-mbgT5(K#>%YZNBhi3X*+A2@,4DWETJ4AkTj+^Z4kh!%KGcr/N>;<Ah)N*;_[(:_YqjuQ1gRUR]]Lus9;YZY6%YQ0OaU5<WOiE7!D;ftso;HP;:%FR)[a,uNp+:0$-F`U>*a6`0#*B?9J<`MGSdGcXrSN)mVkO.5M/IRbm1;/*GcB&t>@e$f]HkYlN4=JC`gfX"b]XMA$_cD?q5)DDsg%o1[^u(^b66o*ERV"0><f#q9(mT&f'Vo!+>qV:JM#7X!bVXbcAMA_+(6ZDerR@H@nY(DX6*JT/Xk:=7pA+&,4\H=I004VN_$ZJMe&%32(<=Q>:>6U4ASCP$W)1?oq\dTCOf#aS')AUmL3lBlb"(fWf@oPI@,dcN*$u^B\"oLma-SWI.PPUa8?-3eLgb44,]m,k%E#P%]`g%Nbqp`eA&/#.pL$@^Xer;YXZ5mB_0#/AjkG)KpS!#Vra!J1C]!*45BKdMD4l2ebYHllkt)J-i^'5,oi^>NS.:<Q\LNIj;YIIA.qL&%PiQW;M[_$VB*k;GW6Vq\k3tt2E.AKLJ6^pO^)XX8WDKeY<kl]8^!?.c3W@`9p8->p`>VZl?jW[NHojffQ$!H@o@U*+Zo%#:QH.h"%Q:7??9&\N%mQBU?="q.]-r@MUDX%tbZ>i\^b3#%dj0+%(`[+1c]m,mX5I<@9EYrPuKc_G9EW[^$bDlVV,_ApM</sbiA&JuI(SX8]%#='W3JC7>QX*dB!a/=Lo=.<YVEo*Tn[3`Cg7T)R/YrKFkL*\j-HBli]PW;_^(d<tZ0ljkcrn@0`#u'XVYZg*B!Gm7N5S_]cG_1b'%0$2mjX8/QrE1'oCpo2[<l!_1rr]NTc:1q&T,ENpL;P7GoRMh.Q*`htS;V^<;#U&gT^nG4V6HCBH1^Q[Y#ro:<Q#%m!d*:9,9C2XL%F`-Eg!%pd/`L\K1`"mJ9$XD`?B]Q.Wl<NNe^T$cs<,Q7JWD`!eY6t+6UY,+4?";jolpA\<0eSZ%(jKm8_&\u#O2JDhj?PiN\2e[j%!M*F$fiLG[O%PQ5\f3:`T'LH9/ZtA(%br:h(enj`d,@]8k7Ll<n11Mi46/r3GD?R30Pquo4[oZCVF]3P5bLrD&8Ila=5B$\eQsqH%dZ6_e^FX8O<-1pC$@Q)*.!BRB998;KCk8d-`VX-k'rk"QJ!I71[d@gfc[fjci9KF6)mIfBrU+Zn_rqT;M8!=!3D/$Ql"MfFM8`B2%NPO*1RFN"G=b>_,dHKUVDn'i:-<Z3fmMs]EqX]0>V6KER!b-(/9sF9V<Dqq*@Mf*[$Nf<rC`M+/^\?sTV/=!$Q?\UdL(D3tj:p)U%k#U)!B`u<G0g3e37Tc.gn??Ul>Y^KHm2XZ>)^PC*XD[)<d+EcMl]!r]8l(?QLJA%FW\%d`*?u+4HrjnMji\GXX,O5gmU^b9(AH-*%-cK<nM'Z'f[-@/!CC?nHBGDR%L"jTIHda`4iMdLtX835aaU]tP66EngcHb)o'lLuleCA9*M&\]MRlJc]UeUKVZ_prF+5)&">&",6%ai5e\MXLj]V_#$&`I$@hert]:6Cef!!:[Ds!J,-nad_dH`fbcXLg`q+1fRVq-^b[f)pQ\PV\XZQ/.MS-?\$qdf?jJWn*^&>[)H)*%$cr@'DnMWZ>)3)Q\VC+ShG((%95,h*QWMYmgA!C:V0+%D0!E*CXpJnh<QGp_'S!E'E+W>2_IXQN7:8\:/62p/Nt>#k]ECN!EkEXE%6fU4";;:@M&b[u$Y[i/(Zc^if:2b$V"Q\V\&)@h`@-ua0:h1<m$DJAO`MM'@M3)srS?HNM-B$(&S^C)\`-i(Y)U5Nem`G6nUrAG!%e&:4(/:Z7QY+*p]WlO-n!YYR4.#ih=L/H-g*PG"$KQG=$,c(WkAoWbN*/e2<>c*k/q&X==cT3#`J]VpMcb^Z%e$e+uJ^_RD_IW*m%X-bi1J6B]qoIi!!Ko5%D:o@I5@_(3^-=2SrB`Je_1[)_Ni&>mK#'MYs0glK`W,lQ[eNm-eIlTd"V:XXl9FrsO2J00FmX"aO[+(!T%Of!S01R:D]^pGi1=@\1"hgB13@qa'Rs36.8V'GPW:!N"f)%phNl-<JJ&V$Co+u,uY8C6@Yi(e[2E%<I[X&p^b/]6\W752K7ip@I\%X9$GY&caIL[[*(4/V7VTNm0"I7`?72KqO'_kh@hP8!-5?:CD`?F"cY&<:-TQACX#+EV<Q/A^kZeA&M*bMF;0X;-Q6,&NT8RZ%H%8%LJj?0o.jQI0`$+kTZRNF+h7$rLi>hs^*AnSgt*tJ/PS9nS-i:!$LW^NRl]kQMDOHh'o?)D5q_mh6YM3fHJb+Iqiacj^)46B5&tQ%%#B-N=[(PdlW(XQTG4LC;>i^0taeU&J-p]2\j]o@tD*U6[P3EAr(.g#Q0,=W]K4-U<i(9.F(X.S7+!`Rp^59p53Q5,kN]IY3R`S,O%?NN"d=Je\dgnqMVbK>1#aQ'^Q2ecu,L6t<!LbNRA[dKmpFC?SLB\>Oec'n-;BnSFo0N\o0njh#5&sF?^D&%B,-WB>fdj!QW,!j9g%En&G+BB1M+OX6[QO;lfC9"4:n3HeU4l*B_Z.[q'Q!N!"EqPN4`+S!FNR33'3A<fHJNIpl&^3#F;<a/g>QE<PE&.t0dWV#NpRYlFn%Zn&Jp0>Yn"Jq80sP>u(5:q"Ab1"dI`GK8?Ec[>-sGjVHYF&sXk@M:5k8LpffZc<Yq2;3Op4/)rO?H48kqQSVj:aj+rGf^UtH=`C<%$A1sZ-/2VHYfD`%nI&NZ7:7-$$FQV48J@rCS$e>gOFr$]YJaF`0C<E0nTb7,^HdJAm2`(A^77$P^&[g)'b;d;L8J/"5sjuj'?>rl%<Jq%X.LG!cTDH<,llpJ/J025<P)BRUa_W-jY<Q$JB9#(5/E;?'O]0AlYoP-hRDR"j,iq=fl(\jCfcIUS6ZNNkau/@DjdXj*EE(I?%;V`1>Df0eUfX;idXo0_q[7Vs\<u<X4C>dWqoeLSViD65f_8ac&_IV?'pgb`WfG2A1itBl?4mll!%k2qpAgr]S<LKVf?A=P(I>_o(%TJL[-T"ZA\>3pP:cSDKK_LT9NV#PD(d9[;+X/XdSJT$H<O??u"42_qrS-8R=lVoFIR;.f&a,#_sl*>-K9T.$<46i+I\+AJ[s!?L6%(I]WV7tcAp'h<dMU"#/7fdHuSM5!F)n&o+!(+"1:+:,`r`.a?4DgjT;<06Z,H#pkI`]FK9X[rrj-qo17g1K:+h!1=*\"tN<6t!uK%OqR1d^029PL(ug:OCLqS;(dtU7KO.%M<<;=R`jDX3e-!r[C/T)?[E'^Uj>+:&c$?];:31_D63/#[;Zl&[lfq#@*_u19\Z!jUfdHW%;:E..q#b;SmHZ&&D((jqf8*G4dSgA3CV^@t?9S?^\T>;9U`=V@6\H5bHHU%*DqR2^:<m-g6\pT7[!W:p):eRL#EZcFA=S"V<r:AS%Wb$4c(j_)i"dWoo9Nr?VKk>RdS2jZ-j_$S3]JuF&a<fa`&tiNujPp?Pj#lN,!VJo@.\?KlYK#n'[dAtJeW(^F`oMYp&lB</.F(Xs%$b#]&Ni!/11fXj/5jW@3m*)JLWHqqp0J>C0&\\HC>g!!lq(el8EuRPV_e@PrQT]Z^1RJTLqi^tJ-?pA7.ZXIp,J^`VI;_as!Z&5$%KZHq0hi)+*(RqghC<s?/`3@4%;l14ZhWK+LhnukQ;JOk?M@+J(e=bEW`"NB;C5X^(4m3EV/`XLG9mis'b]G5ma@]-'S?TEH<_?K%%9\H#a9Te+27PaRo.CMI=QR%4O0.)AuaL)DY5oOLqN_:2Jp9&l<B%FDlAZVc%rT.mhHM$"jeAtS%GDkL8ZJSqP<77=rbn/*DN\3a_%L7Cs7Si$R]]#QIc'$BL$BTf*i6MR^+75GP/St=,RYm._V&bds$<VRUt[3b59jW"-egTBi2^VI+#?&pbf9e<o@<8;+<b/>mf*C2o>%,AH`E)qXt7lcZJHr2efSlT`.B`5Z,1GBa?^19R9bbUQGq`R`'eX/iOZD*f-BCesWia<>ngU'i`Y/jS`.%8J^S%7j7bJk'Z#]ESP8%:cpMYi5cJi[(Ybbkg\`3XjkpJL"ikeX6c?lp7d'OUR2`[8!IWNE/Me@PI1CVU;n77OUp8CX,"8m3_U)IJ[G9L(KbYAm%o?akS3'H%?aHQ%a*l^K]5B>jiY9$cRqU0^RqRTM]BLAk<bljdnaS9So"0g*?Up@TFSJu(7'<WQ)EQ,[JR@_IVFu2$nU<Xp:m&U'QA2`b)V(.>%UX;r1((u12*J9$ZqQ*2JIunsjOs'HChcib>NkND20/QWo,HE<^@Js;J+mcgiDRi4KW7;[4\eaGHD03_&/h7`8A"=*>0f3]F"4;!6%X<lFZX-9EI3/4QY?@cLSBc1ePaXuXaN3ukX'=T5m;o5TmO"5\G3S5@qX9Yo:#m\&@Rop+LNH!FRG\lc55-n(o*NBjZ*c\W[$YJjn%#U:5%cJkMS4dL2#3=SQdhhUWD(+Xf-L2:o*IZZ:nc@2/?g0/d$\fC<]F!s).TVCZL]dgbO/2HnpeF#Lb,$JWp^%oZPH)rR?jk8ls%fh=?-Q(I-oM0)t/hJUVh'.Ag;jL3%FY1IJ:TgRp:.4lATg@"1\9SIPo9%3s[qW)ZFFpU7'4\NmgeX-R6>#hZQ8S/hpLJ6O'Hr"BO%(eotCaJ%WP4ejG_NYqO.U:lrH=12IW[_>cgad7c2KCA`=FcrQD\)#)Pm-@o*PPZ3mmb9f#7FM)3hnApdDuZO2g[G1;n*bc$bE"md%mW\-6s8JX>pqr0mo$\-Lq>&('hYlEZ5Q(H>G<c#qO'M4qs180j]0H5cj.HAK:I"gQh4O`-:]F)2m46f/^]4<-s7l?WrX[Eo-a*~>%AI9_PrivateDataEnd